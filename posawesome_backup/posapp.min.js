(function () {
  'use strict';

  var evntBus = new Vue();
  var customer;
  var opening_shift_id;
  let invoice;
  var is_feedback_required,feed_cond = 0;
  frappe.db.get_single_value("Thirvu Retail Settings","allow_display_feedback_required_option").then(value =>{
        feed_cond = value
    })
  //

  var script = {
    // components: {MyPopup},
    data: function data() {
      return {
        drawer: false,
        mini: true,
        item: 0,
        items: [{ text: 'POS', icon: 'mdi-point-of-sale' }],
        page: '',
        fav: true,
        menu: false,
        message: false,
        hints: true,
        menu_item: 0,
        snack: false,
        snackColor: '',
        snackText: '',
        company: 'POS Awesome',
        company_img: '/assets/erpnext/images/erpnext-logo.svg',
        pos_profile: '',
        freeze: false,
        freezeTitle: '',
        freezeMsg: '',
        last_invoice: '',
      };
    },
    methods: {
      changePage: function changePage(key) {
        this.$emit('changePage', key);
      },
      go_desk: function go_desk() {
        frappe.set_route('/');
        location.reload();
      },
      go_about: function go_about() {
        var win = window.open(
          'https://thirvusoft.com/',
          '_blank'
        );
        win.focus();
      },
      close_shift_dialog: function close_shift_dialog() {
        evntBus.$emit('open_closing_dialog');
      },
      show_mesage: function show_mesage(data) {
        this.snack = true;
        this.snackColor = data.color;
        this.snackText = data.text;
      },
      logOut: function logOut() {
        var me = this;
        me.logged_out = true;
        return frappe.call({
          method: 'logout',
          callback: function (r) {
            if (r.exc) {
              return;
            }
            frappe.set_route('/login');
            location.reload();
          },
        });
      },
      print_last_invoice: function print_last_invoice() {
        if (!this.last_invoice) { return; }
        var print_format =
          this.pos_profile.print_format_for_online ||
          this.pos_profile.print_format;
        var letter_head = this.pos_profile.letter_head || 0;
        var url =
          frappe.urllib.get_base_url() +
          '/printview?doctype=Sales%20Invoice&name=' +
          this.last_invoice +
          '&trigger_print=1' +
          '&format=' +
          print_format +
          '&no_letterhead=' +
          letter_head;
        var printWindow = window.open(url, 'Print');
        printWindow.addEventListener(
          'load',
          function () {
            printWindow.print();
          },
          true
        );
      },
    },
    created: function () {
      this.$nextTick(function () {
        var this$1 = this;

        evntBus.$on('show_mesage', function (data) {
          this$1.show_mesage(data);
        });
        evntBus.$on('set_company', function (data) {
          this$1.company = data.name;
          this$1.company_img = data.company_logo
            ? data.company_logo
            : this$1.company_img;
        });
        evntBus.$on('register_pos_profile', function (data) {
          this$1.pos_profile = data.pos_profile;
        });
        evntBus.$on('set_last_invoice', function (data) {
          this$1.last_invoice = data;
        });
        evntBus.$on('freeze', function (data) {
          this$1.freeze = true;
          this$1.freezeTitle = data.title;
          this$1.freezeMsg = data.msg;
        });
        evntBus.$on('unfreeze', function () {
          this$1.freeze = false;
          this$1.freezTitle = '';
          this$1.freezeMsg = '';
        });
      });
    },
  };

  /* script */
              var __vue_script__ = script;
              
  /* template */
  var __vue_render__ = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "nav",
      [
        _c(
          "v-app-bar",
          { staticClass: "elevation-2", attrs: { app: "", height: "40" } },
          [
            _c("v-app-bar-nav-icon", {
              staticClass: "grey--text",
              on: {
                click: function($event) {
                  $event.stopPropagation();
                  _vm.drawer = !_vm.drawer;
                }
              }
            }),
            _vm._v(" "),
            _c(
              "v-toolbar-title",
              {
                staticClass: "text-uppercase indigo--text",
                staticStyle: { cursor: "pointer" },
                on: { click: _vm.go_desk }
              },
              [
                _c("span", { staticClass: "font-weight-light" }, [_vm._v("Thirvu")]),
                _vm._v(" "),
                _c("span", [_vm._v("Retail")])
              ]
            ),
            _vm._v(" "),
            _c("v-spacer"),
            _vm._v(" "),
            _c(
              "v-btn",
              {
                staticStyle: { cursor: "unset" },
                attrs: { text: "", color: "grey" }
              },
              [
                _c("span", { attrs: { right: "" } }, [
                  _vm._v(_vm._s(_vm.pos_profile.name))
                ])
              ]
            ),
            _vm._v(" "),
            _c(
              "div",
              { staticClass: "text-center" },
              [
                _c(
                  "v-menu",
                  {
                    attrs: { "offset-y": "" },
                    scopedSlots: _vm._u([
                      {
                        key: "activator",
                        fn: function(ref) {
                          var on = ref.on;
                          var attrs = ref.attrs;
                          return [
                            _c(
                              "v-btn",
                              _vm._g(
                                _vm._b(
                                  {
                                    attrs: { color: "grey", dark: "", text: "" }
                                  },
                                  "v-btn",
                                  attrs,
                                  false
                                ),
                                on
                              ),
                              [_vm._v("Menu")]
                            )
                          ]
                        }
                      }
                    ])
                  },
                  [
                    _vm._v(" "),
                    _c(
                      "v-card",
                      {
                        staticClass: "mx-auto",
                        attrs: { "max-width": "300", tile: "" }
                      },
                      [
                        _c(
                          "v-list",
                          { attrs: { dense: "" } },
                          [
                            _c(
                              "v-list-item-group",
                              {
                                attrs: { color: "primary" },
                                model: {
                                  value: _vm.menu_item,
                                  callback: function($$v) {
                                    _vm.menu_item = $$v;
                                  },
                                  expression: "menu_item"
                                }
                              },
                              [
                                !_vm.pos_profile.posa_hide_closing_shift
                                  ? _c(
                                      "v-list-item",
                                      { on: { click: _vm.close_shift_dialog } },
                                      [
                                        _c(
                                          "v-list-item-icon",
                                          [
                                            _c("v-icon", [
                                              _vm._v(
                                                "mdi-content-save-move-outline"
                                              )
                                            ])
                                          ],
                                          1
                                        ),
                                        _vm._v(" "),
                                        _c(
                                          "v-list-item-content",
                                          [
                                            _c("v-list-item-title", [
                                              _vm._v(
                                                _vm._s(_vm.__("Close Shift"))
                                              )
                                            ])
                                          ],
                                          1
                                        )
                                      ],
                                      1
                                    )
                                  : _vm._e(),
                                _vm._v(" "),
                                _vm.pos_profile.posa_allow_print_last_invoice &&
                                this.last_invoice
                                  ? _c(
                                      "v-list-item",
                                      { on: { click: _vm.print_last_invoice } },
                                      [
                                        _c(
                                          "v-list-item-icon",
                                          [_c("v-icon", [_vm._v("mdi-printer")])],
                                          1
                                        ),
                                        _vm._v(" "),
                                        _c(
                                          "v-list-item-content",
                                          [
                                            _c("v-list-item-title", [
                                              _vm._v(
                                                _vm._s(
                                                  _vm.__("Print Last Invoice")
                                                )
                                              )
                                            ])
                                          ],
                                          1
                                        )
                                      ],
                                      1
                                    )
                                  : _vm._e(),
                                _vm._v(" "),
                                _c("v-divider", { staticClass: "my-0" }),
                                _vm._v(" "),
                                _c(
                                  "v-list-item",
                                  { on: { click: _vm.logOut } },
                                  [
                                    _c(
                                      "v-list-item-icon",
                                      [_c("v-icon", [_vm._v("mdi-logout")])],
                                      1
                                    ),
                                    _vm._v(" "),
                                    _c(
                                      "v-list-item-content",
                                      [
                                        _c("v-list-item-title", [
                                          _vm._v(_vm._s(_vm.__("Logout")))
                                        ])
                                      ],
                                      1
                                    )
                                  ],
                                  1
                                ),
                                _vm._v(" "),
                                _c(
                                  "v-list-item",
                                  { on: { click: _vm.go_about } },
                                  [
                                    _c(
                                      "v-list-item-icon",
                                      [
                                        _c("v-icon", [
                                          _vm._v("mdi-information-outline")
                                        ])
                                      ],
                                      1
                                    ),
                                    _vm._v(" "),
                                    _c(
                                      "v-list-item-content",
                                      [
                                        _c("v-list-item-title", [
                                          _vm._v(_vm._s(_vm.__("About")))
                                        ])
                                      ],
                                      1
                                    )
                                  ],
                                  1
                                )
                              ],
                              1
                            )
                          ],
                          1
                        )
                      ],
                      1
                    )
                  ],
                  1
                )
              ],
              1
            )
          ],
          1
        ),
        _vm._v(" "),
        _c(
          "v-navigation-drawer",
          {
            staticClass: "indigo margen-top",
            attrs: { "mini-variant": _vm.mini, app: "" },
            on: {
              "update:miniVariant": function($event) {
                _vm.mini = $event;
              },
              "update:mini-variant": function($event) {
                _vm.mini = $event;
              }
            },
            model: {
              value: _vm.drawer,
              callback: function($$v) {
                _vm.drawer = $$v;
              },
              expression: "drawer"
            }
          },
          [
            _c(
              "v-list",
              { attrs: { dark: "" } },
              [
                _c(
                  "v-list-item",
                  { staticClass: "px-2" },
                  [
                    _c(
                      "v-list-item-avatar",
                      [_c("v-img", { attrs: { src: _vm.company_img } })],
                      1
                    ),
                    _vm._v(" "),
                    _c("v-list-item-title", [_vm._v(_vm._s(_vm.company))]),
                    _vm._v(" "),
                    _c(
                      "v-btn",
                      {
                        attrs: { icon: "" },
                        on: {
                          click: function($event) {
                            $event.stopPropagation();
                            _vm.mini = !_vm.mini;
                          }
                        }
                      },
                      [_c("v-icon", [_vm._v("mdi-chevron-left")])],
                      1
                    )
                  ],
                  1
                ),
                _vm._v(" "),
                _c(
                  "v-list-item-group",
                  {
                    attrs: { color: "white" },
                    model: {
                      value: _vm.item,
                      callback: function($$v) {
                        _vm.item = $$v;
                      },
                      expression: "item"
                    }
                  },
                  _vm._l(_vm.items, function(item) {
                    return _c(
                      "v-list-item",
                      {
                        key: item.text,
                        on: {
                          click: function($event) {
                            return _vm.changePage(item.text)
                          }
                        }
                      },
                      [
                        _c(
                          "v-list-item-icon",
                          [
                            _c("v-icon", {
                              domProps: { textContent: _vm._s(item.icon) }
                            })
                          ],
                          1
                        ),
                        _vm._v(" "),
                        _c(
                          "v-list-item-content",
                          [
                            _c("v-list-item-title", {
                              domProps: { textContent: _vm._s(item.text) }
                            })
                          ],
                          1
                        )
                      ],
                      1
                    )
                  }),
                  1
                )
              ],
              1
            )
          ],
          1
        ),
        _vm._v(" "),
        _c(
          "v-snackbar",
          {
            attrs: { timeout: 5000, color: _vm.snackColor, top: "", right: "" },
            model: {
              value: _vm.snack,
              callback: function($$v) {
                _vm.snack = $$v;
              },
              expression: "snack"
            }
          },
          [_vm._v("\n    " + _vm._s(_vm.snackText) + "\n  ")]
        ),
        _vm._v(" "),
        _c(
          "v-dialog",
          {
            attrs: { persistent: "", "max-width": "290" },
            model: {
              value: _vm.freeze,
              callback: function($$v) {
                _vm.freeze = $$v;
              },
              expression: "freeze"
            }
          },
          [
            _c(
              "v-card",
              [
                _c("v-card-title", { staticClass: "text-h5" }, [
                  _vm._v("\n        " + _vm._s(_vm.freezeTitle) + "\n      ")
                ]),
                _vm._v(" "),
                _c("v-card-text", [_vm._v(_vm._s(_vm.freezeMsg))])
              ],
              1
            )
          ],
          1
        )
      ],
      1
    )
  };
  var __vue_staticRenderFns__ = [];
  __vue_render__._withStripped = true;

    /* style */
    var __vue_inject_styles__ = function (inject) {
      if (!inject) { return }
      inject("data-v-7aef2db8_0", { source: "\n.margen-top[data-v-7aef2db8] {\n  margin-top: 0px;\n}\n", map: {"version":3,"sources":["/home/skss/frappe-bench/apps/posawesome/posawesome/public/js/posapp/components/Navbar.vue"],"names":[],"mappings":";AA6PA;EACA,eAAA;AACA","file":"Navbar.vue","sourcesContent":["<template>\n  <nav>\n    <v-app-bar app height=\"40\" class=\"elevation-2\">\n      <v-app-bar-nav-icon\n        @click.stop=\"drawer = !drawer\"\n        class=\"grey--text\"\n      ></v-app-bar-nav-icon>\n      <v-toolbar-title\n        @click=\"go_desk\"\n        style=\"cursor: pointer\"\n        class=\"text-uppercase indigo--text\"\n      >\n        <span class=\"font-weight-light\">pos</span>\n        <span>awesome</span>\n      </v-toolbar-title>\n\n      <v-spacer></v-spacer>\n      <v-btn style=\"cursor: unset\" text color=\"grey\">\n        <span right>{{ pos_profile.name }}</span>\n      </v-btn>\n      <div class=\"text-center\">\n        <v-menu offset-y>\n          <template v-slot:activator=\"{ on, attrs }\">\n            <v-btn color=\"grey\" dark text v-bind=\"attrs\" v-on=\"on\">Menu</v-btn>\n          </template>\n          <v-card class=\"mx-auto\" max-width=\"300\" tile>\n            <v-list dense>\n              <v-list-item-group v-model=\"menu_item\" color=\"primary\">\n                <v-list-item\n                  @click=\"close_shift_dialog\"\n                  v-if=\"!pos_profile.posa_hide_closing_shift\"\n                >\n                  <v-list-item-icon>\n                    <v-icon>mdi-content-save-move-outline</v-icon>\n                  </v-list-item-icon>\n                  <v-list-item-content>\n                    <v-list-item-title>{{\n                      __('Close Shift')\n                    }}</v-list-item-title>\n                  </v-list-item-content>\n                </v-list-item>\n                <v-list-item\n                  @click=\"print_last_invoice\"\n                  v-if=\"\n                    pos_profile.posa_allow_print_last_invoice &&\n                    this.last_invoice\n                  \"\n                >\n                  <v-list-item-icon>\n                    <v-icon>mdi-printer</v-icon>\n                  </v-list-item-icon>\n                  <v-list-item-content>\n                    <v-list-item-title>{{\n                      __('Print Last Invoice')\n                    }}</v-list-item-title>\n                  </v-list-item-content>\n                </v-list-item>\n                <v-divider class=\"my-0\"></v-divider>\n                <v-list-item @click=\"logOut\">\n                  <v-list-item-icon>\n                    <v-icon>mdi-logout</v-icon>\n                  </v-list-item-icon>\n                  <v-list-item-content>\n                    <v-list-item-title>{{ __('Logout') }}</v-list-item-title>\n                  </v-list-item-content>\n                </v-list-item>\n                <v-list-item @click=\"go_about\">\n                  <v-list-item-icon>\n                    <v-icon>mdi-information-outline</v-icon>\n                  </v-list-item-icon>\n                  <v-list-item-content>\n                    <v-list-item-title>{{ __('About') }}</v-list-item-title>\n                  </v-list-item-content>\n                </v-list-item>\n              </v-list-item-group>\n            </v-list>\n          </v-card>\n        </v-menu>\n      </div>\n    </v-app-bar>\n    <v-navigation-drawer\n      v-model=\"drawer\"\n      :mini-variant.sync=\"mini\"\n      app\n      class=\"indigo margen-top\"\n    >\n      <v-list dark>\n        <v-list-item class=\"px-2\">\n          <v-list-item-avatar>\n            <v-img :src=\"company_img\"></v-img>\n          </v-list-item-avatar>\n\n          <v-list-item-title>{{ company }}</v-list-item-title>\n\n          <v-btn icon @click.stop=\"mini = !mini\">\n            <v-icon>mdi-chevron-left</v-icon>\n          </v-btn>\n        </v-list-item>\n        <!-- <MyPopup/> -->\n        <v-list-item-group v-model=\"item\" color=\"white\">\n          <v-list-item\n            v-for=\"item in items\"\n            :key=\"item.text\"\n            @click=\"changePage(item.text)\"\n          >\n            <v-list-item-icon>\n              <v-icon v-text=\"item.icon\"></v-icon>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title v-text=\"item.text\"></v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n        </v-list-item-group>\n      </v-list>\n    </v-navigation-drawer>\n    <v-snackbar v-model=\"snack\" :timeout=\"5000\" :color=\"snackColor\" top right>\n      {{ snackText }}\n    </v-snackbar>\n    <v-dialog v-model=\"freeze\" persistent max-width=\"290\">\n      <v-card>\n        <v-card-title class=\"text-h5\">\n          {{ freezeTitle }}\n        </v-card-title>\n        <v-card-text>{{ freezeMsg }}</v-card-text>\n      </v-card>\n    </v-dialog>\n  </nav>\n</template>\n\n<script>\nimport { evntBus } from '../bus';\n\nexport default {\n  // components: {MyPopup},\n  data() {\n    return {\n      drawer: false,\n      mini: true,\n      item: 0,\n      items: [{ text: 'POS', icon: 'mdi-point-of-sale' }],\n      page: '',\n      fav: true,\n      menu: false,\n      message: false,\n      hints: true,\n      menu_item: 0,\n      snack: false,\n      snackColor: '',\n      snackText: '',\n      company: 'POS Awesome111',\n      company_img: '/assets/erpnext/images/erpnext-logo.svg',\n      pos_profile: '',\n      freeze: false,\n      freezeTitle: '',\n      freezeMsg: '',\n      last_invoice: '',\n    };\n  },\n  methods: {\n    changePage(key) {\n      this.$emit('changePage', key);\n    },\n    go_desk() {\n      frappe.set_route('/');\n      location.reload();\n    },\n    go_about() {\n      const win = window.open(\n        'https://thirvusoft.com/',\n        '_blank'\n      );\n      win.focus();\n    },\n    close_shift_dialog() {\n      evntBus.$emit('open_closing_dialog');\n    },\n    show_mesage(data) {\n      this.snack = true;\n      this.snackColor = data.color;\n      this.snackText = data.text;\n    },\n    logOut() {\n      var me = this;\n      me.logged_out = true;\n      return frappe.call({\n        method: 'logout',\n        callback: function (r) {\n          if (r.exc) {\n            return;\n          }\n          frappe.set_route('/login');\n          location.reload();\n        },\n      });\n    },\n    print_last_invoice() {\n      if (!this.last_invoice) return;\n      const print_format =\n        this.pos_profile.print_format_for_online ||\n        this.pos_profile.print_format;\n      const letter_head = this.pos_profile.letter_head || 0;\n      const url =\n        frappe.urllib.get_base_url() +\n        '/printview?doctype=Sales%20Invoice&name=' +\n        this.last_invoice +\n        '&trigger_print=1' +\n        '&format=' +\n        print_format +\n        '&no_letterhead=' +\n        letter_head;\n      const printWindow = window.open(url, 'Print');\n      printWindow.addEventListener(\n        'load',\n        function () {\n          printWindow.print();\n        },\n        true\n      );\n    },\n  },\n  created: function () {\n    this.$nextTick(function () {\n      evntBus.$on('show_mesage', (data) => {\n        this.show_mesage(data);\n      });\n      evntBus.$on('set_company', (data) => {\n        this.company = data.name;\n        this.company_img = data.company_logo\n          ? data.company_logo\n          : this.company_img;\n      });\n      evntBus.$on('register_pos_profile', (data) => {\n        this.pos_profile = data.pos_profile;\n      });\n      evntBus.$on('set_last_invoice', (data) => {\n        this.last_invoice = data;\n      });\n      evntBus.$on('freeze', (data) => {\n        this.freeze = true;\n        this.freezeTitle = data.title;\n        this.freezeMsg = data.msg;\n      });\n      evntBus.$on('unfreeze', () => {\n        this.freeze = false;\n        this.freezTitle = '';\n        this.freezeMsg = '';\n      });\n    });\n  },\n};\n</script>\n\n<style scoped>\n.margen-top {\n  margin-top: 0px;\n}\n</style>"]}, media: undefined });

    };
    /* scoped */
    var __vue_scope_id__ = "data-v-7aef2db8";
    /* module identifier */
    var __vue_module_identifier__ = undefined;
    /* functional template */
    var __vue_is_functional_template__ = false;
    /* component normalizer */
    function __vue_normalize__(
      template, style, script,
      scope, functional, moduleIdentifier,
      createInjector, createInjectorSSR
    ) {
      var component = (typeof script === 'function' ? script.options : script) || {};

      // For security concerns, we use only base name in production mode.
      component.__file = "/home/skss/frappe-bench/apps/posawesome/posawesome/public/js/posapp/components/Navbar.vue";

      if (!component.render) {
        component.render = template.render;
        component.staticRenderFns = template.staticRenderFns;
        component._compiled = true;

        if (functional) { component.functional = true; }
      }

      component._scopeId = scope;

      {
        var hook;
        if (style) {
          hook = function(context) {
            style.call(this, createInjector(context));
          };
        }

        if (hook !== undefined) {
          if (component.functional) {
            // register for functional component in vue file
            var originalRender = component.render;
            component.render = function renderWithStyleInjection(h, context) {
              hook.call(context);
              return originalRender(h, context)
            };
          } else {
            // inject component registration as beforeCreate hook
            var existing = component.beforeCreate;
            component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
          }
        }
      }

      return component
    }
    /* style inject */
    function __vue_create_injector__() {
      var head = document.head || document.getElementsByTagName('head')[0];
      var styles = __vue_create_injector__.styles || (__vue_create_injector__.styles = {});
      var isOldIE =
        typeof navigator !== 'undefined' &&
        /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

      return function addStyle(id, css) {
        if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

        var group = isOldIE ? css.media || 'default' : id;
        var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

        if (!style.ids.includes(id)) {
          var code = css.source;
          var index = style.ids.length;

          style.ids.push(id);

          if (isOldIE) {
            style.element = style.element || document.querySelector('style[data-group=' + group + ']');
          }

          if (!style.element) {
            var el = style.element = document.createElement('style');
            el.type = 'text/css';

            if (css.media) { el.setAttribute('media', css.media); }
            if (isOldIE) {
              el.setAttribute('data-group', group);
              el.setAttribute('data-next-index', '0');
            }

            head.appendChild(el);
          }

          if (isOldIE) {
            index = parseInt(style.element.getAttribute('data-next-index'));
            style.element.setAttribute('data-next-index', index + 1);
          }

          if (style.element.styleSheet) {
            style.parts.push(code);
            style.element.styleSheet.cssText = style.parts
              .filter(Boolean)
              .join('\n');
          } else {
            var textNode = document.createTextNode(code);
            var nodes = style.element.childNodes;
            if (nodes[index]) { style.element.removeChild(nodes[index]); }
            if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
            else { style.element.appendChild(textNode); }
          }
        }
      }
    }
    /* style inject SSR */
    

    
    var Navbar = __vue_normalize__(
      { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
      __vue_inject_styles__,
      __vue_script__,
      __vue_scope_id__,
      __vue_is_functional_template__,
      __vue_module_identifier__,
      __vue_create_injector__,
      undefined
    );

  var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var lodash = createCommonjsModule(function (module, exports) {
  (function() {

    /** Used as a safe reference for `undefined` in pre-ES5 environments. */
    var undefined$1;

    /** Used as the semantic version number. */
    var VERSION = '4.17.21';

    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE = 200;

    /** Error message constants. */
    var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
        FUNC_ERROR_TEXT = 'Expected a function',
        INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED = '__lodash_hash_undefined__';

    /** Used as the maximum memoize cache size. */
    var MAX_MEMOIZE_SIZE = 500;

    /** Used as the internal argument placeholder. */
    var PLACEHOLDER = '__lodash_placeholder__';

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG = 1,
        CLONE_FLAT_FLAG = 2,
        CLONE_SYMBOLS_FLAG = 4;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2;

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG = 1,
        WRAP_BIND_KEY_FLAG = 2,
        WRAP_CURRY_BOUND_FLAG = 4,
        WRAP_CURRY_FLAG = 8,
        WRAP_CURRY_RIGHT_FLAG = 16,
        WRAP_PARTIAL_FLAG = 32,
        WRAP_PARTIAL_RIGHT_FLAG = 64,
        WRAP_ARY_FLAG = 128,
        WRAP_REARG_FLAG = 256,
        WRAP_FLIP_FLAG = 512;

    /** Used as default options for `_.truncate`. */
    var DEFAULT_TRUNC_LENGTH = 30,
        DEFAULT_TRUNC_OMISSION = '...';

    /** Used to detect hot functions by number of calls within a span of milliseconds. */
    var HOT_COUNT = 800,
        HOT_SPAN = 16;

    /** Used to indicate the type of lazy iteratees. */
    var LAZY_FILTER_FLAG = 1,
        LAZY_MAP_FLAG = 2,
        LAZY_WHILE_FLAG = 3;

    /** Used as references for various `Number` constants. */
    var INFINITY = 1 / 0,
        MAX_SAFE_INTEGER = 9007199254740991,
        MAX_INTEGER = 1.7976931348623157e+308,
        NAN = 0 / 0;

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH = 4294967295,
        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

    /** Used to associate wrap methods with their bit flags. */
    var wrapFlags = [
      ['ary', WRAP_ARY_FLAG],
      ['bind', WRAP_BIND_FLAG],
      ['bindKey', WRAP_BIND_KEY_FLAG],
      ['curry', WRAP_CURRY_FLAG],
      ['curryRight', WRAP_CURRY_RIGHT_FLAG],
      ['flip', WRAP_FLIP_FLAG],
      ['partial', WRAP_PARTIAL_FLAG],
      ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
      ['rearg', WRAP_REARG_FLAG]
    ];

    /** `Object#toString` result references. */
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        asyncTag = '[object AsyncFunction]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        domExcTag = '[object DOMException]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        nullTag = '[object Null]',
        objectTag = '[object Object]',
        promiseTag = '[object Promise]',
        proxyTag = '[object Proxy]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        symbolTag = '[object Symbol]',
        undefinedTag = '[object Undefined]',
        weakMapTag = '[object WeakMap]',
        weakSetTag = '[object WeakSet]';

    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';

    /** Used to match empty string literals in compiled template source. */
    var reEmptyStringLeading = /\b__p \+= '';/g,
        reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
        reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

    /** Used to match HTML entities and HTML characters. */
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
        reUnescapedHtml = /[&<>"']/g,
        reHasEscapedHtml = RegExp(reEscapedHtml.source),
        reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

    /** Used to match template delimiters. */
    var reEscape = /<%-([\s\S]+?)%>/g,
        reEvaluate = /<%([\s\S]+?)%>/g,
        reInterpolate = /<%=([\s\S]+?)%>/g;

    /** Used to match property names within property paths. */
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/,
        rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

    /**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
     */
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
        reHasRegExpChar = RegExp(reRegExpChar.source);

    /** Used to match leading whitespace. */
    var reTrimStart = /^\s+/;

    /** Used to match a single whitespace character. */
    var reWhitespace = /\s/;

    /** Used to match wrap detail comments. */
    var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
        reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
        reSplitDetails = /,? & /;

    /** Used to match words composed of alphanumeric characters. */
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

    /**
     * Used to validate the `validate` option in `_.template` variable.
     *
     * Forbids characters which could potentially change the meaning of the function argument definition:
     * - "()," (modification of function parameters)
     * - "=" (default value)
     * - "[]{}" (destructuring of function parameters)
     * - "/" (beginning of a comment)
     * - whitespace
     */
    var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

    /** Used to match backslashes in property paths. */
    var reEscapeChar = /\\(\\)?/g;

    /**
     * Used to match
     * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
     */
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

    /** Used to match `RegExp` flags from their coerced string values. */
    var reFlags = /\w*$/;

    /** Used to detect bad signed hexadecimal string values. */
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

    /** Used to detect binary string values. */
    var reIsBinary = /^0b[01]+$/i;

    /** Used to detect host constructors (Safari). */
    var reIsHostCtor = /^\[object .+?Constructor\]$/;

    /** Used to detect octal string values. */
    var reIsOctal = /^0o[0-7]+$/i;

    /** Used to detect unsigned integer values. */
    var reIsUint = /^(?:0|[1-9]\d*)$/;

    /** Used to match Latin Unicode letters (excluding mathematical operators). */
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

    /** Used to ensure capturing order of template delimiters. */
    var reNoMatch = /($^)/;

    /** Used to match unescaped characters in compiled string literals. */
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

    /** Used to compose unicode character classes. */
    var rsAstralRange = '\\ud800-\\udfff',
        rsComboMarksRange = '\\u0300-\\u036f',
        reComboHalfMarksRange = '\\ufe20-\\ufe2f',
        rsComboSymbolsRange = '\\u20d0-\\u20ff',
        rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
        rsDingbatRange = '\\u2700-\\u27bf',
        rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
        rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
        rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
        rsPunctuationRange = '\\u2000-\\u206f',
        rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
        rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
        rsVarRange = '\\ufe0e\\ufe0f',
        rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

    /** Used to compose unicode capture groups. */
    var rsApos = "['\u2019]",
        rsAstral = '[' + rsAstralRange + ']',
        rsBreak = '[' + rsBreakRange + ']',
        rsCombo = '[' + rsComboRange + ']',
        rsDigits = '\\d+',
        rsDingbat = '[' + rsDingbatRange + ']',
        rsLower = '[' + rsLowerRange + ']',
        rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
        rsFitz = '\\ud83c[\\udffb-\\udfff]',
        rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
        rsNonAstral = '[^' + rsAstralRange + ']',
        rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
        rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
        rsUpper = '[' + rsUpperRange + ']',
        rsZWJ = '\\u200d';

    /** Used to compose unicode regexes. */
    var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
        rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
        rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
        rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
        reOptMod = rsModifier + '?',
        rsOptVar = '[' + rsVarRange + ']?',
        rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
        rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
        rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
        rsSeq = rsOptVar + reOptMod + rsOptJoin,
        rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
        rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

    /** Used to match apostrophes. */
    var reApos = RegExp(rsApos, 'g');

    /**
     * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
     * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
     */
    var reComboMark = RegExp(rsCombo, 'g');

    /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
    var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

    /** Used to match complex or compound words. */
    var reUnicodeWord = RegExp([
      rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
      rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
      rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
      rsUpper + '+' + rsOptContrUpper,
      rsOrdUpper,
      rsOrdLower,
      rsDigits,
      rsEmoji
    ].join('|'), 'g');

    /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
    var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

    /** Used to detect strings that need a more robust regexp to match words. */
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

    /** Used to assign default `context` object properties. */
    var contextProps = [
      'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
      'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
      'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
      'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
      '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
    ];

    /** Used to make template sourceURLs easier to identify. */
    var templateCounter = -1;

    /** Used to identify `toStringTag` values of typed arrays. */
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
    typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
    typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
    typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
    typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
    typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
    typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
    typedArrayTags[errorTag] = typedArrayTags[funcTag] =
    typedArrayTags[mapTag] = typedArrayTags[numberTag] =
    typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
    typedArrayTags[setTag] = typedArrayTags[stringTag] =
    typedArrayTags[weakMapTag] = false;

    /** Used to identify `toStringTag` values supported by `_.clone`. */
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] =
    cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
    cloneableTags[boolTag] = cloneableTags[dateTag] =
    cloneableTags[float32Tag] = cloneableTags[float64Tag] =
    cloneableTags[int8Tag] = cloneableTags[int16Tag] =
    cloneableTags[int32Tag] = cloneableTags[mapTag] =
    cloneableTags[numberTag] = cloneableTags[objectTag] =
    cloneableTags[regexpTag] = cloneableTags[setTag] =
    cloneableTags[stringTag] = cloneableTags[symbolTag] =
    cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
    cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] =
    cloneableTags[weakMapTag] = false;

    /** Used to map Latin Unicode letters to basic Latin letters. */
    var deburredLetters = {
      // Latin-1 Supplement block.
      '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
      '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
      '\xc7': 'C',  '\xe7': 'c',
      '\xd0': 'D',  '\xf0': 'd',
      '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
      '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
      '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
      '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
      '\xd1': 'N',  '\xf1': 'n',
      '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
      '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
      '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
      '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
      '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
      '\xc6': 'Ae', '\xe6': 'ae',
      '\xde': 'Th', '\xfe': 'th',
      '\xdf': 'ss',
      // Latin Extended-A block.
      '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
      '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
      '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
      '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
      '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
      '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
      '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
      '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
      '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
      '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
      '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
      '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
      '\u0134': 'J',  '\u0135': 'j',
      '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
      '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
      '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
      '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
      '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
      '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
      '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
      '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
      '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
      '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
      '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
      '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
      '\u0163': 't',  '\u0165': 't', '\u0167': 't',
      '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
      '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
      '\u0174': 'W',  '\u0175': 'w',
      '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
      '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
      '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
      '\u0132': 'IJ', '\u0133': 'ij',
      '\u0152': 'Oe', '\u0153': 'oe',
      '\u0149': "'n", '\u017f': 's'
    };

    /** Used to map characters to HTML entities. */
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };

    /** Used to map HTML entities to characters. */
    var htmlUnescapes = {
      '&amp;': '&',
      '&lt;': '<',
      '&gt;': '>',
      '&quot;': '"',
      '&#39;': "'"
    };

    /** Used to escape characters for inclusion in compiled string literals. */
    var stringEscapes = {
      '\\': '\\',
      "'": "'",
      '\n': 'n',
      '\r': 'r',
      '\u2028': 'u2028',
      '\u2029': 'u2029'
    };

    /** Built-in method references without a dependency on `root`. */
    var freeParseFloat = parseFloat,
        freeParseInt = parseInt;

    /** Detect free variable `global` from Node.js. */
    var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    /** Detect free variable `self`. */
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root = freeGlobal || freeSelf || Function('return this')();

    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Detect free variable `process` from Node.js. */
    var freeProcess = moduleExports && freeGlobal.process;

    /** Used to access faster Node.js helpers. */
    var nodeUtil = (function() {
      try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.require && freeModule.require('util').types;

        if (types) {
          return types;
        }

        // Legacy `process.binding('util')` for Node.js < 10.
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }());

    /* Node.js helper references. */
    var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
        nodeIsDate = nodeUtil && nodeUtil.isDate,
        nodeIsMap = nodeUtil && nodeUtil.isMap,
        nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
        nodeIsSet = nodeUtil && nodeUtil.isSet,
        nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

    /*--------------------------------------------------------------------------*/

    /**
     * A faster alternative to `Function#apply`, this function invokes `func`
     * with the `this` binding of `thisArg` and the arguments of `args`.
     *
     * @private
     * @param {Function} func The function to invoke.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} args The arguments to invoke `func` with.
     * @returns {*} Returns the result of `func`.
     */
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0: return func.call(thisArg);
        case 1: return func.call(thisArg, args[0]);
        case 2: return func.call(thisArg, args[0], args[1]);
        case 3: return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }

    /**
     * A specialized version of `baseAggregator` for arrays.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function arrayAggregator(array, setter, iteratee, accumulator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        var value = array[index];
        setter(accumulator, value, iteratee(value), array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.forEach` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEach(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.forEachRight` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEachRight(array, iteratee) {
      var length = array == null ? 0 : array.length;

      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.every` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     */
    function arrayEvery(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }
      return true;
    }

    /**
     * A specialized version of `_.filter` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function arrayFilter(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.includes` for arrays without support for
     * specifying an index to search from.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */
    function arrayIncludes(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }

    /**
     * This function is like `arrayIncludes` except that it accepts a comparator.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @param {Function} comparator The comparator invoked per element.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */
    function arrayIncludesWith(array, value, comparator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }
      return false;
    }

    /**
     * A specialized version of `_.map` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function arrayMap(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }

    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */
    function arrayPush(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.reduce` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initAccum] Specify using the first element of `array` as
     *  the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1,
          length = array == null ? 0 : array.length;

      if (initAccum && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.reduceRight` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initAccum] Specify using the last element of `array` as
     *  the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduceRight(array, iteratee, accumulator, initAccum) {
      var length = array == null ? 0 : array.length;
      if (initAccum && length) {
        accumulator = array[--length];
      }
      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.some` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function arraySome(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }

    /**
     * Gets the size of an ASCII `string`.
     *
     * @private
     * @param {string} string The string inspect.
     * @returns {number} Returns the string size.
     */
    var asciiSize = baseProperty('length');

    /**
     * Converts an ASCII `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function asciiToArray(string) {
      return string.split('');
    }

    /**
     * Splits an ASCII `string` into an array of its words.
     *
     * @private
     * @param {string} The string to inspect.
     * @returns {Array} Returns the words of `string`.
     */
    function asciiWords(string) {
      return string.match(reAsciiWord) || [];
    }

    /**
     * The base implementation of methods like `_.findKey` and `_.findLastKey`,
     * without support for iteratee shorthands, which iterates over `collection`
     * using `eachFunc`.
     *
     * @private
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the found element or its key, else `undefined`.
     */
    function baseFindKey(collection, predicate, eachFunc) {
      var result;
      eachFunc(collection, function(value, key, collection) {
        if (predicate(value, key, collection)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.findIndex` and `_.findLastIndex` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {number} fromIndex The index to search from.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length,
          index = fromIndex + (fromRight ? 1 : -1);

      while ((fromRight ? index-- : ++index < length)) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseIndexOf(array, value, fromIndex) {
      return value === value
        ? strictIndexOf(array, value, fromIndex)
        : baseFindIndex(array, baseIsNaN, fromIndex);
    }

    /**
     * This function is like `baseIndexOf` except that it accepts a comparator.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @param {Function} comparator The comparator invoked per element.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseIndexOfWith(array, value, fromIndex, comparator) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (comparator(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * The base implementation of `_.isNaN` without support for number objects.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     */
    function baseIsNaN(value) {
      return value !== value;
    }

    /**
     * The base implementation of `_.mean` and `_.meanBy` without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the mean.
     */
    function baseMean(array, iteratee) {
      var length = array == null ? 0 : array.length;
      return length ? (baseSum(array, iteratee) / length) : NAN;
    }

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined$1 : object[key];
      };
    }

    /**
     * The base implementation of `_.propertyOf` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyOf(object) {
      return function(key) {
        return object == null ? undefined$1 : object[key];
      };
    }

    /**
     * The base implementation of `_.reduce` and `_.reduceRight`, without support
     * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} accumulator The initial value.
     * @param {boolean} initAccum Specify using the first or last element of
     *  `collection` as the initial value.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the accumulated value.
     */
    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
      eachFunc(collection, function(value, index, collection) {
        accumulator = initAccum
          ? (initAccum = false, value)
          : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.sortBy` which uses `comparer` to define the
     * sort order of `array` and replaces criteria objects with their corresponding
     * values.
     *
     * @private
     * @param {Array} array The array to sort.
     * @param {Function} comparer The function to define sort order.
     * @returns {Array} Returns `array`.
     */
    function baseSortBy(array, comparer) {
      var length = array.length;

      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }

    /**
     * The base implementation of `_.sum` and `_.sumBy` without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
    function baseSum(array, iteratee) {
      var result,
          index = -1,
          length = array.length;

      while (++index < length) {
        var current = iteratee(array[index]);
        if (current !== undefined$1) {
          result = result === undefined$1 ? current : (result + current);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */
    function baseTimes(n, iteratee) {
      var index = -1,
          result = Array(n);

      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }

    /**
     * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
     * of key-value pairs for `object` corresponding to the property names of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the key-value pairs.
     */
    function baseToPairs(object, props) {
      return arrayMap(props, function(key) {
        return [key, object[key]];
      });
    }

    /**
     * The base implementation of `_.trim`.
     *
     * @private
     * @param {string} string The string to trim.
     * @returns {string} Returns the trimmed string.
     */
    function baseTrim(string) {
      return string
        ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
        : string;
    }

    /**
     * The base implementation of `_.unary` without support for storing metadata.
     *
     * @private
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     */
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }

    /**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */
    function baseValues(object, props) {
      return arrayMap(props, function(key) {
        return object[key];
      });
    }

    /**
     * Checks if a `cache` value for `key` exists.
     *
     * @private
     * @param {Object} cache The cache to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function cacheHas(cache, key) {
      return cache.has(key);
    }

    /**
     * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
     * that is not found in the character symbols.
     *
     * @private
     * @param {Array} strSymbols The string symbols to inspect.
     * @param {Array} chrSymbols The character symbols to find.
     * @returns {number} Returns the index of the first unmatched string symbol.
     */
    function charsStartIndex(strSymbols, chrSymbols) {
      var index = -1,
          length = strSymbols.length;

      while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
      return index;
    }

    /**
     * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
     * that is not found in the character symbols.
     *
     * @private
     * @param {Array} strSymbols The string symbols to inspect.
     * @param {Array} chrSymbols The character symbols to find.
     * @returns {number} Returns the index of the last unmatched string symbol.
     */
    function charsEndIndex(strSymbols, chrSymbols) {
      var index = strSymbols.length;

      while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
      return index;
    }

    /**
     * Gets the number of `placeholder` occurrences in `array`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} placeholder The placeholder to search for.
     * @returns {number} Returns the placeholder count.
     */
    function countHolders(array, placeholder) {
      var length = array.length,
          result = 0;

      while (length--) {
        if (array[length] === placeholder) {
          ++result;
        }
      }
      return result;
    }

    /**
     * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
     * letters to basic Latin letters.
     *
     * @private
     * @param {string} letter The matched letter to deburr.
     * @returns {string} Returns the deburred letter.
     */
    var deburrLetter = basePropertyOf(deburredLetters);

    /**
     * Used by `_.escape` to convert characters to HTML entities.
     *
     * @private
     * @param {string} chr The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    var escapeHtmlChar = basePropertyOf(htmlEscapes);

    /**
     * Used by `_.template` to escape characters for inclusion in compiled string literals.
     *
     * @private
     * @param {string} chr The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    function escapeStringChar(chr) {
      return '\\' + stringEscapes[chr];
    }

    /**
     * Gets the value at `key` of `object`.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function getValue(object, key) {
      return object == null ? undefined$1 : object[key];
    }

    /**
     * Checks if `string` contains Unicode symbols.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {boolean} Returns `true` if a symbol is found, else `false`.
     */
    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }

    /**
     * Checks if `string` contains a word composed of Unicode symbols.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {boolean} Returns `true` if a word is found, else `false`.
     */
    function hasUnicodeWord(string) {
      return reHasUnicodeWord.test(string);
    }

    /**
     * Converts `iterator` to an array.
     *
     * @private
     * @param {Object} iterator The iterator to convert.
     * @returns {Array} Returns the converted array.
     */
    function iteratorToArray(iterator) {
      var data,
          result = [];

      while (!(data = iterator.next()).done) {
        result.push(data.value);
      }
      return result;
    }

    /**
     * Converts `map` to its key-value pairs.
     *
     * @private
     * @param {Object} map The map to convert.
     * @returns {Array} Returns the key-value pairs.
     */
    function mapToArray(map) {
      var index = -1,
          result = Array(map.size);

      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }

    /**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }

    /**
     * Replaces all `placeholder` elements in `array` with an internal placeholder
     * and returns an array of their indexes.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {*} placeholder The placeholder to replace.
     * @returns {Array} Returns the new array of placeholder indexes.
     */
    function replaceHolders(array, placeholder) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value === placeholder || value === PLACEHOLDER) {
          array[index] = PLACEHOLDER;
          result[resIndex++] = index;
        }
      }
      return result;
    }

    /**
     * Converts `set` to an array of its values.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the values.
     */
    function setToArray(set) {
      var index = -1,
          result = Array(set.size);

      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }

    /**
     * Converts `set` to its value-value pairs.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the value-value pairs.
     */
    function setToPairs(set) {
      var index = -1,
          result = Array(set.size);

      set.forEach(function(value) {
        result[++index] = [value, value];
      });
      return result;
    }

    /**
     * A specialized version of `_.indexOf` which performs strict equality
     * comparisons of values, i.e. `===`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function strictIndexOf(array, value, fromIndex) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * A specialized version of `_.lastIndexOf` which performs strict equality
     * comparisons of values, i.e. `===`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function strictLastIndexOf(array, value, fromIndex) {
      var index = fromIndex + 1;
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return index;
    }

    /**
     * Gets the number of symbols in `string`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {number} Returns the string size.
     */
    function stringSize(string) {
      return hasUnicode(string)
        ? unicodeSize(string)
        : asciiSize(string);
    }

    /**
     * Converts `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function stringToArray(string) {
      return hasUnicode(string)
        ? unicodeToArray(string)
        : asciiToArray(string);
    }

    /**
     * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
     * character of `string`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {number} Returns the index of the last non-whitespace character.
     */
    function trimmedEndIndex(string) {
      var index = string.length;

      while (index-- && reWhitespace.test(string.charAt(index))) {}
      return index;
    }

    /**
     * Used by `_.unescape` to convert HTML entities to characters.
     *
     * @private
     * @param {string} chr The matched character to unescape.
     * @returns {string} Returns the unescaped character.
     */
    var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

    /**
     * Gets the size of a Unicode `string`.
     *
     * @private
     * @param {string} string The string inspect.
     * @returns {number} Returns the string size.
     */
    function unicodeSize(string) {
      var result = reUnicode.lastIndex = 0;
      while (reUnicode.test(string)) {
        ++result;
      }
      return result;
    }

    /**
     * Converts a Unicode `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function unicodeToArray(string) {
      return string.match(reUnicode) || [];
    }

    /**
     * Splits a Unicode `string` into an array of its words.
     *
     * @private
     * @param {string} The string to inspect.
     * @returns {Array} Returns the words of `string`.
     */
    function unicodeWords(string) {
      return string.match(reUnicodeWord) || [];
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Create a new pristine `lodash` function using the `context` object.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Util
     * @param {Object} [context=root] The context object.
     * @returns {Function} Returns a new `lodash` function.
     * @example
     *
     * _.mixin({ 'foo': _.constant('foo') });
     *
     * var lodash = _.runInContext();
     * lodash.mixin({ 'bar': lodash.constant('bar') });
     *
     * _.isFunction(_.foo);
     * // => true
     * _.isFunction(_.bar);
     * // => false
     *
     * lodash.isFunction(lodash.foo);
     * // => false
     * lodash.isFunction(lodash.bar);
     * // => true
     *
     * // Create a suped-up `defer` in Node.js.
     * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
     */
    var runInContext = (function runInContext(context) {
      context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

      /** Built-in constructor references. */
      var Array = context.Array,
          Date = context.Date,
          Error = context.Error,
          Function = context.Function,
          Math = context.Math,
          Object = context.Object,
          RegExp = context.RegExp,
          String = context.String,
          TypeError = context.TypeError;

      /** Used for built-in method references. */
      var arrayProto = Array.prototype,
          funcProto = Function.prototype,
          objectProto = Object.prototype;

      /** Used to detect overreaching core-js shims. */
      var coreJsData = context['__core-js_shared__'];

      /** Used to resolve the decompiled source of functions. */
      var funcToString = funcProto.toString;

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty;

      /** Used to generate unique IDs. */
      var idCounter = 0;

      /** Used to detect methods masquerading as native. */
      var maskSrcKey = (function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
        return uid ? ('Symbol(src)_1.' + uid) : '';
      }());

      /**
       * Used to resolve the
       * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
       * of values.
       */
      var nativeObjectToString = objectProto.toString;

      /** Used to infer the `Object` constructor. */
      var objectCtorString = funcToString.call(Object);

      /** Used to restore the original `_` reference in `_.noConflict`. */
      var oldDash = root._;

      /** Used to detect if a method is native. */
      var reIsNative = RegExp('^' +
        funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
        .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
      );

      /** Built-in value references. */
      var Buffer = moduleExports ? context.Buffer : undefined$1,
          Symbol = context.Symbol,
          Uint8Array = context.Uint8Array,
          allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined$1,
          getPrototype = overArg(Object.getPrototypeOf, Object),
          objectCreate = Object.create,
          propertyIsEnumerable = objectProto.propertyIsEnumerable,
          splice = arrayProto.splice,
          spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined$1,
          symIterator = Symbol ? Symbol.iterator : undefined$1,
          symToStringTag = Symbol ? Symbol.toStringTag : undefined$1;

      var defineProperty = (function() {
        try {
          var func = getNative(Object, 'defineProperty');
          func({}, '', {});
          return func;
        } catch (e) {}
      }());

      /** Mocked built-ins. */
      var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
          ctxNow = Date && Date.now !== root.Date.now && Date.now,
          ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

      /* Built-in method references for those with the same name as other `lodash` methods. */
      var nativeCeil = Math.ceil,
          nativeFloor = Math.floor,
          nativeGetSymbols = Object.getOwnPropertySymbols,
          nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined$1,
          nativeIsFinite = context.isFinite,
          nativeJoin = arrayProto.join,
          nativeKeys = overArg(Object.keys, Object),
          nativeMax = Math.max,
          nativeMin = Math.min,
          nativeNow = Date.now,
          nativeParseInt = context.parseInt,
          nativeRandom = Math.random,
          nativeReverse = arrayProto.reverse;

      /* Built-in method references that are verified to be native. */
      var DataView = getNative(context, 'DataView'),
          Map = getNative(context, 'Map'),
          Promise = getNative(context, 'Promise'),
          Set = getNative(context, 'Set'),
          WeakMap = getNative(context, 'WeakMap'),
          nativeCreate = getNative(Object, 'create');

      /** Used to store function metadata. */
      var metaMap = WeakMap && new WeakMap;

      /** Used to lookup unminified function names. */
      var realNames = {};

      /** Used to detect maps, sets, and weakmaps. */
      var dataViewCtorString = toSource(DataView),
          mapCtorString = toSource(Map),
          promiseCtorString = toSource(Promise),
          setCtorString = toSource(Set),
          weakMapCtorString = toSource(WeakMap);

      /** Used to convert symbols to primitives and strings. */
      var symbolProto = Symbol ? Symbol.prototype : undefined$1,
          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1,
          symbolToString = symbolProto ? symbolProto.toString : undefined$1;

      /*------------------------------------------------------------------------*/

      /**
       * Creates a `lodash` object which wraps `value` to enable implicit method
       * chain sequences. Methods that operate on and return arrays, collections,
       * and functions can be chained together. Methods that retrieve a single value
       * or may return a primitive value will automatically end the chain sequence
       * and return the unwrapped value. Otherwise, the value must be unwrapped
       * with `_#value`.
       *
       * Explicit chain sequences, which must be unwrapped with `_#value`, may be
       * enabled using `_.chain`.
       *
       * The execution of chained methods is lazy, that is, it's deferred until
       * `_#value` is implicitly or explicitly called.
       *
       * Lazy evaluation allows several methods to support shortcut fusion.
       * Shortcut fusion is an optimization to merge iteratee calls; this avoids
       * the creation of intermediate arrays and can greatly reduce the number of
       * iteratee executions. Sections of a chain sequence qualify for shortcut
       * fusion if the section is applied to an array and iteratees accept only
       * one argument. The heuristic for whether a section qualifies for shortcut
       * fusion is subject to change.
       *
       * Chaining is supported in custom builds as long as the `_#value` method is
       * directly or indirectly included in the build.
       *
       * In addition to lodash methods, wrappers have `Array` and `String` methods.
       *
       * The wrapper `Array` methods are:
       * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
       *
       * The wrapper `String` methods are:
       * `replace` and `split`
       *
       * The wrapper methods that support shortcut fusion are:
       * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
       * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
       * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
       *
       * The chainable wrapper methods are:
       * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
       * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
       * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
       * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
       * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
       * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
       * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
       * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
       * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
       * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
       * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
       * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
       * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
       * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
       * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
       * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
       * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
       * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
       * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
       * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
       * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
       * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
       * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
       * `zipObject`, `zipObjectDeep`, and `zipWith`
       *
       * The wrapper methods that are **not** chainable by default are:
       * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
       * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
       * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
       * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
       * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
       * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
       * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
       * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
       * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
       * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
       * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
       * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
       * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
       * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
       * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
       * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
       * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
       * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
       * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
       * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
       * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
       * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
       * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
       * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
       * `upperFirst`, `value`, and `words`
       *
       * @name _
       * @constructor
       * @category Seq
       * @param {*} value The value to wrap in a `lodash` instance.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var wrapped = _([1, 2, 3]);
       *
       * // Returns an unwrapped value.
       * wrapped.reduce(_.add);
       * // => 6
       *
       * // Returns a wrapped value.
       * var squares = wrapped.map(square);
       *
       * _.isArray(squares);
       * // => false
       *
       * _.isArray(squares.value());
       * // => true
       */
      function lodash(value) {
        if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
          if (value instanceof LodashWrapper) {
            return value;
          }
          if (hasOwnProperty.call(value, '__wrapped__')) {
            return wrapperClone(value);
          }
        }
        return new LodashWrapper(value);
      }

      /**
       * The base implementation of `_.create` without support for assigning
       * properties to the created object.
       *
       * @private
       * @param {Object} proto The object to inherit from.
       * @returns {Object} Returns the new object.
       */
      var baseCreate = (function() {
        function object() {}
        return function(proto) {
          if (!isObject(proto)) {
            return {};
          }
          if (objectCreate) {
            return objectCreate(proto);
          }
          object.prototype = proto;
          var result = new object;
          object.prototype = undefined$1;
          return result;
        };
      }());

      /**
       * The function whose prototype chain sequence wrappers inherit from.
       *
       * @private
       */
      function baseLodash() {
        // No operation performed.
      }

      /**
       * The base constructor for creating `lodash` wrapper objects.
       *
       * @private
       * @param {*} value The value to wrap.
       * @param {boolean} [chainAll] Enable explicit method chain sequences.
       */
      function LodashWrapper(value, chainAll) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__chain__ = !!chainAll;
        this.__index__ = 0;
        this.__values__ = undefined$1;
      }

      /**
       * By default, the template delimiters used by lodash are like those in
       * embedded Ruby (ERB) as well as ES2015 template strings. Change the
       * following template settings to use alternative delimiters.
       *
       * @static
       * @memberOf _
       * @type {Object}
       */
      lodash.templateSettings = {

        /**
         * Used to detect `data` property values to be HTML-escaped.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        'escape': reEscape,

        /**
         * Used to detect code to be evaluated.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        'evaluate': reEvaluate,

        /**
         * Used to detect `data` property values to inject.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        'interpolate': reInterpolate,

        /**
         * Used to reference the data object in the template text.
         *
         * @memberOf _.templateSettings
         * @type {string}
         */
        'variable': '',

        /**
         * Used to import variables into the compiled template.
         *
         * @memberOf _.templateSettings
         * @type {Object}
         */
        'imports': {

          /**
           * A reference to the `lodash` function.
           *
           * @memberOf _.templateSettings.imports
           * @type {Function}
           */
          '_': lodash
        }
      };

      // Ensure wrappers are instances of `baseLodash`.
      lodash.prototype = baseLodash.prototype;
      lodash.prototype.constructor = lodash;

      LodashWrapper.prototype = baseCreate(baseLodash.prototype);
      LodashWrapper.prototype.constructor = LodashWrapper;

      /*------------------------------------------------------------------------*/

      /**
       * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
       *
       * @private
       * @constructor
       * @param {*} value The value to wrap.
       */
      function LazyWrapper(value) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__dir__ = 1;
        this.__filtered__ = false;
        this.__iteratees__ = [];
        this.__takeCount__ = MAX_ARRAY_LENGTH;
        this.__views__ = [];
      }

      /**
       * Creates a clone of the lazy wrapper object.
       *
       * @private
       * @name clone
       * @memberOf LazyWrapper
       * @returns {Object} Returns the cloned `LazyWrapper` object.
       */
      function lazyClone() {
        var result = new LazyWrapper(this.__wrapped__);
        result.__actions__ = copyArray(this.__actions__);
        result.__dir__ = this.__dir__;
        result.__filtered__ = this.__filtered__;
        result.__iteratees__ = copyArray(this.__iteratees__);
        result.__takeCount__ = this.__takeCount__;
        result.__views__ = copyArray(this.__views__);
        return result;
      }

      /**
       * Reverses the direction of lazy iteration.
       *
       * @private
       * @name reverse
       * @memberOf LazyWrapper
       * @returns {Object} Returns the new reversed `LazyWrapper` object.
       */
      function lazyReverse() {
        if (this.__filtered__) {
          var result = new LazyWrapper(this);
          result.__dir__ = -1;
          result.__filtered__ = true;
        } else {
          result = this.clone();
          result.__dir__ *= -1;
        }
        return result;
      }

      /**
       * Extracts the unwrapped value from its lazy wrapper.
       *
       * @private
       * @name value
       * @memberOf LazyWrapper
       * @returns {*} Returns the unwrapped value.
       */
      function lazyValue() {
        var array = this.__wrapped__.value(),
            dir = this.__dir__,
            isArr = isArray(array),
            isRight = dir < 0,
            arrLength = isArr ? array.length : 0,
            view = getView(0, arrLength, this.__views__),
            start = view.start,
            end = view.end,
            length = end - start,
            index = isRight ? end : (start - 1),
            iteratees = this.__iteratees__,
            iterLength = iteratees.length,
            resIndex = 0,
            takeCount = nativeMin(length, this.__takeCount__);

        if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
          return baseWrapperValue(array, this.__actions__);
        }
        var result = [];

        outer:
        while (length-- && resIndex < takeCount) {
          index += dir;

          var iterIndex = -1,
              value = array[index];

          while (++iterIndex < iterLength) {
            var data = iteratees[iterIndex],
                iteratee = data.iteratee,
                type = data.type,
                computed = iteratee(value);

            if (type == LAZY_MAP_FLAG) {
              value = computed;
            } else if (!computed) {
              if (type == LAZY_FILTER_FLAG) {
                continue outer;
              } else {
                break outer;
              }
            }
          }
          result[resIndex++] = value;
        }
        return result;
      }

      // Ensure `LazyWrapper` is an instance of `baseLodash`.
      LazyWrapper.prototype = baseCreate(baseLodash.prototype);
      LazyWrapper.prototype.constructor = LazyWrapper;

      /*------------------------------------------------------------------------*/

      /**
       * Creates a hash object.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function Hash(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;

        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      /**
       * Removes all key-value entries from the hash.
       *
       * @private
       * @name clear
       * @memberOf Hash
       */
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }

      /**
       * Removes `key` and its value from the hash.
       *
       * @private
       * @name delete
       * @memberOf Hash
       * @param {Object} hash The hash to modify.
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }

      /**
       * Gets the hash value for `key`.
       *
       * @private
       * @name get
       * @memberOf Hash
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? undefined$1 : result;
        }
        return hasOwnProperty.call(data, key) ? data[key] : undefined$1;
      }

      /**
       * Checks if a hash value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf Hash
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? (data[key] !== undefined$1) : hasOwnProperty.call(data, key);
      }

      /**
       * Sets the hash `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf Hash
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the hash instance.
       */
      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = (nativeCreate && value === undefined$1) ? HASH_UNDEFINED : value;
        return this;
      }

      // Add methods to `Hash`.
      Hash.prototype.clear = hashClear;
      Hash.prototype['delete'] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;

      /*------------------------------------------------------------------------*/

      /**
       * Creates an list cache object.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function ListCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;

        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      /**
       * Removes all key-value entries from the list cache.
       *
       * @private
       * @name clear
       * @memberOf ListCache
       */
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }

      /**
       * Removes `key` and its value from the list cache.
       *
       * @private
       * @name delete
       * @memberOf ListCache
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function listCacheDelete(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }
        --this.size;
        return true;
      }

      /**
       * Gets the list cache value for `key`.
       *
       * @private
       * @name get
       * @memberOf ListCache
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function listCacheGet(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        return index < 0 ? undefined$1 : data[index][1];
      }

      /**
       * Checks if a list cache value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf ListCache
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }

      /**
       * Sets the list cache `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf ListCache
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the list cache instance.
       */
      function listCacheSet(key, value) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }
        return this;
      }

      // Add methods to `ListCache`.
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype['delete'] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;

      /*------------------------------------------------------------------------*/

      /**
       * Creates a map cache object to store key-value pairs.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function MapCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;

        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      /**
       * Removes all key-value entries from the map.
       *
       * @private
       * @name clear
       * @memberOf MapCache
       */
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          'hash': new Hash,
          'map': new (Map || ListCache),
          'string': new Hash
        };
      }

      /**
       * Removes `key` and its value from the map.
       *
       * @private
       * @name delete
       * @memberOf MapCache
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function mapCacheDelete(key) {
        var result = getMapData(this, key)['delete'](key);
        this.size -= result ? 1 : 0;
        return result;
      }

      /**
       * Gets the map value for `key`.
       *
       * @private
       * @name get
       * @memberOf MapCache
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }

      /**
       * Checks if a map value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf MapCache
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }

      /**
       * Sets the map `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf MapCache
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the map cache instance.
       */
      function mapCacheSet(key, value) {
        var data = getMapData(this, key),
            size = data.size;

        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }

      // Add methods to `MapCache`.
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype['delete'] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;

      /*------------------------------------------------------------------------*/

      /**
       *
       * Creates an array cache object to store unique values.
       *
       * @private
       * @constructor
       * @param {Array} [values] The values to cache.
       */
      function SetCache(values) {
        var index = -1,
            length = values == null ? 0 : values.length;

        this.__data__ = new MapCache;
        while (++index < length) {
          this.add(values[index]);
        }
      }

      /**
       * Adds `value` to the array cache.
       *
       * @private
       * @name add
       * @memberOf SetCache
       * @alias push
       * @param {*} value The value to cache.
       * @returns {Object} Returns the cache instance.
       */
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }

      /**
       * Checks if `value` is in the array cache.
       *
       * @private
       * @name has
       * @memberOf SetCache
       * @param {*} value The value to search for.
       * @returns {number} Returns `true` if `value` is found, else `false`.
       */
      function setCacheHas(value) {
        return this.__data__.has(value);
      }

      // Add methods to `SetCache`.
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;

      /*------------------------------------------------------------------------*/

      /**
       * Creates a stack cache object to store key-value pairs.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function Stack(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }

      /**
       * Removes all key-value entries from the stack.
       *
       * @private
       * @name clear
       * @memberOf Stack
       */
      function stackClear() {
        this.__data__ = new ListCache;
        this.size = 0;
      }

      /**
       * Removes `key` and its value from the stack.
       *
       * @private
       * @name delete
       * @memberOf Stack
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function stackDelete(key) {
        var data = this.__data__,
            result = data['delete'](key);

        this.size = data.size;
        return result;
      }

      /**
       * Gets the stack value for `key`.
       *
       * @private
       * @name get
       * @memberOf Stack
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function stackGet(key) {
        return this.__data__.get(key);
      }

      /**
       * Checks if a stack value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf Stack
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function stackHas(key) {
        return this.__data__.has(key);
      }

      /**
       * Sets the stack `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf Stack
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the stack cache instance.
       */
      function stackSet(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache) {
          var pairs = data.__data__;
          if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }

      // Add methods to `Stack`.
      Stack.prototype.clear = stackClear;
      Stack.prototype['delete'] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;

      /*------------------------------------------------------------------------*/

      /**
       * Creates an array of the enumerable property names of the array-like `value`.
       *
       * @private
       * @param {*} value The value to query.
       * @param {boolean} inherited Specify returning inherited property names.
       * @returns {Array} Returns the array of property names.
       */
      function arrayLikeKeys(value, inherited) {
        var isArr = isArray(value),
            isArg = !isArr && isArguments(value),
            isBuff = !isArr && !isArg && isBuffer(value),
            isType = !isArr && !isArg && !isBuff && isTypedArray(value),
            skipIndexes = isArr || isArg || isBuff || isType,
            result = skipIndexes ? baseTimes(value.length, String) : [],
            length = result.length;

        for (var key in value) {
          if ((inherited || hasOwnProperty.call(value, key)) &&
              !(skipIndexes && (
                 // Safari 9 has enumerable `arguments.length` in strict mode.
                 key == 'length' ||
                 // Node.js 0.10 has enumerable non-index properties on buffers.
                 (isBuff && (key == 'offset' || key == 'parent')) ||
                 // PhantomJS 2 has enumerable non-index properties on typed arrays.
                 (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                 // Skip index properties.
                 isIndex(key, length)
              ))) {
            result.push(key);
          }
        }
        return result;
      }

      /**
       * A specialized version of `_.sample` for arrays.
       *
       * @private
       * @param {Array} array The array to sample.
       * @returns {*} Returns the random element.
       */
      function arraySample(array) {
        var length = array.length;
        return length ? array[baseRandom(0, length - 1)] : undefined$1;
      }

      /**
       * A specialized version of `_.sampleSize` for arrays.
       *
       * @private
       * @param {Array} array The array to sample.
       * @param {number} n The number of elements to sample.
       * @returns {Array} Returns the random elements.
       */
      function arraySampleSize(array, n) {
        return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
      }

      /**
       * A specialized version of `_.shuffle` for arrays.
       *
       * @private
       * @param {Array} array The array to shuffle.
       * @returns {Array} Returns the new shuffled array.
       */
      function arrayShuffle(array) {
        return shuffleSelf(copyArray(array));
      }

      /**
       * This function is like `assignValue` except that it doesn't assign
       * `undefined` values.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */
      function assignMergeValue(object, key, value) {
        if ((value !== undefined$1 && !eq(object[key], value)) ||
            (value === undefined$1 && !(key in object))) {
          baseAssignValue(object, key, value);
        }
      }

      /**
       * Assigns `value` to `key` of `object` if the existing value is not equivalent
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */
      function assignValue(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
            (value === undefined$1 && !(key in object))) {
          baseAssignValue(object, key, value);
        }
      }

      /**
       * Gets the index at which the `key` is found in `array` of key-value pairs.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} key The key to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }

      /**
       * Aggregates elements of `collection` on `accumulator` with keys transformed
       * by `iteratee` and values set by `setter`.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} setter The function to set `accumulator` values.
       * @param {Function} iteratee The iteratee to transform keys.
       * @param {Object} accumulator The initial aggregated object.
       * @returns {Function} Returns `accumulator`.
       */
      function baseAggregator(collection, setter, iteratee, accumulator) {
        baseEach(collection, function(value, key, collection) {
          setter(accumulator, value, iteratee(value), collection);
        });
        return accumulator;
      }

      /**
       * The base implementation of `_.assign` without support for multiple sources
       * or `customizer` functions.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @returns {Object} Returns `object`.
       */
      function baseAssign(object, source) {
        return object && copyObject(source, keys(source), object);
      }

      /**
       * The base implementation of `_.assignIn` without support for multiple sources
       * or `customizer` functions.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @returns {Object} Returns `object`.
       */
      function baseAssignIn(object, source) {
        return object && copyObject(source, keysIn(source), object);
      }

      /**
       * The base implementation of `assignValue` and `assignMergeValue` without
       * value checks.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */
      function baseAssignValue(object, key, value) {
        if (key == '__proto__' && defineProperty) {
          defineProperty(object, key, {
            'configurable': true,
            'enumerable': true,
            'value': value,
            'writable': true
          });
        } else {
          object[key] = value;
        }
      }

      /**
       * The base implementation of `_.at` without support for individual paths.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {string[]} paths The property paths to pick.
       * @returns {Array} Returns the picked elements.
       */
      function baseAt(object, paths) {
        var index = -1,
            length = paths.length,
            result = Array(length),
            skip = object == null;

        while (++index < length) {
          result[index] = skip ? undefined$1 : get(object, paths[index]);
        }
        return result;
      }

      /**
       * The base implementation of `_.clamp` which doesn't coerce arguments.
       *
       * @private
       * @param {number} number The number to clamp.
       * @param {number} [lower] The lower bound.
       * @param {number} upper The upper bound.
       * @returns {number} Returns the clamped number.
       */
      function baseClamp(number, lower, upper) {
        if (number === number) {
          if (upper !== undefined$1) {
            number = number <= upper ? number : upper;
          }
          if (lower !== undefined$1) {
            number = number >= lower ? number : lower;
          }
        }
        return number;
      }

      /**
       * The base implementation of `_.clone` and `_.cloneDeep` which tracks
       * traversed objects.
       *
       * @private
       * @param {*} value The value to clone.
       * @param {boolean} bitmask The bitmask flags.
       *  1 - Deep clone
       *  2 - Flatten inherited properties
       *  4 - Clone symbols
       * @param {Function} [customizer] The function to customize cloning.
       * @param {string} [key] The key of `value`.
       * @param {Object} [object] The parent object of `value`.
       * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
       * @returns {*} Returns the cloned value.
       */
      function baseClone(value, bitmask, customizer, key, object, stack) {
        var result,
            isDeep = bitmask & CLONE_DEEP_FLAG,
            isFlat = bitmask & CLONE_FLAT_FLAG,
            isFull = bitmask & CLONE_SYMBOLS_FLAG;

        if (customizer) {
          result = object ? customizer(value, key, object, stack) : customizer(value);
        }
        if (result !== undefined$1) {
          return result;
        }
        if (!isObject(value)) {
          return value;
        }
        var isArr = isArray(value);
        if (isArr) {
          result = initCloneArray(value);
          if (!isDeep) {
            return copyArray(value, result);
          }
        } else {
          var tag = getTag(value),
              isFunc = tag == funcTag || tag == genTag;

          if (isBuffer(value)) {
            return cloneBuffer(value, isDeep);
          }
          if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
            result = (isFlat || isFunc) ? {} : initCloneObject(value);
            if (!isDeep) {
              return isFlat
                ? copySymbolsIn(value, baseAssignIn(result, value))
                : copySymbols(value, baseAssign(result, value));
            }
          } else {
            if (!cloneableTags[tag]) {
              return object ? value : {};
            }
            result = initCloneByTag(value, tag, isDeep);
          }
        }
        // Check for circular references and return its corresponding clone.
        stack || (stack = new Stack);
        var stacked = stack.get(value);
        if (stacked) {
          return stacked;
        }
        stack.set(value, result);

        if (isSet(value)) {
          value.forEach(function(subValue) {
            result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
          });
        } else if (isMap(value)) {
          value.forEach(function(subValue, key) {
            result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
          });
        }

        var keysFunc = isFull
          ? (isFlat ? getAllKeysIn : getAllKeys)
          : (isFlat ? keysIn : keys);

        var props = isArr ? undefined$1 : keysFunc(value);
        arrayEach(props || value, function(subValue, key) {
          if (props) {
            key = subValue;
            subValue = value[key];
          }
          // Recursively populate clone (susceptible to call stack limits).
          assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
        return result;
      }

      /**
       * The base implementation of `_.conforms` which doesn't clone `source`.
       *
       * @private
       * @param {Object} source The object of property predicates to conform to.
       * @returns {Function} Returns the new spec function.
       */
      function baseConforms(source) {
        var props = keys(source);
        return function(object) {
          return baseConformsTo(object, source, props);
        };
      }

      /**
       * The base implementation of `_.conformsTo` which accepts `props` to check.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property predicates to conform to.
       * @returns {boolean} Returns `true` if `object` conforms, else `false`.
       */
      function baseConformsTo(object, source, props) {
        var length = props.length;
        if (object == null) {
          return !length;
        }
        object = Object(object);
        while (length--) {
          var key = props[length],
              predicate = source[key],
              value = object[key];

          if ((value === undefined$1 && !(key in object)) || !predicate(value)) {
            return false;
          }
        }
        return true;
      }

      /**
       * The base implementation of `_.delay` and `_.defer` which accepts `args`
       * to provide to `func`.
       *
       * @private
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @param {Array} args The arguments to provide to `func`.
       * @returns {number|Object} Returns the timer id or timeout object.
       */
      function baseDelay(func, wait, args) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return setTimeout(function() { func.apply(undefined$1, args); }, wait);
      }

      /**
       * The base implementation of methods like `_.difference` without support
       * for excluding multiple arrays or iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Array} values The values to exclude.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       */
      function baseDifference(array, values, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            isCommon = true,
            length = array.length,
            result = [],
            valuesLength = values.length;

        if (!length) {
          return result;
        }
        if (iteratee) {
          values = arrayMap(values, baseUnary(iteratee));
        }
        if (comparator) {
          includes = arrayIncludesWith;
          isCommon = false;
        }
        else if (values.length >= LARGE_ARRAY_SIZE) {
          includes = cacheHas;
          isCommon = false;
          values = new SetCache(values);
        }
        outer:
        while (++index < length) {
          var value = array[index],
              computed = iteratee == null ? value : iteratee(value);

          value = (comparator || value !== 0) ? value : 0;
          if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;
            while (valuesIndex--) {
              if (values[valuesIndex] === computed) {
                continue outer;
              }
            }
            result.push(value);
          }
          else if (!includes(values, computed, comparator)) {
            result.push(value);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.forEach` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       */
      var baseEach = createBaseEach(baseForOwn);

      /**
       * The base implementation of `_.forEachRight` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       */
      var baseEachRight = createBaseEach(baseForOwnRight, true);

      /**
       * The base implementation of `_.every` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if all elements pass the predicate check,
       *  else `false`
       */
      function baseEvery(collection, predicate) {
        var result = true;
        baseEach(collection, function(value, index, collection) {
          result = !!predicate(value, index, collection);
          return result;
        });
        return result;
      }

      /**
       * The base implementation of methods like `_.max` and `_.min` which accepts a
       * `comparator` to determine the extremum value.
       *
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} iteratee The iteratee invoked per iteration.
       * @param {Function} comparator The comparator used to compare values.
       * @returns {*} Returns the extremum value.
       */
      function baseExtremum(array, iteratee, comparator) {
        var index = -1,
            length = array.length;

        while (++index < length) {
          var value = array[index],
              current = iteratee(value);

          if (current != null && (computed === undefined$1
                ? (current === current && !isSymbol(current))
                : comparator(current, computed)
              )) {
            var computed = current,
                result = value;
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.fill` without an iteratee call guard.
       *
       * @private
       * @param {Array} array The array to fill.
       * @param {*} value The value to fill `array` with.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns `array`.
       */
      function baseFill(array, value, start, end) {
        var length = array.length;

        start = toInteger(start);
        if (start < 0) {
          start = -start > length ? 0 : (length + start);
        }
        end = (end === undefined$1 || end > length) ? length : toInteger(end);
        if (end < 0) {
          end += length;
        }
        end = start > end ? 0 : toLength(end);
        while (start < end) {
          array[start++] = value;
        }
        return array;
      }

      /**
       * The base implementation of `_.filter` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       */
      function baseFilter(collection, predicate) {
        var result = [];
        baseEach(collection, function(value, index, collection) {
          if (predicate(value, index, collection)) {
            result.push(value);
          }
        });
        return result;
      }

      /**
       * The base implementation of `_.flatten` with support for restricting flattening.
       *
       * @private
       * @param {Array} array The array to flatten.
       * @param {number} depth The maximum recursion depth.
       * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
       * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
       * @param {Array} [result=[]] The initial result value.
       * @returns {Array} Returns the new flattened array.
       */
      function baseFlatten(array, depth, predicate, isStrict, result) {
        var index = -1,
            length = array.length;

        predicate || (predicate = isFlattenable);
        result || (result = []);

        while (++index < length) {
          var value = array[index];
          if (depth > 0 && predicate(value)) {
            if (depth > 1) {
              // Recursively flatten arrays (susceptible to call stack limits).
              baseFlatten(value, depth - 1, predicate, isStrict, result);
            } else {
              arrayPush(result, value);
            }
          } else if (!isStrict) {
            result[result.length] = value;
          }
        }
        return result;
      }

      /**
       * The base implementation of `baseForOwn` which iterates over `object`
       * properties returned by `keysFunc` and invokes `iteratee` for each property.
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @returns {Object} Returns `object`.
       */
      var baseFor = createBaseFor();

      /**
       * This function is like `baseFor` except that it iterates over properties
       * in the opposite order.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @returns {Object} Returns `object`.
       */
      var baseForRight = createBaseFor(true);

      /**
       * The base implementation of `_.forOwn` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Object} Returns `object`.
       */
      function baseForOwn(object, iteratee) {
        return object && baseFor(object, iteratee, keys);
      }

      /**
       * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Object} Returns `object`.
       */
      function baseForOwnRight(object, iteratee) {
        return object && baseForRight(object, iteratee, keys);
      }

      /**
       * The base implementation of `_.functions` which creates an array of
       * `object` function property names filtered from `props`.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Array} props The property names to filter.
       * @returns {Array} Returns the function names.
       */
      function baseFunctions(object, props) {
        return arrayFilter(props, function(key) {
          return isFunction(object[key]);
        });
      }

      /**
       * The base implementation of `_.get` without support for default values.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to get.
       * @returns {*} Returns the resolved value.
       */
      function baseGet(object, path) {
        path = castPath(path, object);

        var index = 0,
            length = path.length;

        while (object != null && index < length) {
          object = object[toKey(path[index++])];
        }
        return (index && index == length) ? object : undefined$1;
      }

      /**
       * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
       * `keysFunc` and `symbolsFunc` to get the enumerable property names and
       * symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @param {Function} symbolsFunc The function to get the symbols of `object`.
       * @returns {Array} Returns the array of property names and symbols.
       */
      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
      }

      /**
       * The base implementation of `getTag` without fallbacks for buggy environments.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the `toStringTag`.
       */
      function baseGetTag(value) {
        if (value == null) {
          return value === undefined$1 ? undefinedTag : nullTag;
        }
        return (symToStringTag && symToStringTag in Object(value))
          ? getRawTag(value)
          : objectToString(value);
      }

      /**
       * The base implementation of `_.gt` which doesn't coerce arguments.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than `other`,
       *  else `false`.
       */
      function baseGt(value, other) {
        return value > other;
      }

      /**
       * The base implementation of `_.has` without support for deep paths.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {Array|string} key The key to check.
       * @returns {boolean} Returns `true` if `key` exists, else `false`.
       */
      function baseHas(object, key) {
        return object != null && hasOwnProperty.call(object, key);
      }

      /**
       * The base implementation of `_.hasIn` without support for deep paths.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {Array|string} key The key to check.
       * @returns {boolean} Returns `true` if `key` exists, else `false`.
       */
      function baseHasIn(object, key) {
        return object != null && key in Object(object);
      }

      /**
       * The base implementation of `_.inRange` which doesn't coerce arguments.
       *
       * @private
       * @param {number} number The number to check.
       * @param {number} start The start of the range.
       * @param {number} end The end of the range.
       * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
       */
      function baseInRange(number, start, end) {
        return number >= nativeMin(start, end) && number < nativeMax(start, end);
      }

      /**
       * The base implementation of methods like `_.intersection`, without support
       * for iteratee shorthands, that accepts an array of arrays to inspect.
       *
       * @private
       * @param {Array} arrays The arrays to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of shared values.
       */
      function baseIntersection(arrays, iteratee, comparator) {
        var includes = comparator ? arrayIncludesWith : arrayIncludes,
            length = arrays[0].length,
            othLength = arrays.length,
            othIndex = othLength,
            caches = Array(othLength),
            maxLength = Infinity,
            result = [];

        while (othIndex--) {
          var array = arrays[othIndex];
          if (othIndex && iteratee) {
            array = arrayMap(array, baseUnary(iteratee));
          }
          maxLength = nativeMin(array.length, maxLength);
          caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
            ? new SetCache(othIndex && array)
            : undefined$1;
        }
        array = arrays[0];

        var index = -1,
            seen = caches[0];

        outer:
        while (++index < length && result.length < maxLength) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;

          value = (comparator || value !== 0) ? value : 0;
          if (!(seen
                ? cacheHas(seen, computed)
                : includes(result, computed, comparator)
              )) {
            othIndex = othLength;
            while (--othIndex) {
              var cache = caches[othIndex];
              if (!(cache
                    ? cacheHas(cache, computed)
                    : includes(arrays[othIndex], computed, comparator))
                  ) {
                continue outer;
              }
            }
            if (seen) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.invert` and `_.invertBy` which inverts
       * `object` with values transformed by `iteratee` and set by `setter`.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} setter The function to set `accumulator` values.
       * @param {Function} iteratee The iteratee to transform values.
       * @param {Object} accumulator The initial inverted object.
       * @returns {Function} Returns `accumulator`.
       */
      function baseInverter(object, setter, iteratee, accumulator) {
        baseForOwn(object, function(value, key, object) {
          setter(accumulator, iteratee(value), key, object);
        });
        return accumulator;
      }

      /**
       * The base implementation of `_.invoke` without support for individual
       * method arguments.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the method to invoke.
       * @param {Array} args The arguments to invoke the method with.
       * @returns {*} Returns the result of the invoked method.
       */
      function baseInvoke(object, path, args) {
        path = castPath(path, object);
        object = parent(object, path);
        var func = object == null ? object : object[toKey(last(path))];
        return func == null ? undefined$1 : apply(func, object, args);
      }

      /**
       * The base implementation of `_.isArguments`.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
       */
      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }

      /**
       * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
       */
      function baseIsArrayBuffer(value) {
        return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
      }

      /**
       * The base implementation of `_.isDate` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
       */
      function baseIsDate(value) {
        return isObjectLike(value) && baseGetTag(value) == dateTag;
      }

      /**
       * The base implementation of `_.isEqual` which supports partial comparisons
       * and tracks traversed objects.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @param {boolean} bitmask The bitmask flags.
       *  1 - Unordered comparison
       *  2 - Partial comparison
       * @param {Function} [customizer] The function to customize comparisons.
       * @param {Object} [stack] Tracks traversed `value` and `other` objects.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       */
      function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
      }

      /**
       * A specialized version of `baseIsEqual` for arrays and objects which performs
       * deep comparisons and tracks traversed objects enabling objects with circular
       * references to be compared.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} [stack] Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */
      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray(object),
            othIsArr = isArray(other),
            objTag = objIsArr ? arrayTag : getTag(object),
            othTag = othIsArr ? arrayTag : getTag(other);

        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;

        var objIsObj = objTag == objectTag,
            othIsObj = othTag == objectTag,
            isSameTag = objTag == othTag;

        if (isSameTag && isBuffer(object)) {
          if (!isBuffer(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack);
          return (objIsArr || isTypedArray(object))
            ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
            : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
              othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object,
                othUnwrapped = othIsWrapped ? other.value() : other;

            stack || (stack = new Stack);
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack);
        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
      }

      /**
       * The base implementation of `_.isMap` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a map, else `false`.
       */
      function baseIsMap(value) {
        return isObjectLike(value) && getTag(value) == mapTag;
      }

      /**
       * The base implementation of `_.isMatch` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @param {Array} matchData The property names, values, and compare flags to match.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       */
      function baseIsMatch(object, source, matchData, customizer) {
        var index = matchData.length,
            length = index,
            noCustomizer = !customizer;

        if (object == null) {
          return !length;
        }
        object = Object(object);
        while (index--) {
          var data = matchData[index];
          if ((noCustomizer && data[2])
                ? data[1] !== object[data[0]]
                : !(data[0] in object)
              ) {
            return false;
          }
        }
        while (++index < length) {
          data = matchData[index];
          var key = data[0],
              objValue = object[key],
              srcValue = data[1];

          if (noCustomizer && data[2]) {
            if (objValue === undefined$1 && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack;
            if (customizer) {
              var result = customizer(objValue, srcValue, key, object, source, stack);
            }
            if (!(result === undefined$1
                  ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                  : result
                )) {
              return false;
            }
          }
        }
        return true;
      }

      /**
       * The base implementation of `_.isNative` without bad shim checks.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a native function,
       *  else `false`.
       */
      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }

      /**
       * The base implementation of `_.isRegExp` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
       */
      function baseIsRegExp(value) {
        return isObjectLike(value) && baseGetTag(value) == regexpTag;
      }

      /**
       * The base implementation of `_.isSet` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a set, else `false`.
       */
      function baseIsSet(value) {
        return isObjectLike(value) && getTag(value) == setTag;
      }

      /**
       * The base implementation of `_.isTypedArray` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
       */
      function baseIsTypedArray(value) {
        return isObjectLike(value) &&
          isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }

      /**
       * The base implementation of `_.iteratee`.
       *
       * @private
       * @param {*} [value=_.identity] The value to convert to an iteratee.
       * @returns {Function} Returns the iteratee.
       */
      function baseIteratee(value) {
        // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
        // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
        if (typeof value == 'function') {
          return value;
        }
        if (value == null) {
          return identity;
        }
        if (typeof value == 'object') {
          return isArray(value)
            ? baseMatchesProperty(value[0], value[1])
            : baseMatches(value);
        }
        return property(value);
      }

      /**
       * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */
      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys(object);
        }
        var result = [];
        for (var key in Object(object)) {
          if (hasOwnProperty.call(object, key) && key != 'constructor') {
            result.push(key);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */
      function baseKeysIn(object) {
        if (!isObject(object)) {
          return nativeKeysIn(object);
        }
        var isProto = isPrototype(object),
            result = [];

        for (var key in object) {
          if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
            result.push(key);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.lt` which doesn't coerce arguments.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than `other`,
       *  else `false`.
       */
      function baseLt(value, other) {
        return value < other;
      }

      /**
       * The base implementation of `_.map` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       */
      function baseMap(collection, iteratee) {
        var index = -1,
            result = isArrayLike(collection) ? Array(collection.length) : [];

        baseEach(collection, function(value, key, collection) {
          result[++index] = iteratee(value, key, collection);
        });
        return result;
      }

      /**
       * The base implementation of `_.matches` which doesn't clone `source`.
       *
       * @private
       * @param {Object} source The object of property values to match.
       * @returns {Function} Returns the new spec function.
       */
      function baseMatches(source) {
        var matchData = getMatchData(source);
        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }
        return function(object) {
          return object === source || baseIsMatch(object, source, matchData);
        };
      }

      /**
       * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
       *
       * @private
       * @param {string} path The path of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       */
      function baseMatchesProperty(path, srcValue) {
        if (isKey(path) && isStrictComparable(srcValue)) {
          return matchesStrictComparable(toKey(path), srcValue);
        }
        return function(object) {
          var objValue = get(object, path);
          return (objValue === undefined$1 && objValue === srcValue)
            ? hasIn(object, path)
            : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
        };
      }

      /**
       * The base implementation of `_.merge` without support for multiple sources.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @param {number} srcIndex The index of `source`.
       * @param {Function} [customizer] The function to customize merged values.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       */
      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }
        baseFor(source, function(srcValue, key) {
          stack || (stack = new Stack);
          if (isObject(srcValue)) {
            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
          }
          else {
            var newValue = customizer
              ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
              : undefined$1;

            if (newValue === undefined$1) {
              newValue = srcValue;
            }
            assignMergeValue(object, key, newValue);
          }
        }, keysIn);
      }

      /**
       * A specialized version of `baseMerge` for arrays and objects which performs
       * deep merges and tracks traversed objects enabling objects with circular
       * references to be merged.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @param {string} key The key of the value to merge.
       * @param {number} srcIndex The index of `source`.
       * @param {Function} mergeFunc The function to merge values.
       * @param {Function} [customizer] The function to customize assigned values.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       */
      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object, key),
            srcValue = safeGet(source, key),
            stacked = stack.get(srcValue);

        if (stacked) {
          assignMergeValue(object, key, stacked);
          return;
        }
        var newValue = customizer
          ? customizer(objValue, srcValue, (key + ''), object, source, stack)
          : undefined$1;

        var isCommon = newValue === undefined$1;

        if (isCommon) {
          var isArr = isArray(srcValue),
              isBuff = !isArr && isBuffer(srcValue),
              isTyped = !isArr && !isBuff && isTypedArray(srcValue);

          newValue = srcValue;
          if (isArr || isBuff || isTyped) {
            if (isArray(objValue)) {
              newValue = objValue;
            }
            else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            }
            else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer(srcValue, true);
            }
            else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray(srcValue, true);
            }
            else {
              newValue = [];
            }
          }
          else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            newValue = objValue;
            if (isArguments(objValue)) {
              newValue = toPlainObject(objValue);
            }
            else if (!isObject(objValue) || isFunction(objValue)) {
              newValue = initCloneObject(srcValue);
            }
          }
          else {
            isCommon = false;
          }
        }
        if (isCommon) {
          // Recursively merge objects and arrays (susceptible to call stack limits).
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack['delete'](srcValue);
        }
        assignMergeValue(object, key, newValue);
      }

      /**
       * The base implementation of `_.nth` which doesn't coerce arguments.
       *
       * @private
       * @param {Array} array The array to query.
       * @param {number} n The index of the element to return.
       * @returns {*} Returns the nth element of `array`.
       */
      function baseNth(array, n) {
        var length = array.length;
        if (!length) {
          return;
        }
        n += n < 0 ? length : 0;
        return isIndex(n, length) ? array[n] : undefined$1;
      }

      /**
       * The base implementation of `_.orderBy` without param guards.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
       * @param {string[]} orders The sort orders of `iteratees`.
       * @returns {Array} Returns the new sorted array.
       */
      function baseOrderBy(collection, iteratees, orders) {
        if (iteratees.length) {
          iteratees = arrayMap(iteratees, function(iteratee) {
            if (isArray(iteratee)) {
              return function(value) {
                return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
              }
            }
            return iteratee;
          });
        } else {
          iteratees = [identity];
        }

        var index = -1;
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

        var result = baseMap(collection, function(value, key, collection) {
          var criteria = arrayMap(iteratees, function(iteratee) {
            return iteratee(value);
          });
          return { 'criteria': criteria, 'index': ++index, 'value': value };
        });

        return baseSortBy(result, function(object, other) {
          return compareMultiple(object, other, orders);
        });
      }

      /**
       * The base implementation of `_.pick` without support for individual
       * property identifiers.
       *
       * @private
       * @param {Object} object The source object.
       * @param {string[]} paths The property paths to pick.
       * @returns {Object} Returns the new object.
       */
      function basePick(object, paths) {
        return basePickBy(object, paths, function(value, path) {
          return hasIn(object, path);
        });
      }

      /**
       * The base implementation of  `_.pickBy` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The source object.
       * @param {string[]} paths The property paths to pick.
       * @param {Function} predicate The function invoked per property.
       * @returns {Object} Returns the new object.
       */
      function basePickBy(object, paths, predicate) {
        var index = -1,
            length = paths.length,
            result = {};

        while (++index < length) {
          var path = paths[index],
              value = baseGet(object, path);

          if (predicate(value, path)) {
            baseSet(result, castPath(path, object), value);
          }
        }
        return result;
      }

      /**
       * A specialized version of `baseProperty` which supports deep paths.
       *
       * @private
       * @param {Array|string} path The path of the property to get.
       * @returns {Function} Returns the new accessor function.
       */
      function basePropertyDeep(path) {
        return function(object) {
          return baseGet(object, path);
        };
      }

      /**
       * The base implementation of `_.pullAllBy` without support for iteratee
       * shorthands.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns `array`.
       */
      function basePullAll(array, values, iteratee, comparator) {
        var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
            index = -1,
            length = values.length,
            seen = array;

        if (array === values) {
          values = copyArray(values);
        }
        if (iteratee) {
          seen = arrayMap(array, baseUnary(iteratee));
        }
        while (++index < length) {
          var fromIndex = 0,
              value = values[index],
              computed = iteratee ? iteratee(value) : value;

          while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
            if (seen !== array) {
              splice.call(seen, fromIndex, 1);
            }
            splice.call(array, fromIndex, 1);
          }
        }
        return array;
      }

      /**
       * The base implementation of `_.pullAt` without support for individual
       * indexes or capturing the removed elements.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {number[]} indexes The indexes of elements to remove.
       * @returns {Array} Returns `array`.
       */
      function basePullAt(array, indexes) {
        var length = array ? indexes.length : 0,
            lastIndex = length - 1;

        while (length--) {
          var index = indexes[length];
          if (length == lastIndex || index !== previous) {
            var previous = index;
            if (isIndex(index)) {
              splice.call(array, index, 1);
            } else {
              baseUnset(array, index);
            }
          }
        }
        return array;
      }

      /**
       * The base implementation of `_.random` without support for returning
       * floating-point numbers.
       *
       * @private
       * @param {number} lower The lower bound.
       * @param {number} upper The upper bound.
       * @returns {number} Returns the random number.
       */
      function baseRandom(lower, upper) {
        return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
      }

      /**
       * The base implementation of `_.range` and `_.rangeRight` which doesn't
       * coerce arguments.
       *
       * @private
       * @param {number} start The start of the range.
       * @param {number} end The end of the range.
       * @param {number} step The value to increment or decrement by.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Array} Returns the range of numbers.
       */
      function baseRange(start, end, step, fromRight) {
        var index = -1,
            length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
            result = Array(length);

        while (length--) {
          result[fromRight ? length : ++index] = start;
          start += step;
        }
        return result;
      }

      /**
       * The base implementation of `_.repeat` which doesn't coerce arguments.
       *
       * @private
       * @param {string} string The string to repeat.
       * @param {number} n The number of times to repeat the string.
       * @returns {string} Returns the repeated string.
       */
      function baseRepeat(string, n) {
        var result = '';
        if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
          return result;
        }
        // Leverage the exponentiation by squaring algorithm for a faster repeat.
        // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
        do {
          if (n % 2) {
            result += string;
          }
          n = nativeFloor(n / 2);
          if (n) {
            string += string;
          }
        } while (n);

        return result;
      }

      /**
       * The base implementation of `_.rest` which doesn't validate or coerce arguments.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @returns {Function} Returns the new function.
       */
      function baseRest(func, start) {
        return setToString(overRest(func, start, identity), func + '');
      }

      /**
       * The base implementation of `_.sample`.
       *
       * @private
       * @param {Array|Object} collection The collection to sample.
       * @returns {*} Returns the random element.
       */
      function baseSample(collection) {
        return arraySample(values(collection));
      }

      /**
       * The base implementation of `_.sampleSize` without param guards.
       *
       * @private
       * @param {Array|Object} collection The collection to sample.
       * @param {number} n The number of elements to sample.
       * @returns {Array} Returns the random elements.
       */
      function baseSampleSize(collection, n) {
        var array = values(collection);
        return shuffleSelf(array, baseClamp(n, 0, array.length));
      }

      /**
       * The base implementation of `_.set`.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {*} value The value to set.
       * @param {Function} [customizer] The function to customize path creation.
       * @returns {Object} Returns `object`.
       */
      function baseSet(object, path, value, customizer) {
        if (!isObject(object)) {
          return object;
        }
        path = castPath(path, object);

        var index = -1,
            length = path.length,
            lastIndex = length - 1,
            nested = object;

        while (nested != null && ++index < length) {
          var key = toKey(path[index]),
              newValue = value;

          if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
            return object;
          }

          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
            if (newValue === undefined$1) {
              newValue = isObject(objValue)
                ? objValue
                : (isIndex(path[index + 1]) ? [] : {});
            }
          }
          assignValue(nested, key, newValue);
          nested = nested[key];
        }
        return object;
      }

      /**
       * The base implementation of `setData` without support for hot loop shorting.
       *
       * @private
       * @param {Function} func The function to associate metadata with.
       * @param {*} data The metadata.
       * @returns {Function} Returns `func`.
       */
      var baseSetData = !metaMap ? identity : function(func, data) {
        metaMap.set(func, data);
        return func;
      };

      /**
       * The base implementation of `setToString` without support for hot loop shorting.
       *
       * @private
       * @param {Function} func The function to modify.
       * @param {Function} string The `toString` result.
       * @returns {Function} Returns `func`.
       */
      var baseSetToString = !defineProperty ? identity : function(func, string) {
        return defineProperty(func, 'toString', {
          'configurable': true,
          'enumerable': false,
          'value': constant(string),
          'writable': true
        });
      };

      /**
       * The base implementation of `_.shuffle`.
       *
       * @private
       * @param {Array|Object} collection The collection to shuffle.
       * @returns {Array} Returns the new shuffled array.
       */
      function baseShuffle(collection) {
        return shuffleSelf(values(collection));
      }

      /**
       * The base implementation of `_.slice` without an iteratee call guard.
       *
       * @private
       * @param {Array} array The array to slice.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the slice of `array`.
       */
      function baseSlice(array, start, end) {
        var index = -1,
            length = array.length;

        if (start < 0) {
          start = -start > length ? 0 : (length + start);
        }
        end = end > length ? length : end;
        if (end < 0) {
          end += length;
        }
        length = start > end ? 0 : ((end - start) >>> 0);
        start >>>= 0;

        var result = Array(length);
        while (++index < length) {
          result[index] = array[index + start];
        }
        return result;
      }

      /**
       * The base implementation of `_.some` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if any element passes the predicate check,
       *  else `false`.
       */
      function baseSome(collection, predicate) {
        var result;

        baseEach(collection, function(value, index, collection) {
          result = predicate(value, index, collection);
          return !result;
        });
        return !!result;
      }

      /**
       * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
       * performs a binary search of `array` to determine the index at which `value`
       * should be inserted into `array` in order to maintain its sort order.
       *
       * @private
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {boolean} [retHighest] Specify returning the highest qualified index.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       */
      function baseSortedIndex(array, value, retHighest) {
        var low = 0,
            high = array == null ? low : array.length;

        if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
          while (low < high) {
            var mid = (low + high) >>> 1,
                computed = array[mid];

            if (computed !== null && !isSymbol(computed) &&
                (retHighest ? (computed <= value) : (computed < value))) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return high;
        }
        return baseSortedIndexBy(array, value, identity, retHighest);
      }

      /**
       * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
       * which invokes `iteratee` for `value` and each element of `array` to compute
       * their sort ranking. The iteratee is invoked with one argument; (value).
       *
       * @private
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function} iteratee The iteratee invoked per element.
       * @param {boolean} [retHighest] Specify returning the highest qualified index.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       */
      function baseSortedIndexBy(array, value, iteratee, retHighest) {
        var low = 0,
            high = array == null ? 0 : array.length;
        if (high === 0) {
          return 0;
        }

        value = iteratee(value);
        var valIsNaN = value !== value,
            valIsNull = value === null,
            valIsSymbol = isSymbol(value),
            valIsUndefined = value === undefined$1;

        while (low < high) {
          var mid = nativeFloor((low + high) / 2),
              computed = iteratee(array[mid]),
              othIsDefined = computed !== undefined$1,
              othIsNull = computed === null,
              othIsReflexive = computed === computed,
              othIsSymbol = isSymbol(computed);

          if (valIsNaN) {
            var setLow = retHighest || othIsReflexive;
          } else if (valIsUndefined) {
            setLow = othIsReflexive && (retHighest || othIsDefined);
          } else if (valIsNull) {
            setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
          } else if (valIsSymbol) {
            setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
          } else if (othIsNull || othIsSymbol) {
            setLow = false;
          } else {
            setLow = retHighest ? (computed <= value) : (computed < value);
          }
          if (setLow) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return nativeMin(high, MAX_ARRAY_INDEX);
      }

      /**
       * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
       * support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       */
      function baseSortedUniq(array, iteratee) {
        var index = -1,
            length = array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;

          if (!index || !eq(computed, seen)) {
            var seen = computed;
            result[resIndex++] = value === 0 ? 0 : value;
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.toNumber` which doesn't ensure correct
       * conversions of binary, hexadecimal, or octal string values.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {number} Returns the number.
       */
      function baseToNumber(value) {
        if (typeof value == 'number') {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        return +value;
      }

      /**
       * The base implementation of `_.toString` which doesn't convert nullish
       * values to empty strings.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {string} Returns the string.
       */
      function baseToString(value) {
        // Exit early for strings to avoid a performance hit in some environments.
        if (typeof value == 'string') {
          return value;
        }
        if (isArray(value)) {
          // Recursively convert values (susceptible to call stack limits).
          return arrayMap(value, baseToString) + '';
        }
        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : '';
        }
        var result = (value + '');
        return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
      }

      /**
       * The base implementation of `_.uniqBy` without support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       */
      function baseUniq(array, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            length = array.length,
            isCommon = true,
            result = [],
            seen = result;

        if (comparator) {
          isCommon = false;
          includes = arrayIncludesWith;
        }
        else if (length >= LARGE_ARRAY_SIZE) {
          var set = iteratee ? null : createSet(array);
          if (set) {
            return setToArray(set);
          }
          isCommon = false;
          includes = cacheHas;
          seen = new SetCache;
        }
        else {
          seen = iteratee ? [] : result;
        }
        outer:
        while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;

          value = (comparator || value !== 0) ? value : 0;
          if (isCommon && computed === computed) {
            var seenIndex = seen.length;
            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }
            if (iteratee) {
              seen.push(computed);
            }
            result.push(value);
          }
          else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.unset`.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {Array|string} path The property path to unset.
       * @returns {boolean} Returns `true` if the property is deleted, else `false`.
       */
      function baseUnset(object, path) {
        path = castPath(path, object);
        object = parent(object, path);
        return object == null || delete object[toKey(last(path))];
      }

      /**
       * The base implementation of `_.update`.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to update.
       * @param {Function} updater The function to produce the updated value.
       * @param {Function} [customizer] The function to customize path creation.
       * @returns {Object} Returns `object`.
       */
      function baseUpdate(object, path, updater, customizer) {
        return baseSet(object, path, updater(baseGet(object, path)), customizer);
      }

      /**
       * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
       * without support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to query.
       * @param {Function} predicate The function invoked per iteration.
       * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Array} Returns the slice of `array`.
       */
      function baseWhile(array, predicate, isDrop, fromRight) {
        var length = array.length,
            index = fromRight ? length : -1;

        while ((fromRight ? index-- : ++index < length) &&
          predicate(array[index], index, array)) {}

        return isDrop
          ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
          : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
      }

      /**
       * The base implementation of `wrapperValue` which returns the result of
       * performing a sequence of actions on the unwrapped `value`, where each
       * successive action is supplied the return value of the previous.
       *
       * @private
       * @param {*} value The unwrapped value.
       * @param {Array} actions Actions to perform to resolve the unwrapped value.
       * @returns {*} Returns the resolved value.
       */
      function baseWrapperValue(value, actions) {
        var result = value;
        if (result instanceof LazyWrapper) {
          result = result.value();
        }
        return arrayReduce(actions, function(result, action) {
          return action.func.apply(action.thisArg, arrayPush([result], action.args));
        }, result);
      }

      /**
       * The base implementation of methods like `_.xor`, without support for
       * iteratee shorthands, that accepts an array of arrays to inspect.
       *
       * @private
       * @param {Array} arrays The arrays to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of values.
       */
      function baseXor(arrays, iteratee, comparator) {
        var length = arrays.length;
        if (length < 2) {
          return length ? baseUniq(arrays[0]) : [];
        }
        var index = -1,
            result = Array(length);

        while (++index < length) {
          var array = arrays[index],
              othIndex = -1;

          while (++othIndex < length) {
            if (othIndex != index) {
              result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
            }
          }
        }
        return baseUniq(baseFlatten(result, 1), iteratee, comparator);
      }

      /**
       * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
       *
       * @private
       * @param {Array} props The property identifiers.
       * @param {Array} values The property values.
       * @param {Function} assignFunc The function to assign values.
       * @returns {Object} Returns the new object.
       */
      function baseZipObject(props, values, assignFunc) {
        var index = -1,
            length = props.length,
            valsLength = values.length,
            result = {};

        while (++index < length) {
          var value = index < valsLength ? values[index] : undefined$1;
          assignFunc(result, props[index], value);
        }
        return result;
      }

      /**
       * Casts `value` to an empty array if it's not an array like object.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {Array|Object} Returns the cast array-like object.
       */
      function castArrayLikeObject(value) {
        return isArrayLikeObject(value) ? value : [];
      }

      /**
       * Casts `value` to `identity` if it's not a function.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {Function} Returns cast function.
       */
      function castFunction(value) {
        return typeof value == 'function' ? value : identity;
      }

      /**
       * Casts `value` to a path array if it's not one.
       *
       * @private
       * @param {*} value The value to inspect.
       * @param {Object} [object] The object to query keys on.
       * @returns {Array} Returns the cast property path array.
       */
      function castPath(value, object) {
        if (isArray(value)) {
          return value;
        }
        return isKey(value, object) ? [value] : stringToPath(toString(value));
      }

      /**
       * A `baseRest` alias which can be replaced with `identity` by module
       * replacement plugins.
       *
       * @private
       * @type {Function}
       * @param {Function} func The function to apply a rest parameter to.
       * @returns {Function} Returns the new function.
       */
      var castRest = baseRest;

      /**
       * Casts `array` to a slice if it's needed.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {number} start The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the cast slice.
       */
      function castSlice(array, start, end) {
        var length = array.length;
        end = end === undefined$1 ? length : end;
        return (!start && end >= length) ? array : baseSlice(array, start, end);
      }

      /**
       * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
       *
       * @private
       * @param {number|Object} id The timer id or timeout object of the timer to clear.
       */
      var clearTimeout = ctxClearTimeout || function(id) {
        return root.clearTimeout(id);
      };

      /**
       * Creates a clone of  `buffer`.
       *
       * @private
       * @param {Buffer} buffer The buffer to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Buffer} Returns the cloned buffer.
       */
      function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length = buffer.length,
            result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

        buffer.copy(result);
        return result;
      }

      /**
       * Creates a clone of `arrayBuffer`.
       *
       * @private
       * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
       * @returns {ArrayBuffer} Returns the cloned array buffer.
       */
      function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array(result).set(new Uint8Array(arrayBuffer));
        return result;
      }

      /**
       * Creates a clone of `dataView`.
       *
       * @private
       * @param {Object} dataView The data view to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the cloned data view.
       */
      function cloneDataView(dataView, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
      }

      /**
       * Creates a clone of `regexp`.
       *
       * @private
       * @param {Object} regexp The regexp to clone.
       * @returns {Object} Returns the cloned regexp.
       */
      function cloneRegExp(regexp) {
        var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
        result.lastIndex = regexp.lastIndex;
        return result;
      }

      /**
       * Creates a clone of the `symbol` object.
       *
       * @private
       * @param {Object} symbol The symbol object to clone.
       * @returns {Object} Returns the cloned symbol object.
       */
      function cloneSymbol(symbol) {
        return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
      }

      /**
       * Creates a clone of `typedArray`.
       *
       * @private
       * @param {Object} typedArray The typed array to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the cloned typed array.
       */
      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }

      /**
       * Compares values to sort them in ascending order.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {number} Returns the sort order indicator for `value`.
       */
      function compareAscending(value, other) {
        if (value !== other) {
          var valIsDefined = value !== undefined$1,
              valIsNull = value === null,
              valIsReflexive = value === value,
              valIsSymbol = isSymbol(value);

          var othIsDefined = other !== undefined$1,
              othIsNull = other === null,
              othIsReflexive = other === other,
              othIsSymbol = isSymbol(other);

          if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
              (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
              (valIsNull && othIsDefined && othIsReflexive) ||
              (!valIsDefined && othIsReflexive) ||
              !valIsReflexive) {
            return 1;
          }
          if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
              (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
              (othIsNull && valIsDefined && valIsReflexive) ||
              (!othIsDefined && valIsReflexive) ||
              !othIsReflexive) {
            return -1;
          }
        }
        return 0;
      }

      /**
       * Used by `_.orderBy` to compare multiple properties of a value to another
       * and stable sort them.
       *
       * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
       * specify an order of "desc" for descending or "asc" for ascending sort order
       * of corresponding values.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {boolean[]|string[]} orders The order to sort by for each property.
       * @returns {number} Returns the sort order indicator for `object`.
       */
      function compareMultiple(object, other, orders) {
        var index = -1,
            objCriteria = object.criteria,
            othCriteria = other.criteria,
            length = objCriteria.length,
            ordersLength = orders.length;

        while (++index < length) {
          var result = compareAscending(objCriteria[index], othCriteria[index]);
          if (result) {
            if (index >= ordersLength) {
              return result;
            }
            var order = orders[index];
            return result * (order == 'desc' ? -1 : 1);
          }
        }
        // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
        // that causes it, under certain circumstances, to provide the same value for
        // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
        // for more details.
        //
        // This also ensures a stable sort in V8 and other engines.
        // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
        return object.index - other.index;
      }

      /**
       * Creates an array that is the composition of partially applied arguments,
       * placeholders, and provided arguments into a single array of arguments.
       *
       * @private
       * @param {Array} args The provided arguments.
       * @param {Array} partials The arguments to prepend to those provided.
       * @param {Array} holders The `partials` placeholder indexes.
       * @params {boolean} [isCurried] Specify composing for a curried function.
       * @returns {Array} Returns the new array of composed arguments.
       */
      function composeArgs(args, partials, holders, isCurried) {
        var argsIndex = -1,
            argsLength = args.length,
            holdersLength = holders.length,
            leftIndex = -1,
            leftLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(leftLength + rangeLength),
            isUncurried = !isCurried;

        while (++leftIndex < leftLength) {
          result[leftIndex] = partials[leftIndex];
        }
        while (++argsIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[holders[argsIndex]] = args[argsIndex];
          }
        }
        while (rangeLength--) {
          result[leftIndex++] = args[argsIndex++];
        }
        return result;
      }

      /**
       * This function is like `composeArgs` except that the arguments composition
       * is tailored for `_.partialRight`.
       *
       * @private
       * @param {Array} args The provided arguments.
       * @param {Array} partials The arguments to append to those provided.
       * @param {Array} holders The `partials` placeholder indexes.
       * @params {boolean} [isCurried] Specify composing for a curried function.
       * @returns {Array} Returns the new array of composed arguments.
       */
      function composeArgsRight(args, partials, holders, isCurried) {
        var argsIndex = -1,
            argsLength = args.length,
            holdersIndex = -1,
            holdersLength = holders.length,
            rightIndex = -1,
            rightLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(rangeLength + rightLength),
            isUncurried = !isCurried;

        while (++argsIndex < rangeLength) {
          result[argsIndex] = args[argsIndex];
        }
        var offset = argsIndex;
        while (++rightIndex < rightLength) {
          result[offset + rightIndex] = partials[rightIndex];
        }
        while (++holdersIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[offset + holders[holdersIndex]] = args[argsIndex++];
          }
        }
        return result;
      }

      /**
       * Copies the values of `source` to `array`.
       *
       * @private
       * @param {Array} source The array to copy values from.
       * @param {Array} [array=[]] The array to copy values to.
       * @returns {Array} Returns `array`.
       */
      function copyArray(source, array) {
        var index = -1,
            length = source.length;

        array || (array = Array(length));
        while (++index < length) {
          array[index] = source[index];
        }
        return array;
      }

      /**
       * Copies properties of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy properties from.
       * @param {Array} props The property identifiers to copy.
       * @param {Object} [object={}] The object to copy properties to.
       * @param {Function} [customizer] The function to customize copied values.
       * @returns {Object} Returns `object`.
       */
      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});

        var index = -1,
            length = props.length;

        while (++index < length) {
          var key = props[index];

          var newValue = customizer
            ? customizer(object[key], source[key], key, object, source)
            : undefined$1;

          if (newValue === undefined$1) {
            newValue = source[key];
          }
          if (isNew) {
            baseAssignValue(object, key, newValue);
          } else {
            assignValue(object, key, newValue);
          }
        }
        return object;
      }

      /**
       * Copies own symbols of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy symbols from.
       * @param {Object} [object={}] The object to copy symbols to.
       * @returns {Object} Returns `object`.
       */
      function copySymbols(source, object) {
        return copyObject(source, getSymbols(source), object);
      }

      /**
       * Copies own and inherited symbols of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy symbols from.
       * @param {Object} [object={}] The object to copy symbols to.
       * @returns {Object} Returns `object`.
       */
      function copySymbolsIn(source, object) {
        return copyObject(source, getSymbolsIn(source), object);
      }

      /**
       * Creates a function like `_.groupBy`.
       *
       * @private
       * @param {Function} setter The function to set accumulator values.
       * @param {Function} [initializer] The accumulator object initializer.
       * @returns {Function} Returns the new aggregator function.
       */
      function createAggregator(setter, initializer) {
        return function(collection, iteratee) {
          var func = isArray(collection) ? arrayAggregator : baseAggregator,
              accumulator = initializer ? initializer() : {};

          return func(collection, setter, getIteratee(iteratee, 2), accumulator);
        };
      }

      /**
       * Creates a function like `_.assign`.
       *
       * @private
       * @param {Function} assigner The function to assign values.
       * @returns {Function} Returns the new assigner function.
       */
      function createAssigner(assigner) {
        return baseRest(function(object, sources) {
          var index = -1,
              length = sources.length,
              customizer = length > 1 ? sources[length - 1] : undefined$1,
              guard = length > 2 ? sources[2] : undefined$1;

          customizer = (assigner.length > 3 && typeof customizer == 'function')
            ? (length--, customizer)
            : undefined$1;

          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined$1 : customizer;
            length = 1;
          }
          object = Object(object);
          while (++index < length) {
            var source = sources[index];
            if (source) {
              assigner(object, source, index, customizer);
            }
          }
          return object;
        });
      }

      /**
       * Creates a `baseEach` or `baseEachRight` function.
       *
       * @private
       * @param {Function} eachFunc The function to iterate over a collection.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new base function.
       */
      function createBaseEach(eachFunc, fromRight) {
        return function(collection, iteratee) {
          if (collection == null) {
            return collection;
          }
          if (!isArrayLike(collection)) {
            return eachFunc(collection, iteratee);
          }
          var length = collection.length,
              index = fromRight ? length : -1,
              iterable = Object(collection);

          while ((fromRight ? index-- : ++index < length)) {
            if (iteratee(iterable[index], index, iterable) === false) {
              break;
            }
          }
          return collection;
        };
      }

      /**
       * Creates a base function for methods like `_.forIn` and `_.forOwn`.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new base function.
       */
      function createBaseFor(fromRight) {
        return function(object, iteratee, keysFunc) {
          var index = -1,
              iterable = Object(object),
              props = keysFunc(object),
              length = props.length;

          while (length--) {
            var key = props[fromRight ? length : ++index];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }

      /**
       * Creates a function that wraps `func` to invoke it with the optional `this`
       * binding of `thisArg`.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createBind(func, bitmask, thisArg) {
        var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);

        function wrapper() {
          var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
          return fn.apply(isBind ? thisArg : this, arguments);
        }
        return wrapper;
      }

      /**
       * Creates a function like `_.lowerFirst`.
       *
       * @private
       * @param {string} methodName The name of the `String` case method to use.
       * @returns {Function} Returns the new case function.
       */
      function createCaseFirst(methodName) {
        return function(string) {
          string = toString(string);

          var strSymbols = hasUnicode(string)
            ? stringToArray(string)
            : undefined$1;

          var chr = strSymbols
            ? strSymbols[0]
            : string.charAt(0);

          var trailing = strSymbols
            ? castSlice(strSymbols, 1).join('')
            : string.slice(1);

          return chr[methodName]() + trailing;
        };
      }

      /**
       * Creates a function like `_.camelCase`.
       *
       * @private
       * @param {Function} callback The function to combine each word.
       * @returns {Function} Returns the new compounder function.
       */
      function createCompounder(callback) {
        return function(string) {
          return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
        };
      }

      /**
       * Creates a function that produces an instance of `Ctor` regardless of
       * whether it was invoked as part of a `new` expression or by `call` or `apply`.
       *
       * @private
       * @param {Function} Ctor The constructor to wrap.
       * @returns {Function} Returns the new wrapped function.
       */
      function createCtor(Ctor) {
        return function() {
          // Use a `switch` statement to work with class constructors. See
          // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
          // for more details.
          var args = arguments;
          switch (args.length) {
            case 0: return new Ctor;
            case 1: return new Ctor(args[0]);
            case 2: return new Ctor(args[0], args[1]);
            case 3: return new Ctor(args[0], args[1], args[2]);
            case 4: return new Ctor(args[0], args[1], args[2], args[3]);
            case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
            case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
            case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
          }
          var thisBinding = baseCreate(Ctor.prototype),
              result = Ctor.apply(thisBinding, args);

          // Mimic the constructor's `return` behavior.
          // See https://es5.github.io/#x13.2.2 for more details.
          return isObject(result) ? result : thisBinding;
        };
      }

      /**
       * Creates a function that wraps `func` to enable currying.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {number} arity The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createCurry(func, bitmask, arity) {
        var Ctor = createCtor(func);

        function wrapper() {
          var arguments$1 = arguments;

          var length = arguments.length,
              args = Array(length),
              index = length,
              placeholder = getHolder(wrapper);

          while (index--) {
            args[index] = arguments$1[index];
          }
          var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
            ? []
            : replaceHolders(args, placeholder);

          length -= holders.length;
          if (length < arity) {
            return createRecurry(
              func, bitmask, createHybrid, wrapper.placeholder, undefined$1,
              args, holders, undefined$1, undefined$1, arity - length);
          }
          var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
          return apply(fn, this, args);
        }
        return wrapper;
      }

      /**
       * Creates a `_.find` or `_.findLast` function.
       *
       * @private
       * @param {Function} findIndexFunc The function to find the collection index.
       * @returns {Function} Returns the new find function.
       */
      function createFind(findIndexFunc) {
        return function(collection, predicate, fromIndex) {
          var iterable = Object(collection);
          if (!isArrayLike(collection)) {
            var iteratee = getIteratee(predicate, 3);
            collection = keys(collection);
            predicate = function(key) { return iteratee(iterable[key], key, iterable); };
          }
          var index = findIndexFunc(collection, predicate, fromIndex);
          return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined$1;
        };
      }

      /**
       * Creates a `_.flow` or `_.flowRight` function.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new flow function.
       */
      function createFlow(fromRight) {
        return flatRest(function(funcs) {
          var length = funcs.length,
              index = length,
              prereq = LodashWrapper.prototype.thru;

          if (fromRight) {
            funcs.reverse();
          }
          while (index--) {
            var func = funcs[index];
            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }
            if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
              var wrapper = new LodashWrapper([], true);
            }
          }
          index = wrapper ? index : length;
          while (++index < length) {
            func = funcs[index];

            var funcName = getFuncName(func),
                data = funcName == 'wrapper' ? getData(func) : undefined$1;

            if (data && isLaziable(data[0]) &&
                  data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                  !data[4].length && data[9] == 1
                ) {
              wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
            } else {
              wrapper = (func.length == 1 && isLaziable(func))
                ? wrapper[funcName]()
                : wrapper.thru(func);
            }
          }
          return function() {
            var args = arguments,
                value = args[0];

            if (wrapper && args.length == 1 && isArray(value)) {
              return wrapper.plant(value).value();
            }
            var index = 0,
                result = length ? funcs[index].apply(this, args) : value;

            while (++index < length) {
              result = funcs[index].call(this, result);
            }
            return result;
          };
        });
      }

      /**
       * Creates a function that wraps `func` to invoke it with optional `this`
       * binding of `thisArg`, partial application, and currying.
       *
       * @private
       * @param {Function|string} func The function or method name to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to prepend to those provided to
       *  the new function.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [partialsRight] The arguments to append to those provided
       *  to the new function.
       * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
        var isAry = bitmask & WRAP_ARY_FLAG,
            isBind = bitmask & WRAP_BIND_FLAG,
            isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
            isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
            isFlip = bitmask & WRAP_FLIP_FLAG,
            Ctor = isBindKey ? undefined$1 : createCtor(func);

        function wrapper() {
          var arguments$1 = arguments;

          var length = arguments.length,
              args = Array(length),
              index = length;

          while (index--) {
            args[index] = arguments$1[index];
          }
          if (isCurried) {
            var placeholder = getHolder(wrapper),
                holdersCount = countHolders(args, placeholder);
          }
          if (partials) {
            args = composeArgs(args, partials, holders, isCurried);
          }
          if (partialsRight) {
            args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
          }
          length -= holdersCount;
          if (isCurried && length < arity) {
            var newHolders = replaceHolders(args, placeholder);
            return createRecurry(
              func, bitmask, createHybrid, wrapper.placeholder, thisArg,
              args, newHolders, argPos, ary, arity - length
            );
          }
          var thisBinding = isBind ? thisArg : this,
              fn = isBindKey ? thisBinding[func] : func;

          length = args.length;
          if (argPos) {
            args = reorder(args, argPos);
          } else if (isFlip && length > 1) {
            args.reverse();
          }
          if (isAry && ary < length) {
            args.length = ary;
          }
          if (this && this !== root && this instanceof wrapper) {
            fn = Ctor || createCtor(fn);
          }
          return fn.apply(thisBinding, args);
        }
        return wrapper;
      }

      /**
       * Creates a function like `_.invertBy`.
       *
       * @private
       * @param {Function} setter The function to set accumulator values.
       * @param {Function} toIteratee The function to resolve iteratees.
       * @returns {Function} Returns the new inverter function.
       */
      function createInverter(setter, toIteratee) {
        return function(object, iteratee) {
          return baseInverter(object, setter, toIteratee(iteratee), {});
        };
      }

      /**
       * Creates a function that performs a mathematical operation on two values.
       *
       * @private
       * @param {Function} operator The function to perform the operation.
       * @param {number} [defaultValue] The value used for `undefined` arguments.
       * @returns {Function} Returns the new mathematical operation function.
       */
      function createMathOperation(operator, defaultValue) {
        return function(value, other) {
          var result;
          if (value === undefined$1 && other === undefined$1) {
            return defaultValue;
          }
          if (value !== undefined$1) {
            result = value;
          }
          if (other !== undefined$1) {
            if (result === undefined$1) {
              return other;
            }
            if (typeof value == 'string' || typeof other == 'string') {
              value = baseToString(value);
              other = baseToString(other);
            } else {
              value = baseToNumber(value);
              other = baseToNumber(other);
            }
            result = operator(value, other);
          }
          return result;
        };
      }

      /**
       * Creates a function like `_.over`.
       *
       * @private
       * @param {Function} arrayFunc The function to iterate over iteratees.
       * @returns {Function} Returns the new over function.
       */
      function createOver(arrayFunc) {
        return flatRest(function(iteratees) {
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          return baseRest(function(args) {
            var thisArg = this;
            return arrayFunc(iteratees, function(iteratee) {
              return apply(iteratee, thisArg, args);
            });
          });
        });
      }

      /**
       * Creates the padding for `string` based on `length`. The `chars` string
       * is truncated if the number of characters exceeds `length`.
       *
       * @private
       * @param {number} length The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padding for `string`.
       */
      function createPadding(length, chars) {
        chars = chars === undefined$1 ? ' ' : baseToString(chars);

        var charsLength = chars.length;
        if (charsLength < 2) {
          return charsLength ? baseRepeat(chars, length) : chars;
        }
        var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
        return hasUnicode(chars)
          ? castSlice(stringToArray(result), 0, length).join('')
          : result.slice(0, length);
      }

      /**
       * Creates a function that wraps `func` to invoke it with the `this` binding
       * of `thisArg` and `partials` prepended to the arguments it receives.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {Array} partials The arguments to prepend to those provided to
       *  the new function.
       * @returns {Function} Returns the new wrapped function.
       */
      function createPartial(func, bitmask, thisArg, partials) {
        var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);

        function wrapper() {
          var arguments$1 = arguments;

          var argsIndex = -1,
              argsLength = arguments.length,
              leftIndex = -1,
              leftLength = partials.length,
              args = Array(leftLength + argsLength),
              fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

          while (++leftIndex < leftLength) {
            args[leftIndex] = partials[leftIndex];
          }
          while (argsLength--) {
            args[leftIndex++] = arguments$1[++argsIndex];
          }
          return apply(fn, isBind ? thisArg : this, args);
        }
        return wrapper;
      }

      /**
       * Creates a `_.range` or `_.rangeRight` function.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new range function.
       */
      function createRange(fromRight) {
        return function(start, end, step) {
          if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
            end = step = undefined$1;
          }
          // Ensure the sign of `-0` is preserved.
          start = toFinite(start);
          if (end === undefined$1) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          step = step === undefined$1 ? (start < end ? 1 : -1) : toFinite(step);
          return baseRange(start, end, step, fromRight);
        };
      }

      /**
       * Creates a function that performs a relational operation on two values.
       *
       * @private
       * @param {Function} operator The function to perform the operation.
       * @returns {Function} Returns the new relational operation function.
       */
      function createRelationalOperation(operator) {
        return function(value, other) {
          if (!(typeof value == 'string' && typeof other == 'string')) {
            value = toNumber(value);
            other = toNumber(other);
          }
          return operator(value, other);
        };
      }

      /**
       * Creates a function that wraps `func` to continue currying.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {Function} wrapFunc The function to create the `func` wrapper.
       * @param {*} placeholder The placeholder value.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to prepend to those provided to
       *  the new function.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
        var isCurry = bitmask & WRAP_CURRY_FLAG,
            newHolders = isCurry ? holders : undefined$1,
            newHoldersRight = isCurry ? undefined$1 : holders,
            newPartials = isCurry ? partials : undefined$1,
            newPartialsRight = isCurry ? undefined$1 : partials;

        bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
        bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

        if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
          bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
        }
        var newData = [
          func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
          newHoldersRight, argPos, ary, arity
        ];

        var result = wrapFunc.apply(undefined$1, newData);
        if (isLaziable(func)) {
          setData(result, newData);
        }
        result.placeholder = placeholder;
        return setWrapToString(result, func, bitmask);
      }

      /**
       * Creates a function like `_.round`.
       *
       * @private
       * @param {string} methodName The name of the `Math` method to use when rounding.
       * @returns {Function} Returns the new round function.
       */
      function createRound(methodName) {
        var func = Math[methodName];
        return function(number, precision) {
          number = toNumber(number);
          precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
          if (precision && nativeIsFinite(number)) {
            // Shift with exponential notation to avoid floating-point issues.
            // See [MDN](https://mdn.io/round#Examples) for more details.
            var pair = (toString(number) + 'e').split('e'),
                value = func(pair[0] + 'e' + (+pair[1] + precision));

            pair = (toString(value) + 'e').split('e');
            return +(pair[0] + 'e' + (+pair[1] - precision));
          }
          return func(number);
        };
      }

      /**
       * Creates a set object of `values`.
       *
       * @private
       * @param {Array} values The values to add to the set.
       * @returns {Object} Returns the new set.
       */
      var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
        return new Set(values);
      };

      /**
       * Creates a `_.toPairs` or `_.toPairsIn` function.
       *
       * @private
       * @param {Function} keysFunc The function to get the keys of a given object.
       * @returns {Function} Returns the new pairs function.
       */
      function createToPairs(keysFunc) {
        return function(object) {
          var tag = getTag(object);
          if (tag == mapTag) {
            return mapToArray(object);
          }
          if (tag == setTag) {
            return setToPairs(object);
          }
          return baseToPairs(object, keysFunc(object));
        };
      }

      /**
       * Creates a function that either curries or invokes `func` with optional
       * `this` binding and partially applied arguments.
       *
       * @private
       * @param {Function|string} func The function or method name to wrap.
       * @param {number} bitmask The bitmask flags.
       *    1 - `_.bind`
       *    2 - `_.bindKey`
       *    4 - `_.curry` or `_.curryRight` of a bound function
       *    8 - `_.curry`
       *   16 - `_.curryRight`
       *   32 - `_.partial`
       *   64 - `_.partialRight`
       *  128 - `_.rearg`
       *  256 - `_.ary`
       *  512 - `_.flip`
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to be partially applied.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
        var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
        if (!isBindKey && typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var length = partials ? partials.length : 0;
        if (!length) {
          bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
          partials = holders = undefined$1;
        }
        ary = ary === undefined$1 ? ary : nativeMax(toInteger(ary), 0);
        arity = arity === undefined$1 ? arity : toInteger(arity);
        length -= holders ? holders.length : 0;

        if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
          var partialsRight = partials,
              holdersRight = holders;

          partials = holders = undefined$1;
        }
        var data = isBindKey ? undefined$1 : getData(func);

        var newData = [
          func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
          argPos, ary, arity
        ];

        if (data) {
          mergeData(newData, data);
        }
        func = newData[0];
        bitmask = newData[1];
        thisArg = newData[2];
        partials = newData[3];
        holders = newData[4];
        arity = newData[9] = newData[9] === undefined$1
          ? (isBindKey ? 0 : func.length)
          : nativeMax(newData[9] - length, 0);

        if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
          bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
        }
        if (!bitmask || bitmask == WRAP_BIND_FLAG) {
          var result = createBind(func, bitmask, thisArg);
        } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
          result = createCurry(func, bitmask, arity);
        } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
          result = createPartial(func, bitmask, thisArg, partials);
        } else {
          result = createHybrid.apply(undefined$1, newData);
        }
        var setter = data ? baseSetData : setData;
        return setWrapToString(setter(result, newData), func, bitmask);
      }

      /**
       * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
       * of source objects to the destination object for all destination properties
       * that resolve to `undefined`.
       *
       * @private
       * @param {*} objValue The destination value.
       * @param {*} srcValue The source value.
       * @param {string} key The key of the property to assign.
       * @param {Object} object The parent object of `objValue`.
       * @returns {*} Returns the value to assign.
       */
      function customDefaultsAssignIn(objValue, srcValue, key, object) {
        if (objValue === undefined$1 ||
            (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
          return srcValue;
        }
        return objValue;
      }

      /**
       * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
       * objects into destination objects that are passed thru.
       *
       * @private
       * @param {*} objValue The destination value.
       * @param {*} srcValue The source value.
       * @param {string} key The key of the property to merge.
       * @param {Object} object The parent object of `objValue`.
       * @param {Object} source The parent object of `srcValue`.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       * @returns {*} Returns the value to assign.
       */
      function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
        if (isObject(objValue) && isObject(srcValue)) {
          // Recursively merge objects and arrays (susceptible to call stack limits).
          stack.set(srcValue, objValue);
          baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
          stack['delete'](srcValue);
        }
        return objValue;
      }

      /**
       * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
       * objects.
       *
       * @private
       * @param {*} value The value to inspect.
       * @param {string} key The key of the property to inspect.
       * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
       */
      function customOmitClone(value) {
        return isPlainObject(value) ? undefined$1 : value;
      }

      /**
       * A specialized version of `baseIsEqualDeep` for arrays with support for
       * partial deep comparisons.
       *
       * @private
       * @param {Array} array The array to compare.
       * @param {Array} other The other array to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `array` and `other` objects.
       * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
       */
      function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            arrLength = array.length,
            othLength = other.length;

        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        // Check that cyclic values are equal.
        var arrStacked = stack.get(array);
        var othStacked = stack.get(other);
        if (arrStacked && othStacked) {
          return arrStacked == other && othStacked == array;
        }
        var index = -1,
            result = true,
            seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined$1;

        stack.set(array, other);
        stack.set(other, array);

        // Ignore non-index properties.
        while (++index < arrLength) {
          var arrValue = array[index],
              othValue = other[index];

          if (customizer) {
            var compared = isPartial
              ? customizer(othValue, arrValue, index, other, array, stack)
              : customizer(arrValue, othValue, index, array, other, stack);
          }
          if (compared !== undefined$1) {
            if (compared) {
              continue;
            }
            result = false;
            break;
          }
          // Recursively compare arrays (susceptible to call stack limits).
          if (seen) {
            if (!arraySome(other, function(othValue, othIndex) {
                  if (!cacheHas(seen, othIndex) &&
                      (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                    return seen.push(othIndex);
                  }
                })) {
              result = false;
              break;
            }
          } else if (!(
                arrValue === othValue ||
                  equalFunc(arrValue, othValue, bitmask, customizer, stack)
              )) {
            result = false;
            break;
          }
        }
        stack['delete'](array);
        stack['delete'](other);
        return result;
      }

      /**
       * A specialized version of `baseIsEqualDeep` for comparing objects of
       * the same `toStringTag`.
       *
       * **Note:** This function only supports comparing values with tags of
       * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {string} tag The `toStringTag` of the objects to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */
      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag:
            if ((object.byteLength != other.byteLength) ||
                (object.byteOffset != other.byteOffset)) {
              return false;
            }
            object = object.buffer;
            other = other.buffer;

          case arrayBufferTag:
            if ((object.byteLength != other.byteLength) ||
                !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
              return false;
            }
            return true;

          case boolTag:
          case dateTag:
          case numberTag:
            // Coerce booleans to `1` or `0` and dates to milliseconds.
            // Invalid dates are coerced to `NaN`.
            return eq(+object, +other);

          case errorTag:
            return object.name == other.name && object.message == other.message;

          case regexpTag:
          case stringTag:
            // Coerce regexes to strings and treat strings, primitives and objects,
            // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
            // for more details.
            return object == (other + '');

          case mapTag:
            var convert = mapToArray;

          case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);

            if (object.size != other.size && !isPartial) {
              return false;
            }
            // Assume cyclic values are equal.
            var stacked = stack.get(object);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG;

            // Recursively compare objects (susceptible to call stack limits).
            stack.set(object, other);
            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack['delete'](object);
            return result;

          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
        }
        return false;
      }

      /**
       * A specialized version of `baseIsEqualDeep` for objects with support for
       * partial deep comparisons.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */
      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            objProps = getAllKeys(object),
            objLength = objProps.length,
            othProps = getAllKeys(other),
            othLength = othProps.length;

        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index = objLength;
        while (index--) {
          var key = objProps[index];
          if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
            return false;
          }
        }
        // Check that cyclic values are equal.
        var objStacked = stack.get(object);
        var othStacked = stack.get(other);
        if (objStacked && othStacked) {
          return objStacked == other && othStacked == object;
        }
        var result = true;
        stack.set(object, other);
        stack.set(other, object);

        var skipCtor = isPartial;
        while (++index < objLength) {
          key = objProps[index];
          var objValue = object[key],
              othValue = other[key];

          if (customizer) {
            var compared = isPartial
              ? customizer(othValue, objValue, key, other, object, stack)
              : customizer(objValue, othValue, key, object, other, stack);
          }
          // Recursively compare objects (susceptible to call stack limits).
          if (!(compared === undefined$1
                ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
                : compared
              )) {
            result = false;
            break;
          }
          skipCtor || (skipCtor = key == 'constructor');
        }
        if (result && !skipCtor) {
          var objCtor = object.constructor,
              othCtor = other.constructor;

          // Non `Object` object instances with different constructors are not equal.
          if (objCtor != othCtor &&
              ('constructor' in object && 'constructor' in other) &&
              !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                typeof othCtor == 'function' && othCtor instanceof othCtor)) {
            result = false;
          }
        }
        stack['delete'](object);
        stack['delete'](other);
        return result;
      }

      /**
       * A specialized version of `baseRest` which flattens the rest array.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @returns {Function} Returns the new function.
       */
      function flatRest(func) {
        return setToString(overRest(func, undefined$1, flatten), func + '');
      }

      /**
       * Creates an array of own enumerable property names and symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names and symbols.
       */
      function getAllKeys(object) {
        return baseGetAllKeys(object, keys, getSymbols);
      }

      /**
       * Creates an array of own and inherited enumerable property names and
       * symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names and symbols.
       */
      function getAllKeysIn(object) {
        return baseGetAllKeys(object, keysIn, getSymbolsIn);
      }

      /**
       * Gets metadata for `func`.
       *
       * @private
       * @param {Function} func The function to query.
       * @returns {*} Returns the metadata for `func`.
       */
      var getData = !metaMap ? noop : function(func) {
        return metaMap.get(func);
      };

      /**
       * Gets the name of `func`.
       *
       * @private
       * @param {Function} func The function to query.
       * @returns {string} Returns the function name.
       */
      function getFuncName(func) {
        var result = (func.name + ''),
            array = realNames[result],
            length = hasOwnProperty.call(realNames, result) ? array.length : 0;

        while (length--) {
          var data = array[length],
              otherFunc = data.func;
          if (otherFunc == null || otherFunc == func) {
            return data.name;
          }
        }
        return result;
      }

      /**
       * Gets the argument placeholder value for `func`.
       *
       * @private
       * @param {Function} func The function to inspect.
       * @returns {*} Returns the placeholder value.
       */
      function getHolder(func) {
        var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
        return object.placeholder;
      }

      /**
       * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
       * this function returns the custom method, otherwise it returns `baseIteratee`.
       * If arguments are provided, the chosen function is invoked with them and
       * its result is returned.
       *
       * @private
       * @param {*} [value] The value to convert to an iteratee.
       * @param {number} [arity] The arity of the created iteratee.
       * @returns {Function} Returns the chosen function or its result.
       */
      function getIteratee() {
        var result = lodash.iteratee || iteratee;
        result = result === iteratee ? baseIteratee : result;
        return arguments.length ? result(arguments[0], arguments[1]) : result;
      }

      /**
       * Gets the data for `map`.
       *
       * @private
       * @param {Object} map The map to query.
       * @param {string} key The reference key.
       * @returns {*} Returns the map data.
       */
      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key)
          ? data[typeof key == 'string' ? 'string' : 'hash']
          : data.map;
      }

      /**
       * Gets the property names, values, and compare flags of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the match data of `object`.
       */
      function getMatchData(object) {
        var result = keys(object),
            length = result.length;

        while (length--) {
          var key = result[length],
              value = object[key];

          result[length] = [key, value, isStrictComparable(value)];
        }
        return result;
      }

      /**
       * Gets the native function at `key` of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {string} key The key of the method to get.
       * @returns {*} Returns the function if it's native, else `undefined`.
       */
      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : undefined$1;
      }

      /**
       * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the raw `toStringTag`.
       */
      function getRawTag(value) {
        var isOwn = hasOwnProperty.call(value, symToStringTag),
            tag = value[symToStringTag];

        try {
          value[symToStringTag] = undefined$1;
          var unmasked = true;
        } catch (e) {}

        var result = nativeObjectToString.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result;
      }

      /**
       * Creates an array of the own enumerable symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of symbols.
       */
      var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
        if (object == null) {
          return [];
        }
        object = Object(object);
        return arrayFilter(nativeGetSymbols(object), function(symbol) {
          return propertyIsEnumerable.call(object, symbol);
        });
      };

      /**
       * Creates an array of the own and inherited enumerable symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of symbols.
       */
      var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
        var result = [];
        while (object) {
          arrayPush(result, getSymbols(object));
          object = getPrototype(object);
        }
        return result;
      };

      /**
       * Gets the `toStringTag` of `value`.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the `toStringTag`.
       */
      var getTag = baseGetTag;

      // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
      if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
          (Map && getTag(new Map) != mapTag) ||
          (Promise && getTag(Promise.resolve()) != promiseTag) ||
          (Set && getTag(new Set) != setTag) ||
          (WeakMap && getTag(new WeakMap) != weakMapTag)) {
        getTag = function(value) {
          var result = baseGetTag(value),
              Ctor = result == objectTag ? value.constructor : undefined$1,
              ctorString = Ctor ? toSource(Ctor) : '';

          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString: return dataViewTag;
              case mapCtorString: return mapTag;
              case promiseCtorString: return promiseTag;
              case setCtorString: return setTag;
              case weakMapCtorString: return weakMapTag;
            }
          }
          return result;
        };
      }

      /**
       * Gets the view, applying any `transforms` to the `start` and `end` positions.
       *
       * @private
       * @param {number} start The start of the view.
       * @param {number} end The end of the view.
       * @param {Array} transforms The transformations to apply to the view.
       * @returns {Object} Returns an object containing the `start` and `end`
       *  positions of the view.
       */
      function getView(start, end, transforms) {
        var index = -1,
            length = transforms.length;

        while (++index < length) {
          var data = transforms[index],
              size = data.size;

          switch (data.type) {
            case 'drop':      start += size; break;
            case 'dropRight': end -= size; break;
            case 'take':      end = nativeMin(end, start + size); break;
            case 'takeRight': start = nativeMax(start, end - size); break;
          }
        }
        return { 'start': start, 'end': end };
      }

      /**
       * Extracts wrapper details from the `source` body comment.
       *
       * @private
       * @param {string} source The source to inspect.
       * @returns {Array} Returns the wrapper details.
       */
      function getWrapDetails(source) {
        var match = source.match(reWrapDetails);
        return match ? match[1].split(reSplitDetails) : [];
      }

      /**
       * Checks if `path` exists on `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @param {Function} hasFunc The function to check properties.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       */
      function hasPath(object, path, hasFunc) {
        path = castPath(path, object);

        var index = -1,
            length = path.length,
            result = false;

        while (++index < length) {
          var key = toKey(path[index]);
          if (!(result = object != null && hasFunc(object, key))) {
            break;
          }
          object = object[key];
        }
        if (result || ++index != length) {
          return result;
        }
        length = object == null ? 0 : object.length;
        return !!length && isLength(length) && isIndex(key, length) &&
          (isArray(object) || isArguments(object));
      }

      /**
       * Initializes an array clone.
       *
       * @private
       * @param {Array} array The array to clone.
       * @returns {Array} Returns the initialized clone.
       */
      function initCloneArray(array) {
        var length = array.length,
            result = new array.constructor(length);

        // Add properties assigned by `RegExp#exec`.
        if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
          result.index = array.index;
          result.input = array.input;
        }
        return result;
      }

      /**
       * Initializes an object clone.
       *
       * @private
       * @param {Object} object The object to clone.
       * @returns {Object} Returns the initialized clone.
       */
      function initCloneObject(object) {
        return (typeof object.constructor == 'function' && !isPrototype(object))
          ? baseCreate(getPrototype(object))
          : {};
      }

      /**
       * Initializes an object clone based on its `toStringTag`.
       *
       * **Note:** This function only supports cloning values with tags of
       * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
       *
       * @private
       * @param {Object} object The object to clone.
       * @param {string} tag The `toStringTag` of the object to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the initialized clone.
       */
      function initCloneByTag(object, tag, isDeep) {
        var Ctor = object.constructor;
        switch (tag) {
          case arrayBufferTag:
            return cloneArrayBuffer(object);

          case boolTag:
          case dateTag:
            return new Ctor(+object);

          case dataViewTag:
            return cloneDataView(object, isDeep);

          case float32Tag: case float64Tag:
          case int8Tag: case int16Tag: case int32Tag:
          case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
            return cloneTypedArray(object, isDeep);

          case mapTag:
            return new Ctor;

          case numberTag:
          case stringTag:
            return new Ctor(object);

          case regexpTag:
            return cloneRegExp(object);

          case setTag:
            return new Ctor;

          case symbolTag:
            return cloneSymbol(object);
        }
      }

      /**
       * Inserts wrapper `details` in a comment at the top of the `source` body.
       *
       * @private
       * @param {string} source The source to modify.
       * @returns {Array} details The details to insert.
       * @returns {string} Returns the modified source.
       */
      function insertWrapDetails(source, details) {
        var length = details.length;
        if (!length) {
          return source;
        }
        var lastIndex = length - 1;
        details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
        details = details.join(length > 2 ? ', ' : ' ');
        return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
      }

      /**
       * Checks if `value` is a flattenable `arguments` object or array.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
       */
      function isFlattenable(value) {
        return isArray(value) || isArguments(value) ||
          !!(spreadableSymbol && value && value[spreadableSymbol]);
      }

      /**
       * Checks if `value` is a valid array-like index.
       *
       * @private
       * @param {*} value The value to check.
       * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
       * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
       */
      function isIndex(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER : length;

        return !!length &&
          (type == 'number' ||
            (type != 'symbol' && reIsUint.test(value))) &&
              (value > -1 && value % 1 == 0 && value < length);
      }

      /**
       * Checks if the given arguments are from an iteratee call.
       *
       * @private
       * @param {*} value The potential iteratee value argument.
       * @param {*} index The potential iteratee index or key argument.
       * @param {*} object The potential iteratee object argument.
       * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
       *  else `false`.
       */
      function isIterateeCall(value, index, object) {
        if (!isObject(object)) {
          return false;
        }
        var type = typeof index;
        if (type == 'number'
              ? (isArrayLike(object) && isIndex(index, object.length))
              : (type == 'string' && index in object)
            ) {
          return eq(object[index], value);
        }
        return false;
      }

      /**
       * Checks if `value` is a property name and not a property path.
       *
       * @private
       * @param {*} value The value to check.
       * @param {Object} [object] The object to query keys on.
       * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
       */
      function isKey(value, object) {
        if (isArray(value)) {
          return false;
        }
        var type = typeof value;
        if (type == 'number' || type == 'symbol' || type == 'boolean' ||
            value == null || isSymbol(value)) {
          return true;
        }
        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
          (object != null && value in Object(object));
      }

      /**
       * Checks if `value` is suitable for use as unique object key.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
       */
      function isKeyable(value) {
        var type = typeof value;
        return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
          ? (value !== '__proto__')
          : (value === null);
      }

      /**
       * Checks if `func` has a lazy counterpart.
       *
       * @private
       * @param {Function} func The function to check.
       * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
       *  else `false`.
       */
      function isLaziable(func) {
        var funcName = getFuncName(func),
            other = lodash[funcName];

        if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
          return false;
        }
        if (func === other) {
          return true;
        }
        var data = getData(other);
        return !!data && func === data[0];
      }

      /**
       * Checks if `func` has its source masked.
       *
       * @private
       * @param {Function} func The function to check.
       * @returns {boolean} Returns `true` if `func` is masked, else `false`.
       */
      function isMasked(func) {
        return !!maskSrcKey && (maskSrcKey in func);
      }

      /**
       * Checks if `func` is capable of being masked.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
       */
      var isMaskable = coreJsData ? isFunction : stubFalse;

      /**
       * Checks if `value` is likely a prototype object.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
       */
      function isPrototype(value) {
        var Ctor = value && value.constructor,
            proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

        return value === proto;
      }

      /**
       * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` if suitable for strict
       *  equality comparisons, else `false`.
       */
      function isStrictComparable(value) {
        return value === value && !isObject(value);
      }

      /**
       * A specialized version of `matchesProperty` for source values suitable
       * for strict equality comparisons, i.e. `===`.
       *
       * @private
       * @param {string} key The key of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       */
      function matchesStrictComparable(key, srcValue) {
        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === srcValue &&
            (srcValue !== undefined$1 || (key in Object(object)));
        };
      }

      /**
       * A specialized version of `_.memoize` which clears the memoized function's
       * cache when it exceeds `MAX_MEMOIZE_SIZE`.
       *
       * @private
       * @param {Function} func The function to have its output memoized.
       * @returns {Function} Returns the new memoized function.
       */
      function memoizeCapped(func) {
        var result = memoize(func, function(key) {
          if (cache.size === MAX_MEMOIZE_SIZE) {
            cache.clear();
          }
          return key;
        });

        var cache = result.cache;
        return result;
      }

      /**
       * Merges the function metadata of `source` into `data`.
       *
       * Merging metadata reduces the number of wrappers used to invoke a function.
       * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
       * may be applied regardless of execution order. Methods like `_.ary` and
       * `_.rearg` modify function arguments, making the order in which they are
       * executed important, preventing the merging of metadata. However, we make
       * an exception for a safe combined case where curried functions have `_.ary`
       * and or `_.rearg` applied.
       *
       * @private
       * @param {Array} data The destination metadata.
       * @param {Array} source The source metadata.
       * @returns {Array} Returns `data`.
       */
      function mergeData(data, source) {
        var bitmask = data[1],
            srcBitmask = source[1],
            newBitmask = bitmask | srcBitmask,
            isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

        var isCombo =
          ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
          ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
          ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

        // Exit early if metadata can't be merged.
        if (!(isCommon || isCombo)) {
          return data;
        }
        // Use source `thisArg` if available.
        if (srcBitmask & WRAP_BIND_FLAG) {
          data[2] = source[2];
          // Set when currying a bound function.
          newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
        }
        // Compose partial arguments.
        var value = source[3];
        if (value) {
          var partials = data[3];
          data[3] = partials ? composeArgs(partials, value, source[4]) : value;
          data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
        }
        // Compose partial right arguments.
        value = source[5];
        if (value) {
          partials = data[5];
          data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
          data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
        }
        // Use source `argPos` if available.
        value = source[7];
        if (value) {
          data[7] = value;
        }
        // Use source `ary` if it's smaller.
        if (srcBitmask & WRAP_ARY_FLAG) {
          data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
        }
        // Use source `arity` if one is not provided.
        if (data[9] == null) {
          data[9] = source[9];
        }
        // Use source `func` and merge bitmasks.
        data[0] = source[0];
        data[1] = newBitmask;

        return data;
      }

      /**
       * This function is like
       * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
       * except that it includes inherited enumerable properties.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */
      function nativeKeysIn(object) {
        var result = [];
        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }
        return result;
      }

      /**
       * Converts `value` to a string using `Object.prototype.toString`.
       *
       * @private
       * @param {*} value The value to convert.
       * @returns {string} Returns the converted string.
       */
      function objectToString(value) {
        return nativeObjectToString.call(value);
      }

      /**
       * A specialized version of `baseRest` which transforms the rest array.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @param {Function} transform The rest array transform.
       * @returns {Function} Returns the new function.
       */
      function overRest(func, start, transform) {
        start = nativeMax(start === undefined$1 ? (func.length - 1) : start, 0);
        return function() {
          var args = arguments,
              index = -1,
              length = nativeMax(args.length - start, 0),
              array = Array(length);

          while (++index < length) {
            array[index] = args[start + index];
          }
          index = -1;
          var otherArgs = Array(start + 1);
          while (++index < start) {
            otherArgs[index] = args[index];
          }
          otherArgs[start] = transform(array);
          return apply(func, this, otherArgs);
        };
      }

      /**
       * Gets the parent value at `path` of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array} path The path to get the parent value of.
       * @returns {*} Returns the parent value.
       */
      function parent(object, path) {
        return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
      }

      /**
       * Reorder `array` according to the specified indexes where the element at
       * the first index is assigned as the first element, the element at
       * the second index is assigned as the second element, and so on.
       *
       * @private
       * @param {Array} array The array to reorder.
       * @param {Array} indexes The arranged array indexes.
       * @returns {Array} Returns `array`.
       */
      function reorder(array, indexes) {
        var arrLength = array.length,
            length = nativeMin(indexes.length, arrLength),
            oldArray = copyArray(array);

        while (length--) {
          var index = indexes[length];
          array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
        }
        return array;
      }

      /**
       * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
       *
       * @private
       * @param {Object} object The object to query.
       * @param {string} key The key of the property to get.
       * @returns {*} Returns the property value.
       */
      function safeGet(object, key) {
        if (key === 'constructor' && typeof object[key] === 'function') {
          return;
        }

        if (key == '__proto__') {
          return;
        }

        return object[key];
      }

      /**
       * Sets metadata for `func`.
       *
       * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
       * period of time, it will trip its breaker and transition to an identity
       * function to avoid garbage collection pauses in V8. See
       * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
       * for more details.
       *
       * @private
       * @param {Function} func The function to associate metadata with.
       * @param {*} data The metadata.
       * @returns {Function} Returns `func`.
       */
      var setData = shortOut(baseSetData);

      /**
       * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
       *
       * @private
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @returns {number|Object} Returns the timer id or timeout object.
       */
      var setTimeout = ctxSetTimeout || function(func, wait) {
        return root.setTimeout(func, wait);
      };

      /**
       * Sets the `toString` method of `func` to return `string`.
       *
       * @private
       * @param {Function} func The function to modify.
       * @param {Function} string The `toString` result.
       * @returns {Function} Returns `func`.
       */
      var setToString = shortOut(baseSetToString);

      /**
       * Sets the `toString` method of `wrapper` to mimic the source of `reference`
       * with wrapper details in a comment at the top of the source body.
       *
       * @private
       * @param {Function} wrapper The function to modify.
       * @param {Function} reference The reference function.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @returns {Function} Returns `wrapper`.
       */
      function setWrapToString(wrapper, reference, bitmask) {
        var source = (reference + '');
        return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
      }

      /**
       * Creates a function that'll short out and invoke `identity` instead
       * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
       * milliseconds.
       *
       * @private
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new shortable function.
       */
      function shortOut(func) {
        var count = 0,
            lastCalled = 0;

        return function() {
          var stamp = nativeNow(),
              remaining = HOT_SPAN - (stamp - lastCalled);

          lastCalled = stamp;
          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }
          return func.apply(undefined$1, arguments);
        };
      }

      /**
       * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
       *
       * @private
       * @param {Array} array The array to shuffle.
       * @param {number} [size=array.length] The size of `array`.
       * @returns {Array} Returns `array`.
       */
      function shuffleSelf(array, size) {
        var index = -1,
            length = array.length,
            lastIndex = length - 1;

        size = size === undefined$1 ? length : size;
        while (++index < size) {
          var rand = baseRandom(index, lastIndex),
              value = array[rand];

          array[rand] = array[index];
          array[index] = value;
        }
        array.length = size;
        return array;
      }

      /**
       * Converts `string` to a property path array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the property path array.
       */
      var stringToPath = memoizeCapped(function(string) {
        var result = [];
        if (string.charCodeAt(0) === 46 /* . */) {
          result.push('');
        }
        string.replace(rePropName, function(match, number, quote, subString) {
          result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
        });
        return result;
      });

      /**
       * Converts `value` to a string key if it's not a string or symbol.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {string|symbol} Returns the key.
       */
      function toKey(value) {
        if (typeof value == 'string' || isSymbol(value)) {
          return value;
        }
        var result = (value + '');
        return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
      }

      /**
       * Converts `func` to its source code.
       *
       * @private
       * @param {Function} func The function to convert.
       * @returns {string} Returns the source code.
       */
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {}
          try {
            return (func + '');
          } catch (e) {}
        }
        return '';
      }

      /**
       * Updates wrapper `details` based on `bitmask` flags.
       *
       * @private
       * @returns {Array} details The details to modify.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @returns {Array} Returns `details`.
       */
      function updateWrapDetails(details, bitmask) {
        arrayEach(wrapFlags, function(pair) {
          var value = '_.' + pair[0];
          if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
            details.push(value);
          }
        });
        return details.sort();
      }

      /**
       * Creates a clone of `wrapper`.
       *
       * @private
       * @param {Object} wrapper The wrapper to clone.
       * @returns {Object} Returns the cloned wrapper.
       */
      function wrapperClone(wrapper) {
        if (wrapper instanceof LazyWrapper) {
          return wrapper.clone();
        }
        var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
        result.__actions__ = copyArray(wrapper.__actions__);
        result.__index__  = wrapper.__index__;
        result.__values__ = wrapper.__values__;
        return result;
      }

      /*------------------------------------------------------------------------*/

      /**
       * Creates an array of elements split into groups the length of `size`.
       * If `array` can't be split evenly, the final chunk will be the remaining
       * elements.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to process.
       * @param {number} [size=1] The length of each chunk
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the new array of chunks.
       * @example
       *
       * _.chunk(['a', 'b', 'c', 'd'], 2);
       * // => [['a', 'b'], ['c', 'd']]
       *
       * _.chunk(['a', 'b', 'c', 'd'], 3);
       * // => [['a', 'b', 'c'], ['d']]
       */
      function chunk(array, size, guard) {
        if ((guard ? isIterateeCall(array, size, guard) : size === undefined$1)) {
          size = 1;
        } else {
          size = nativeMax(toInteger(size), 0);
        }
        var length = array == null ? 0 : array.length;
        if (!length || size < 1) {
          return [];
        }
        var index = 0,
            resIndex = 0,
            result = Array(nativeCeil(length / size));

        while (index < length) {
          result[resIndex++] = baseSlice(array, index, (index += size));
        }
        return result;
      }

      /**
       * Creates an array with all falsey values removed. The values `false`, `null`,
       * `0`, `""`, `undefined`, and `NaN` are falsey.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to compact.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.compact([0, 1, false, 2, '', 3]);
       * // => [1, 2, 3]
       */
      function compact(array) {
        var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index];
          if (value) {
            result[resIndex++] = value;
          }
        }
        return result;
      }

      /**
       * Creates a new array concatenating `array` with any additional arrays
       * and/or values.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to concatenate.
       * @param {...*} [values] The values to concatenate.
       * @returns {Array} Returns the new concatenated array.
       * @example
       *
       * var array = [1];
       * var other = _.concat(array, 2, [3], [[4]]);
       *
       * console.log(other);
       * // => [1, 2, 3, [4]]
       *
       * console.log(array);
       * // => [1]
       */
      function concat() {
        var arguments$1 = arguments;

        var length = arguments.length;
        if (!length) {
          return [];
        }
        var args = Array(length - 1),
            array = arguments[0],
            index = length;

        while (index--) {
          args[index - 1] = arguments$1[index];
        }
        return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
      }

      /**
       * Creates an array of `array` values not included in the other given arrays
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons. The order and references of result values are
       * determined by the first array.
       *
       * **Note:** Unlike `_.pullAll`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...Array} [values] The values to exclude.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.without, _.xor
       * @example
       *
       * _.difference([2, 1], [2, 3]);
       * // => [1]
       */
      var difference = baseRest(function(array, values) {
        return isArrayLikeObject(array)
          ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
          : [];
      });

      /**
       * This method is like `_.difference` except that it accepts `iteratee` which
       * is invoked for each element of `array` and `values` to generate the criterion
       * by which they're compared. The order and references of result values are
       * determined by the first array. The iteratee is invoked with one argument:
       * (value).
       *
       * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...Array} [values] The values to exclude.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
       * // => [1.2]
       *
       * // The `_.property` iteratee shorthand.
       * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
       * // => [{ 'x': 2 }]
       */
      var differenceBy = baseRest(function(array, values) {
        var iteratee = last(values);
        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined$1;
        }
        return isArrayLikeObject(array)
          ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
          : [];
      });

      /**
       * This method is like `_.difference` except that it accepts `comparator`
       * which is invoked to compare elements of `array` to `values`. The order and
       * references of result values are determined by the first array. The comparator
       * is invoked with two arguments: (arrVal, othVal).
       *
       * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...Array} [values] The values to exclude.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       *
       * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
       * // => [{ 'x': 2, 'y': 1 }]
       */
      var differenceWith = baseRest(function(array, values) {
        var comparator = last(values);
        if (isArrayLikeObject(comparator)) {
          comparator = undefined$1;
        }
        return isArrayLikeObject(array)
          ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined$1, comparator)
          : [];
      });

      /**
       * Creates a slice of `array` with `n` elements dropped from the beginning.
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to drop.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.drop([1, 2, 3]);
       * // => [2, 3]
       *
       * _.drop([1, 2, 3], 2);
       * // => [3]
       *
       * _.drop([1, 2, 3], 5);
       * // => []
       *
       * _.drop([1, 2, 3], 0);
       * // => [1, 2, 3]
       */
      function drop(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = (guard || n === undefined$1) ? 1 : toInteger(n);
        return baseSlice(array, n < 0 ? 0 : n, length);
      }

      /**
       * Creates a slice of `array` with `n` elements dropped from the end.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to drop.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.dropRight([1, 2, 3]);
       * // => [1, 2]
       *
       * _.dropRight([1, 2, 3], 2);
       * // => [1]
       *
       * _.dropRight([1, 2, 3], 5);
       * // => []
       *
       * _.dropRight([1, 2, 3], 0);
       * // => [1, 2, 3]
       */
      function dropRight(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = (guard || n === undefined$1) ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }

      /**
       * Creates a slice of `array` excluding elements dropped from the end.
       * Elements are dropped until `predicate` returns falsey. The predicate is
       * invoked with three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * _.dropRightWhile(users, function(o) { return !o.active; });
       * // => objects for ['barney']
       *
       * // The `_.matches` iteratee shorthand.
       * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
       * // => objects for ['barney', 'fred']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.dropRightWhile(users, ['active', false]);
       * // => objects for ['barney']
       *
       * // The `_.property` iteratee shorthand.
       * _.dropRightWhile(users, 'active');
       * // => objects for ['barney', 'fred', 'pebbles']
       */
      function dropRightWhile(array, predicate) {
        return (array && array.length)
          ? baseWhile(array, getIteratee(predicate, 3), true, true)
          : [];
      }

      /**
       * Creates a slice of `array` excluding elements dropped from the beginning.
       * Elements are dropped until `predicate` returns falsey. The predicate is
       * invoked with three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * _.dropWhile(users, function(o) { return !o.active; });
       * // => objects for ['pebbles']
       *
       * // The `_.matches` iteratee shorthand.
       * _.dropWhile(users, { 'user': 'barney', 'active': false });
       * // => objects for ['fred', 'pebbles']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.dropWhile(users, ['active', false]);
       * // => objects for ['pebbles']
       *
       * // The `_.property` iteratee shorthand.
       * _.dropWhile(users, 'active');
       * // => objects for ['barney', 'fred', 'pebbles']
       */
      function dropWhile(array, predicate) {
        return (array && array.length)
          ? baseWhile(array, getIteratee(predicate, 3), true)
          : [];
      }

      /**
       * Fills elements of `array` with `value` from `start` up to, but not
       * including, `end`.
       *
       * **Note:** This method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 3.2.0
       * @category Array
       * @param {Array} array The array to fill.
       * @param {*} value The value to fill `array` with.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _.fill(array, 'a');
       * console.log(array);
       * // => ['a', 'a', 'a']
       *
       * _.fill(Array(3), 2);
       * // => [2, 2, 2]
       *
       * _.fill([4, 6, 8, 10], '*', 1, 3);
       * // => [4, '*', '*', 10]
       */
      function fill(array, value, start, end) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
          start = 0;
          end = length;
        }
        return baseFill(array, value, start, end);
      }

      /**
       * This method is like `_.find` except that it returns the index of the first
       * element `predicate` returns truthy for instead of the element itself.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=0] The index to search from.
       * @returns {number} Returns the index of the found element, else `-1`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * _.findIndex(users, function(o) { return o.user == 'barney'; });
       * // => 0
       *
       * // The `_.matches` iteratee shorthand.
       * _.findIndex(users, { 'user': 'fred', 'active': false });
       * // => 1
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findIndex(users, ['active', false]);
       * // => 0
       *
       * // The `_.property` iteratee shorthand.
       * _.findIndex(users, 'active');
       * // => 2
       */
      function findIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index < 0) {
          index = nativeMax(length + index, 0);
        }
        return baseFindIndex(array, getIteratee(predicate, 3), index);
      }

      /**
       * This method is like `_.findIndex` except that it iterates over elements
       * of `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=array.length-1] The index to search from.
       * @returns {number} Returns the index of the found element, else `-1`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
       * // => 2
       *
       * // The `_.matches` iteratee shorthand.
       * _.findLastIndex(users, { 'user': 'barney', 'active': true });
       * // => 0
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findLastIndex(users, ['active', false]);
       * // => 2
       *
       * // The `_.property` iteratee shorthand.
       * _.findLastIndex(users, 'active');
       * // => 0
       */
      function findLastIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = length - 1;
        if (fromIndex !== undefined$1) {
          index = toInteger(fromIndex);
          index = fromIndex < 0
            ? nativeMax(length + index, 0)
            : nativeMin(index, length - 1);
        }
        return baseFindIndex(array, getIteratee(predicate, 3), index, true);
      }

      /**
       * Flattens `array` a single level deep.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to flatten.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * _.flatten([1, [2, [3, [4]], 5]]);
       * // => [1, 2, [3, [4]], 5]
       */
      function flatten(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, 1) : [];
      }

      /**
       * Recursively flattens `array`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to flatten.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * _.flattenDeep([1, [2, [3, [4]], 5]]);
       * // => [1, 2, 3, 4, 5]
       */
      function flattenDeep(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, INFINITY) : [];
      }

      /**
       * Recursively flatten `array` up to `depth` times.
       *
       * @static
       * @memberOf _
       * @since 4.4.0
       * @category Array
       * @param {Array} array The array to flatten.
       * @param {number} [depth=1] The maximum recursion depth.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * var array = [1, [2, [3, [4]], 5]];
       *
       * _.flattenDepth(array, 1);
       * // => [1, 2, [3, [4]], 5]
       *
       * _.flattenDepth(array, 2);
       * // => [1, 2, 3, [4], 5]
       */
      function flattenDepth(array, depth) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        depth = depth === undefined$1 ? 1 : toInteger(depth);
        return baseFlatten(array, depth);
      }

      /**
       * The inverse of `_.toPairs`; this method returns an object composed
       * from key-value `pairs`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} pairs The key-value pairs.
       * @returns {Object} Returns the new object.
       * @example
       *
       * _.fromPairs([['a', 1], ['b', 2]]);
       * // => { 'a': 1, 'b': 2 }
       */
      function fromPairs(pairs) {
        var index = -1,
            length = pairs == null ? 0 : pairs.length,
            result = {};

        while (++index < length) {
          var pair = pairs[index];
          result[pair[0]] = pair[1];
        }
        return result;
      }

      /**
       * Gets the first element of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @alias first
       * @category Array
       * @param {Array} array The array to query.
       * @returns {*} Returns the first element of `array`.
       * @example
       *
       * _.head([1, 2, 3]);
       * // => 1
       *
       * _.head([]);
       * // => undefined
       */
      function head(array) {
        return (array && array.length) ? array[0] : undefined$1;
      }

      /**
       * Gets the index at which the first occurrence of `value` is found in `array`
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons. If `fromIndex` is negative, it's used as the
       * offset from the end of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} [fromIndex=0] The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.indexOf([1, 2, 1, 2], 2);
       * // => 1
       *
       * // Search from the `fromIndex`.
       * _.indexOf([1, 2, 1, 2], 2, 2);
       * // => 3
       */
      function indexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index < 0) {
          index = nativeMax(length + index, 0);
        }
        return baseIndexOf(array, value, index);
      }

      /**
       * Gets all but the last element of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to query.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.initial([1, 2, 3]);
       * // => [1, 2]
       */
      function initial(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 0, -1) : [];
      }

      /**
       * Creates an array of unique values that are included in all given arrays
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons. The order and references of result values are
       * determined by the first array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of intersecting values.
       * @example
       *
       * _.intersection([2, 1], [2, 3]);
       * // => [2]
       */
      var intersection = baseRest(function(arrays) {
        var mapped = arrayMap(arrays, castArrayLikeObject);
        return (mapped.length && mapped[0] === arrays[0])
          ? baseIntersection(mapped)
          : [];
      });

      /**
       * This method is like `_.intersection` except that it accepts `iteratee`
       * which is invoked for each element of each `arrays` to generate the criterion
       * by which they're compared. The order and references of result values are
       * determined by the first array. The iteratee is invoked with one argument:
       * (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of intersecting values.
       * @example
       *
       * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
       * // => [2.1]
       *
       * // The `_.property` iteratee shorthand.
       * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 1 }]
       */
      var intersectionBy = baseRest(function(arrays) {
        var iteratee = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);

        if (iteratee === last(mapped)) {
          iteratee = undefined$1;
        } else {
          mapped.pop();
        }
        return (mapped.length && mapped[0] === arrays[0])
          ? baseIntersection(mapped, getIteratee(iteratee, 2))
          : [];
      });

      /**
       * This method is like `_.intersection` except that it accepts `comparator`
       * which is invoked to compare elements of `arrays`. The order and references
       * of result values are determined by the first array. The comparator is
       * invoked with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of intersecting values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.intersectionWith(objects, others, _.isEqual);
       * // => [{ 'x': 1, 'y': 2 }]
       */
      var intersectionWith = baseRest(function(arrays) {
        var comparator = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);

        comparator = typeof comparator == 'function' ? comparator : undefined$1;
        if (comparator) {
          mapped.pop();
        }
        return (mapped.length && mapped[0] === arrays[0])
          ? baseIntersection(mapped, undefined$1, comparator)
          : [];
      });

      /**
       * Converts all elements in `array` into a string separated by `separator`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to convert.
       * @param {string} [separator=','] The element separator.
       * @returns {string} Returns the joined string.
       * @example
       *
       * _.join(['a', 'b', 'c'], '~');
       * // => 'a~b~c'
       */
      function join(array, separator) {
        return array == null ? '' : nativeJoin.call(array, separator);
      }

      /**
       * Gets the last element of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to query.
       * @returns {*} Returns the last element of `array`.
       * @example
       *
       * _.last([1, 2, 3]);
       * // => 3
       */
      function last(array) {
        var length = array == null ? 0 : array.length;
        return length ? array[length - 1] : undefined$1;
      }

      /**
       * This method is like `_.indexOf` except that it iterates over elements of
       * `array` from right to left.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} [fromIndex=array.length-1] The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.lastIndexOf([1, 2, 1, 2], 2);
       * // => 3
       *
       * // Search from the `fromIndex`.
       * _.lastIndexOf([1, 2, 1, 2], 2, 2);
       * // => 1
       */
      function lastIndexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = length;
        if (fromIndex !== undefined$1) {
          index = toInteger(fromIndex);
          index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
        }
        return value === value
          ? strictLastIndexOf(array, value, index)
          : baseFindIndex(array, baseIsNaN, index, true);
      }

      /**
       * Gets the element at index `n` of `array`. If `n` is negative, the nth
       * element from the end is returned.
       *
       * @static
       * @memberOf _
       * @since 4.11.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=0] The index of the element to return.
       * @returns {*} Returns the nth element of `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'd'];
       *
       * _.nth(array, 1);
       * // => 'b'
       *
       * _.nth(array, -2);
       * // => 'c';
       */
      function nth(array, n) {
        return (array && array.length) ? baseNth(array, toInteger(n)) : undefined$1;
      }

      /**
       * Removes all given values from `array` using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
       * to remove elements from an array by predicate.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {...*} [values] The values to remove.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
       *
       * _.pull(array, 'a', 'c');
       * console.log(array);
       * // => ['b', 'b']
       */
      var pull = baseRest(pullAll);

      /**
       * This method is like `_.pull` except that it accepts an array of values to remove.
       *
       * **Note:** Unlike `_.difference`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
       *
       * _.pullAll(array, ['a', 'c']);
       * console.log(array);
       * // => ['b', 'b']
       */
      function pullAll(array, values) {
        return (array && array.length && values && values.length)
          ? basePullAll(array, values)
          : array;
      }

      /**
       * This method is like `_.pullAll` except that it accepts `iteratee` which is
       * invoked for each element of `array` and `values` to generate the criterion
       * by which they're compared. The iteratee is invoked with one argument: (value).
       *
       * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
       *
       * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
       * console.log(array);
       * // => [{ 'x': 2 }]
       */
      function pullAllBy(array, values, iteratee) {
        return (array && array.length && values && values.length)
          ? basePullAll(array, values, getIteratee(iteratee, 2))
          : array;
      }

      /**
       * This method is like `_.pullAll` except that it accepts `comparator` which
       * is invoked to compare elements of `array` to `values`. The comparator is
       * invoked with two arguments: (arrVal, othVal).
       *
       * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 4.6.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
       *
       * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
       * console.log(array);
       * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
       */
      function pullAllWith(array, values, comparator) {
        return (array && array.length && values && values.length)
          ? basePullAll(array, values, undefined$1, comparator)
          : array;
      }

      /**
       * Removes elements from `array` corresponding to `indexes` and returns an
       * array of removed elements.
       *
       * **Note:** Unlike `_.at`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {...(number|number[])} [indexes] The indexes of elements to remove.
       * @returns {Array} Returns the new array of removed elements.
       * @example
       *
       * var array = ['a', 'b', 'c', 'd'];
       * var pulled = _.pullAt(array, [1, 3]);
       *
       * console.log(array);
       * // => ['a', 'c']
       *
       * console.log(pulled);
       * // => ['b', 'd']
       */
      var pullAt = flatRest(function(array, indexes) {
        var length = array == null ? 0 : array.length,
            result = baseAt(array, indexes);

        basePullAt(array, arrayMap(indexes, function(index) {
          return isIndex(index, length) ? +index : index;
        }).sort(compareAscending));

        return result;
      });

      /**
       * Removes all elements from `array` that `predicate` returns truthy for
       * and returns an array of the removed elements. The predicate is invoked
       * with three arguments: (value, index, array).
       *
       * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
       * to pull elements from an array by value.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new array of removed elements.
       * @example
       *
       * var array = [1, 2, 3, 4];
       * var evens = _.remove(array, function(n) {
       *   return n % 2 == 0;
       * });
       *
       * console.log(array);
       * // => [1, 3]
       *
       * console.log(evens);
       * // => [2, 4]
       */
      function remove(array, predicate) {
        var result = [];
        if (!(array && array.length)) {
          return result;
        }
        var index = -1,
            indexes = [],
            length = array.length;

        predicate = getIteratee(predicate, 3);
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result.push(value);
            indexes.push(index);
          }
        }
        basePullAt(array, indexes);
        return result;
      }

      /**
       * Reverses `array` so that the first element becomes the last, the second
       * element becomes the second to last, and so on.
       *
       * **Note:** This method mutates `array` and is based on
       * [`Array#reverse`](https://mdn.io/Array/reverse).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _.reverse(array);
       * // => [3, 2, 1]
       *
       * console.log(array);
       * // => [3, 2, 1]
       */
      function reverse(array) {
        return array == null ? array : nativeReverse.call(array);
      }

      /**
       * Creates a slice of `array` from `start` up to, but not including, `end`.
       *
       * **Note:** This method is used instead of
       * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
       * returned.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to slice.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the slice of `array`.
       */
      function slice(array, start, end) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
          start = 0;
          end = length;
        }
        else {
          start = start == null ? 0 : toInteger(start);
          end = end === undefined$1 ? length : toInteger(end);
        }
        return baseSlice(array, start, end);
      }

      /**
       * Uses a binary search to determine the lowest index at which `value`
       * should be inserted into `array` in order to maintain its sort order.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * _.sortedIndex([30, 50], 40);
       * // => 1
       */
      function sortedIndex(array, value) {
        return baseSortedIndex(array, value);
      }

      /**
       * This method is like `_.sortedIndex` except that it accepts `iteratee`
       * which is invoked for `value` and each element of `array` to compute their
       * sort ranking. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * var objects = [{ 'x': 4 }, { 'x': 5 }];
       *
       * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
       * // => 0
       *
       * // The `_.property` iteratee shorthand.
       * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
       * // => 0
       */
      function sortedIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
      }

      /**
       * This method is like `_.indexOf` except that it performs a binary
       * search on a sorted `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
       * // => 1
       */
      function sortedIndexOf(array, value) {
        var length = array == null ? 0 : array.length;
        if (length) {
          var index = baseSortedIndex(array, value);
          if (index < length && eq(array[index], value)) {
            return index;
          }
        }
        return -1;
      }

      /**
       * This method is like `_.sortedIndex` except that it returns the highest
       * index at which `value` should be inserted into `array` in order to
       * maintain its sort order.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
       * // => 4
       */
      function sortedLastIndex(array, value) {
        return baseSortedIndex(array, value, true);
      }

      /**
       * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
       * which is invoked for `value` and each element of `array` to compute their
       * sort ranking. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * var objects = [{ 'x': 4 }, { 'x': 5 }];
       *
       * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
       * // => 1
       *
       * // The `_.property` iteratee shorthand.
       * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
       * // => 1
       */
      function sortedLastIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
      }

      /**
       * This method is like `_.lastIndexOf` except that it performs a binary
       * search on a sorted `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
       * // => 3
       */
      function sortedLastIndexOf(array, value) {
        var length = array == null ? 0 : array.length;
        if (length) {
          var index = baseSortedIndex(array, value, true) - 1;
          if (eq(array[index], value)) {
            return index;
          }
        }
        return -1;
      }

      /**
       * This method is like `_.uniq` except that it's designed and optimized
       * for sorted arrays.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.sortedUniq([1, 1, 2]);
       * // => [1, 2]
       */
      function sortedUniq(array) {
        return (array && array.length)
          ? baseSortedUniq(array)
          : [];
      }

      /**
       * This method is like `_.uniqBy` except that it's designed and optimized
       * for sorted arrays.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
       * // => [1.1, 2.3]
       */
      function sortedUniqBy(array, iteratee) {
        return (array && array.length)
          ? baseSortedUniq(array, getIteratee(iteratee, 2))
          : [];
      }

      /**
       * Gets all but the first element of `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.tail([1, 2, 3]);
       * // => [2, 3]
       */
      function tail(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 1, length) : [];
      }

      /**
       * Creates a slice of `array` with `n` elements taken from the beginning.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to take.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.take([1, 2, 3]);
       * // => [1]
       *
       * _.take([1, 2, 3], 2);
       * // => [1, 2]
       *
       * _.take([1, 2, 3], 5);
       * // => [1, 2, 3]
       *
       * _.take([1, 2, 3], 0);
       * // => []
       */
      function take(array, n, guard) {
        if (!(array && array.length)) {
          return [];
        }
        n = (guard || n === undefined$1) ? 1 : toInteger(n);
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }

      /**
       * Creates a slice of `array` with `n` elements taken from the end.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to take.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.takeRight([1, 2, 3]);
       * // => [3]
       *
       * _.takeRight([1, 2, 3], 2);
       * // => [2, 3]
       *
       * _.takeRight([1, 2, 3], 5);
       * // => [1, 2, 3]
       *
       * _.takeRight([1, 2, 3], 0);
       * // => []
       */
      function takeRight(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = (guard || n === undefined$1) ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, n < 0 ? 0 : n, length);
      }

      /**
       * Creates a slice of `array` with elements taken from the end. Elements are
       * taken until `predicate` returns falsey. The predicate is invoked with
       * three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * _.takeRightWhile(users, function(o) { return !o.active; });
       * // => objects for ['fred', 'pebbles']
       *
       * // The `_.matches` iteratee shorthand.
       * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
       * // => objects for ['pebbles']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.takeRightWhile(users, ['active', false]);
       * // => objects for ['fred', 'pebbles']
       *
       * // The `_.property` iteratee shorthand.
       * _.takeRightWhile(users, 'active');
       * // => []
       */
      function takeRightWhile(array, predicate) {
        return (array && array.length)
          ? baseWhile(array, getIteratee(predicate, 3), false, true)
          : [];
      }

      /**
       * Creates a slice of `array` with elements taken from the beginning. Elements
       * are taken until `predicate` returns falsey. The predicate is invoked with
       * three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * _.takeWhile(users, function(o) { return !o.active; });
       * // => objects for ['barney', 'fred']
       *
       * // The `_.matches` iteratee shorthand.
       * _.takeWhile(users, { 'user': 'barney', 'active': false });
       * // => objects for ['barney']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.takeWhile(users, ['active', false]);
       * // => objects for ['barney', 'fred']
       *
       * // The `_.property` iteratee shorthand.
       * _.takeWhile(users, 'active');
       * // => []
       */
      function takeWhile(array, predicate) {
        return (array && array.length)
          ? baseWhile(array, getIteratee(predicate, 3))
          : [];
      }

      /**
       * Creates an array of unique values, in order, from all given arrays using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of combined values.
       * @example
       *
       * _.union([2], [1, 2]);
       * // => [2, 1]
       */
      var union = baseRest(function(arrays) {
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
      });

      /**
       * This method is like `_.union` except that it accepts `iteratee` which is
       * invoked for each element of each `arrays` to generate the criterion by
       * which uniqueness is computed. Result values are chosen from the first
       * array in which the value occurs. The iteratee is invoked with one argument:
       * (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of combined values.
       * @example
       *
       * _.unionBy([2.1], [1.2, 2.3], Math.floor);
       * // => [2.1, 1.2]
       *
       * // The `_.property` iteratee shorthand.
       * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 1 }, { 'x': 2 }]
       */
      var unionBy = baseRest(function(arrays) {
        var iteratee = last(arrays);
        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined$1;
        }
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
      });

      /**
       * This method is like `_.union` except that it accepts `comparator` which
       * is invoked to compare elements of `arrays`. Result values are chosen from
       * the first array in which the value occurs. The comparator is invoked
       * with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of combined values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.unionWith(objects, others, _.isEqual);
       * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
       */
      var unionWith = baseRest(function(arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == 'function' ? comparator : undefined$1;
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
      });

      /**
       * Creates a duplicate-free version of an array, using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons, in which only the first occurrence of each element
       * is kept. The order of result values is determined by the order they occur
       * in the array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.uniq([2, 1, 2]);
       * // => [2, 1]
       */
      function uniq(array) {
        return (array && array.length) ? baseUniq(array) : [];
      }

      /**
       * This method is like `_.uniq` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the criterion by which
       * uniqueness is computed. The order of result values is determined by the
       * order they occur in the array. The iteratee is invoked with one argument:
       * (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
       * // => [2.1, 1.2]
       *
       * // The `_.property` iteratee shorthand.
       * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 1 }, { 'x': 2 }]
       */
      function uniqBy(array, iteratee) {
        return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
      }

      /**
       * This method is like `_.uniq` except that it accepts `comparator` which
       * is invoked to compare elements of `array`. The order of result values is
       * determined by the order they occur in the array.The comparator is invoked
       * with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.uniqWith(objects, _.isEqual);
       * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
       */
      function uniqWith(array, comparator) {
        comparator = typeof comparator == 'function' ? comparator : undefined$1;
        return (array && array.length) ? baseUniq(array, undefined$1, comparator) : [];
      }

      /**
       * This method is like `_.zip` except that it accepts an array of grouped
       * elements and creates an array regrouping the elements to their pre-zip
       * configuration.
       *
       * @static
       * @memberOf _
       * @since 1.2.0
       * @category Array
       * @param {Array} array The array of grouped elements to process.
       * @returns {Array} Returns the new array of regrouped elements.
       * @example
       *
       * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
       * // => [['a', 1, true], ['b', 2, false]]
       *
       * _.unzip(zipped);
       * // => [['a', 'b'], [1, 2], [true, false]]
       */
      function unzip(array) {
        if (!(array && array.length)) {
          return [];
        }
        var length = 0;
        array = arrayFilter(array, function(group) {
          if (isArrayLikeObject(group)) {
            length = nativeMax(group.length, length);
            return true;
          }
        });
        return baseTimes(length, function(index) {
          return arrayMap(array, baseProperty(index));
        });
      }

      /**
       * This method is like `_.unzip` except that it accepts `iteratee` to specify
       * how regrouped values should be combined. The iteratee is invoked with the
       * elements of each group: (...group).
       *
       * @static
       * @memberOf _
       * @since 3.8.0
       * @category Array
       * @param {Array} array The array of grouped elements to process.
       * @param {Function} [iteratee=_.identity] The function to combine
       *  regrouped values.
       * @returns {Array} Returns the new array of regrouped elements.
       * @example
       *
       * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
       * // => [[1, 10, 100], [2, 20, 200]]
       *
       * _.unzipWith(zipped, _.add);
       * // => [3, 30, 300]
       */
      function unzipWith(array, iteratee) {
        if (!(array && array.length)) {
          return [];
        }
        var result = unzip(array);
        if (iteratee == null) {
          return result;
        }
        return arrayMap(result, function(group) {
          return apply(iteratee, undefined$1, group);
        });
      }

      /**
       * Creates an array excluding all given values using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * **Note:** Unlike `_.pull`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...*} [values] The values to exclude.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.difference, _.xor
       * @example
       *
       * _.without([2, 1, 2, 3], 1, 2);
       * // => [3]
       */
      var without = baseRest(function(array, values) {
        return isArrayLikeObject(array)
          ? baseDifference(array, values)
          : [];
      });

      /**
       * Creates an array of unique values that is the
       * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
       * of the given arrays. The order of result values is determined by the order
       * they occur in the arrays.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.difference, _.without
       * @example
       *
       * _.xor([2, 1], [2, 3]);
       * // => [1, 3]
       */
      var xor = baseRest(function(arrays) {
        return baseXor(arrayFilter(arrays, isArrayLikeObject));
      });

      /**
       * This method is like `_.xor` except that it accepts `iteratee` which is
       * invoked for each element of each `arrays` to generate the criterion by
       * which by which they're compared. The order of result values is determined
       * by the order they occur in the arrays. The iteratee is invoked with one
       * argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
       * // => [1.2, 3.4]
       *
       * // The `_.property` iteratee shorthand.
       * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 2 }]
       */
      var xorBy = baseRest(function(arrays) {
        var iteratee = last(arrays);
        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined$1;
        }
        return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
      });

      /**
       * This method is like `_.xor` except that it accepts `comparator` which is
       * invoked to compare elements of `arrays`. The order of result values is
       * determined by the order they occur in the arrays. The comparator is invoked
       * with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.xorWith(objects, others, _.isEqual);
       * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
       */
      var xorWith = baseRest(function(arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == 'function' ? comparator : undefined$1;
        return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
      });

      /**
       * Creates an array of grouped elements, the first of which contains the
       * first elements of the given arrays, the second of which contains the
       * second elements of the given arrays, and so on.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {...Array} [arrays] The arrays to process.
       * @returns {Array} Returns the new array of grouped elements.
       * @example
       *
       * _.zip(['a', 'b'], [1, 2], [true, false]);
       * // => [['a', 1, true], ['b', 2, false]]
       */
      var zip = baseRest(unzip);

      /**
       * This method is like `_.fromPairs` except that it accepts two arrays,
       * one of property identifiers and one of corresponding values.
       *
       * @static
       * @memberOf _
       * @since 0.4.0
       * @category Array
       * @param {Array} [props=[]] The property identifiers.
       * @param {Array} [values=[]] The property values.
       * @returns {Object} Returns the new object.
       * @example
       *
       * _.zipObject(['a', 'b'], [1, 2]);
       * // => { 'a': 1, 'b': 2 }
       */
      function zipObject(props, values) {
        return baseZipObject(props || [], values || [], assignValue);
      }

      /**
       * This method is like `_.zipObject` except that it supports property paths.
       *
       * @static
       * @memberOf _
       * @since 4.1.0
       * @category Array
       * @param {Array} [props=[]] The property identifiers.
       * @param {Array} [values=[]] The property values.
       * @returns {Object} Returns the new object.
       * @example
       *
       * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
       * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
       */
      function zipObjectDeep(props, values) {
        return baseZipObject(props || [], values || [], baseSet);
      }

      /**
       * This method is like `_.zip` except that it accepts `iteratee` to specify
       * how grouped values should be combined. The iteratee is invoked with the
       * elements of each group: (...group).
       *
       * @static
       * @memberOf _
       * @since 3.8.0
       * @category Array
       * @param {...Array} [arrays] The arrays to process.
       * @param {Function} [iteratee=_.identity] The function to combine
       *  grouped values.
       * @returns {Array} Returns the new array of grouped elements.
       * @example
       *
       * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
       *   return a + b + c;
       * });
       * // => [111, 222]
       */
      var zipWith = baseRest(function(arrays) {
        var length = arrays.length,
            iteratee = length > 1 ? arrays[length - 1] : undefined$1;

        iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined$1;
        return unzipWith(arrays, iteratee);
      });

      /*------------------------------------------------------------------------*/

      /**
       * Creates a `lodash` wrapper instance that wraps `value` with explicit method
       * chain sequences enabled. The result of such sequences must be unwrapped
       * with `_#value`.
       *
       * @static
       * @memberOf _
       * @since 1.3.0
       * @category Seq
       * @param {*} value The value to wrap.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36 },
       *   { 'user': 'fred',    'age': 40 },
       *   { 'user': 'pebbles', 'age': 1 }
       * ];
       *
       * var youngest = _
       *   .chain(users)
       *   .sortBy('age')
       *   .map(function(o) {
       *     return o.user + ' is ' + o.age;
       *   })
       *   .head()
       *   .value();
       * // => 'pebbles is 1'
       */
      function chain(value) {
        var result = lodash(value);
        result.__chain__ = true;
        return result;
      }

      /**
       * This method invokes `interceptor` and returns `value`. The interceptor
       * is invoked with one argument; (value). The purpose of this method is to
       * "tap into" a method chain sequence in order to modify intermediate results.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Seq
       * @param {*} value The value to provide to `interceptor`.
       * @param {Function} interceptor The function to invoke.
       * @returns {*} Returns `value`.
       * @example
       *
       * _([1, 2, 3])
       *  .tap(function(array) {
       *    // Mutate input array.
       *    array.pop();
       *  })
       *  .reverse()
       *  .value();
       * // => [2, 1]
       */
      function tap(value, interceptor) {
        interceptor(value);
        return value;
      }

      /**
       * This method is like `_.tap` except that it returns the result of `interceptor`.
       * The purpose of this method is to "pass thru" values replacing intermediate
       * results in a method chain sequence.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Seq
       * @param {*} value The value to provide to `interceptor`.
       * @param {Function} interceptor The function to invoke.
       * @returns {*} Returns the result of `interceptor`.
       * @example
       *
       * _('  abc  ')
       *  .chain()
       *  .trim()
       *  .thru(function(value) {
       *    return [value];
       *  })
       *  .value();
       * // => ['abc']
       */
      function thru(value, interceptor) {
        return interceptor(value);
      }

      /**
       * This method is the wrapper version of `_.at`.
       *
       * @name at
       * @memberOf _
       * @since 1.0.0
       * @category Seq
       * @param {...(string|string[])} [paths] The property paths to pick.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
       *
       * _(object).at(['a[0].b.c', 'a[1]']).value();
       * // => [3, 4]
       */
      var wrapperAt = flatRest(function(paths) {
        var length = paths.length,
            start = length ? paths[0] : 0,
            value = this.__wrapped__,
            interceptor = function(object) { return baseAt(object, paths); };

        if (length > 1 || this.__actions__.length ||
            !(value instanceof LazyWrapper) || !isIndex(start)) {
          return this.thru(interceptor);
        }
        value = value.slice(start, +start + (length ? 1 : 0));
        value.__actions__.push({
          'func': thru,
          'args': [interceptor],
          'thisArg': undefined$1
        });
        return new LodashWrapper(value, this.__chain__).thru(function(array) {
          if (length && !array.length) {
            array.push(undefined$1);
          }
          return array;
        });
      });

      /**
       * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
       *
       * @name chain
       * @memberOf _
       * @since 0.1.0
       * @category Seq
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36 },
       *   { 'user': 'fred',   'age': 40 }
       * ];
       *
       * // A sequence without explicit chaining.
       * _(users).head();
       * // => { 'user': 'barney', 'age': 36 }
       *
       * // A sequence with explicit chaining.
       * _(users)
       *   .chain()
       *   .head()
       *   .pick('user')
       *   .value();
       * // => { 'user': 'barney' }
       */
      function wrapperChain() {
        return chain(this);
      }

      /**
       * Executes the chain sequence and returns the wrapped result.
       *
       * @name commit
       * @memberOf _
       * @since 3.2.0
       * @category Seq
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var array = [1, 2];
       * var wrapped = _(array).push(3);
       *
       * console.log(array);
       * // => [1, 2]
       *
       * wrapped = wrapped.commit();
       * console.log(array);
       * // => [1, 2, 3]
       *
       * wrapped.last();
       * // => 3
       *
       * console.log(array);
       * // => [1, 2, 3]
       */
      function wrapperCommit() {
        return new LodashWrapper(this.value(), this.__chain__);
      }

      /**
       * Gets the next value on a wrapped object following the
       * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
       *
       * @name next
       * @memberOf _
       * @since 4.0.0
       * @category Seq
       * @returns {Object} Returns the next iterator value.
       * @example
       *
       * var wrapped = _([1, 2]);
       *
       * wrapped.next();
       * // => { 'done': false, 'value': 1 }
       *
       * wrapped.next();
       * // => { 'done': false, 'value': 2 }
       *
       * wrapped.next();
       * // => { 'done': true, 'value': undefined }
       */
      function wrapperNext() {
        if (this.__values__ === undefined$1) {
          this.__values__ = toArray(this.value());
        }
        var done = this.__index__ >= this.__values__.length,
            value = done ? undefined$1 : this.__values__[this.__index__++];

        return { 'done': done, 'value': value };
      }

      /**
       * Enables the wrapper to be iterable.
       *
       * @name Symbol.iterator
       * @memberOf _
       * @since 4.0.0
       * @category Seq
       * @returns {Object} Returns the wrapper object.
       * @example
       *
       * var wrapped = _([1, 2]);
       *
       * wrapped[Symbol.iterator]() === wrapped;
       * // => true
       *
       * Array.from(wrapped);
       * // => [1, 2]
       */
      function wrapperToIterator() {
        return this;
      }

      /**
       * Creates a clone of the chain sequence planting `value` as the wrapped value.
       *
       * @name plant
       * @memberOf _
       * @since 3.2.0
       * @category Seq
       * @param {*} value The value to plant.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var wrapped = _([1, 2]).map(square);
       * var other = wrapped.plant([3, 4]);
       *
       * other.value();
       * // => [9, 16]
       *
       * wrapped.value();
       * // => [1, 4]
       */
      function wrapperPlant(value) {
        var result,
            parent = this;

        while (parent instanceof baseLodash) {
          var clone = wrapperClone(parent);
          clone.__index__ = 0;
          clone.__values__ = undefined$1;
          if (result) {
            previous.__wrapped__ = clone;
          } else {
            result = clone;
          }
          var previous = clone;
          parent = parent.__wrapped__;
        }
        previous.__wrapped__ = value;
        return result;
      }

      /**
       * This method is the wrapper version of `_.reverse`.
       *
       * **Note:** This method mutates the wrapped array.
       *
       * @name reverse
       * @memberOf _
       * @since 0.1.0
       * @category Seq
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _(array).reverse().value()
       * // => [3, 2, 1]
       *
       * console.log(array);
       * // => [3, 2, 1]
       */
      function wrapperReverse() {
        var value = this.__wrapped__;
        if (value instanceof LazyWrapper) {
          var wrapped = value;
          if (this.__actions__.length) {
            wrapped = new LazyWrapper(this);
          }
          wrapped = wrapped.reverse();
          wrapped.__actions__.push({
            'func': thru,
            'args': [reverse],
            'thisArg': undefined$1
          });
          return new LodashWrapper(wrapped, this.__chain__);
        }
        return this.thru(reverse);
      }

      /**
       * Executes the chain sequence to resolve the unwrapped value.
       *
       * @name value
       * @memberOf _
       * @since 0.1.0
       * @alias toJSON, valueOf
       * @category Seq
       * @returns {*} Returns the resolved unwrapped value.
       * @example
       *
       * _([1, 2, 3]).value();
       * // => [1, 2, 3]
       */
      function wrapperValue() {
        return baseWrapperValue(this.__wrapped__, this.__actions__);
      }

      /*------------------------------------------------------------------------*/

      /**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` thru `iteratee`. The corresponding value of
       * each key is the number of times the key was returned by `iteratee`. The
       * iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * _.countBy([6.1, 4.2, 6.3], Math.floor);
       * // => { '4': 1, '6': 2 }
       *
       * // The `_.property` iteratee shorthand.
       * _.countBy(['one', 'two', 'three'], 'length');
       * // => { '3': 2, '5': 1 }
       */
      var countBy = createAggregator(function(result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          ++result[key];
        } else {
          baseAssignValue(result, key, 1);
        }
      });

      /**
       * Checks if `predicate` returns truthy for **all** elements of `collection`.
       * Iteration is stopped once `predicate` returns falsey. The predicate is
       * invoked with three arguments: (value, index|key, collection).
       *
       * **Note:** This method returns `true` for
       * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
       * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
       * elements of empty collections.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {boolean} Returns `true` if all elements pass the predicate check,
       *  else `false`.
       * @example
       *
       * _.every([true, 1, null, 'yes'], Boolean);
       * // => false
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': false },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * // The `_.matches` iteratee shorthand.
       * _.every(users, { 'user': 'barney', 'active': false });
       * // => false
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.every(users, ['active', false]);
       * // => true
       *
       * // The `_.property` iteratee shorthand.
       * _.every(users, 'active');
       * // => false
       */
      function every(collection, predicate, guard) {
        var func = isArray(collection) ? arrayEvery : baseEvery;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined$1;
        }
        return func(collection, getIteratee(predicate, 3));
      }

      /**
       * Iterates over elements of `collection`, returning an array of all elements
       * `predicate` returns truthy for. The predicate is invoked with three
       * arguments: (value, index|key, collection).
       *
       * **Note:** Unlike `_.remove`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       * @see _.reject
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': true },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * _.filter(users, function(o) { return !o.active; });
       * // => objects for ['fred']
       *
       * // The `_.matches` iteratee shorthand.
       * _.filter(users, { 'age': 36, 'active': true });
       * // => objects for ['barney']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.filter(users, ['active', false]);
       * // => objects for ['fred']
       *
       * // The `_.property` iteratee shorthand.
       * _.filter(users, 'active');
       * // => objects for ['barney']
       *
       * // Combining several predicates using `_.overEvery` or `_.overSome`.
       * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
       * // => objects for ['fred', 'barney']
       */
      function filter(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, getIteratee(predicate, 3));
      }

      /**
       * Iterates over elements of `collection`, returning the first element
       * `predicate` returns truthy for. The predicate is invoked with three
       * arguments: (value, index|key, collection).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=0] The index to search from.
       * @returns {*} Returns the matched element, else `undefined`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36, 'active': true },
       *   { 'user': 'fred',    'age': 40, 'active': false },
       *   { 'user': 'pebbles', 'age': 1,  'active': true }
       * ];
       *
       * _.find(users, function(o) { return o.age < 40; });
       * // => object for 'barney'
       *
       * // The `_.matches` iteratee shorthand.
       * _.find(users, { 'age': 1, 'active': true });
       * // => object for 'pebbles'
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.find(users, ['active', false]);
       * // => object for 'fred'
       *
       * // The `_.property` iteratee shorthand.
       * _.find(users, 'active');
       * // => object for 'barney'
       */
      var find = createFind(findIndex);

      /**
       * This method is like `_.find` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=collection.length-1] The index to search from.
       * @returns {*} Returns the matched element, else `undefined`.
       * @example
       *
       * _.findLast([1, 2, 3, 4], function(n) {
       *   return n % 2 == 1;
       * });
       * // => 3
       */
      var findLast = createFind(findLastIndex);

      /**
       * Creates a flattened array of values by running each element in `collection`
       * thru `iteratee` and flattening the mapped results. The iteratee is invoked
       * with three arguments: (value, index|key, collection).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * function duplicate(n) {
       *   return [n, n];
       * }
       *
       * _.flatMap([1, 2], duplicate);
       * // => [1, 1, 2, 2]
       */
      function flatMap(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), 1);
      }

      /**
       * This method is like `_.flatMap` except that it recursively flattens the
       * mapped results.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * function duplicate(n) {
       *   return [[[n, n]]];
       * }
       *
       * _.flatMapDeep([1, 2], duplicate);
       * // => [1, 1, 2, 2]
       */
      function flatMapDeep(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), INFINITY);
      }

      /**
       * This method is like `_.flatMap` except that it recursively flattens the
       * mapped results up to `depth` times.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {number} [depth=1] The maximum recursion depth.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * function duplicate(n) {
       *   return [[[n, n]]];
       * }
       *
       * _.flatMapDepth([1, 2], duplicate, 2);
       * // => [[1, 1], [2, 2]]
       */
      function flatMapDepth(collection, iteratee, depth) {
        depth = depth === undefined$1 ? 1 : toInteger(depth);
        return baseFlatten(map(collection, iteratee), depth);
      }

      /**
       * Iterates over elements of `collection` and invokes `iteratee` for each element.
       * The iteratee is invoked with three arguments: (value, index|key, collection).
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * **Note:** As with other "Collections" methods, objects with a "length"
       * property are iterated like arrays. To avoid this behavior use `_.forIn`
       * or `_.forOwn` for object iteration.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @alias each
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       * @see _.forEachRight
       * @example
       *
       * _.forEach([1, 2], function(value) {
       *   console.log(value);
       * });
       * // => Logs `1` then `2`.
       *
       * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a' then 'b' (iteration order is not guaranteed).
       */
      function forEach(collection, iteratee) {
        var func = isArray(collection) ? arrayEach : baseEach;
        return func(collection, getIteratee(iteratee, 3));
      }

      /**
       * This method is like `_.forEach` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @alias eachRight
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       * @see _.forEach
       * @example
       *
       * _.forEachRight([1, 2], function(value) {
       *   console.log(value);
       * });
       * // => Logs `2` then `1`.
       */
      function forEachRight(collection, iteratee) {
        var func = isArray(collection) ? arrayEachRight : baseEachRight;
        return func(collection, getIteratee(iteratee, 3));
      }

      /**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` thru `iteratee`. The order of grouped values
       * is determined by the order they occur in `collection`. The corresponding
       * value of each key is an array of elements responsible for generating the
       * key. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * _.groupBy([6.1, 4.2, 6.3], Math.floor);
       * // => { '4': [4.2], '6': [6.1, 6.3] }
       *
       * // The `_.property` iteratee shorthand.
       * _.groupBy(['one', 'two', 'three'], 'length');
       * // => { '3': ['one', 'two'], '5': ['three'] }
       */
      var groupBy = createAggregator(function(result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          result[key].push(value);
        } else {
          baseAssignValue(result, key, [value]);
        }
      });

      /**
       * Checks if `value` is in `collection`. If `collection` is a string, it's
       * checked for a substring of `value`, otherwise
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * is used for equality comparisons. If `fromIndex` is negative, it's used as
       * the offset from the end of `collection`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object|string} collection The collection to inspect.
       * @param {*} value The value to search for.
       * @param {number} [fromIndex=0] The index to search from.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
       * @returns {boolean} Returns `true` if `value` is found, else `false`.
       * @example
       *
       * _.includes([1, 2, 3], 1);
       * // => true
       *
       * _.includes([1, 2, 3], 1, 2);
       * // => false
       *
       * _.includes({ 'a': 1, 'b': 2 }, 1);
       * // => true
       *
       * _.includes('abcd', 'bc');
       * // => true
       */
      function includes(collection, value, fromIndex, guard) {
        collection = isArrayLike(collection) ? collection : values(collection);
        fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

        var length = collection.length;
        if (fromIndex < 0) {
          fromIndex = nativeMax(length + fromIndex, 0);
        }
        return isString(collection)
          ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
          : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
      }

      /**
       * Invokes the method at `path` of each element in `collection`, returning
       * an array of the results of each invoked method. Any additional arguments
       * are provided to each invoked method. If `path` is a function, it's invoked
       * for, and `this` bound to, each element in `collection`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Array|Function|string} path The path of the method to invoke or
       *  the function invoked per iteration.
       * @param {...*} [args] The arguments to invoke each method with.
       * @returns {Array} Returns the array of results.
       * @example
       *
       * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
       * // => [[1, 5, 7], [1, 2, 3]]
       *
       * _.invokeMap([123, 456], String.prototype.split, '');
       * // => [['1', '2', '3'], ['4', '5', '6']]
       */
      var invokeMap = baseRest(function(collection, path, args) {
        var index = -1,
            isFunc = typeof path == 'function',
            result = isArrayLike(collection) ? Array(collection.length) : [];

        baseEach(collection, function(value) {
          result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
        });
        return result;
      });

      /**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` thru `iteratee`. The corresponding value of
       * each key is the last element responsible for generating the key. The
       * iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * var array = [
       *   { 'dir': 'left', 'code': 97 },
       *   { 'dir': 'right', 'code': 100 }
       * ];
       *
       * _.keyBy(array, function(o) {
       *   return String.fromCharCode(o.code);
       * });
       * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
       *
       * _.keyBy(array, 'dir');
       * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
       */
      var keyBy = createAggregator(function(result, value, key) {
        baseAssignValue(result, key, value);
      });

      /**
       * Creates an array of values by running each element in `collection` thru
       * `iteratee`. The iteratee is invoked with three arguments:
       * (value, index|key, collection).
       *
       * Many lodash methods are guarded to work as iteratees for methods like
       * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
       *
       * The guarded methods are:
       * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
       * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
       * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
       * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * _.map([4, 8], square);
       * // => [16, 64]
       *
       * _.map({ 'a': 4, 'b': 8 }, square);
       * // => [16, 64] (iteration order is not guaranteed)
       *
       * var users = [
       *   { 'user': 'barney' },
       *   { 'user': 'fred' }
       * ];
       *
       * // The `_.property` iteratee shorthand.
       * _.map(users, 'user');
       * // => ['barney', 'fred']
       */
      function map(collection, iteratee) {
        var func = isArray(collection) ? arrayMap : baseMap;
        return func(collection, getIteratee(iteratee, 3));
      }

      /**
       * This method is like `_.sortBy` except that it allows specifying the sort
       * orders of the iteratees to sort by. If `orders` is unspecified, all values
       * are sorted in ascending order. Otherwise, specify an order of "desc" for
       * descending or "asc" for ascending sort order of corresponding values.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
       *  The iteratees to sort by.
       * @param {string[]} [orders] The sort orders of `iteratees`.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
       * @returns {Array} Returns the new sorted array.
       * @example
       *
       * var users = [
       *   { 'user': 'fred',   'age': 48 },
       *   { 'user': 'barney', 'age': 34 },
       *   { 'user': 'fred',   'age': 40 },
       *   { 'user': 'barney', 'age': 36 }
       * ];
       *
       * // Sort by `user` in ascending order and by `age` in descending order.
       * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
       */
      function orderBy(collection, iteratees, orders, guard) {
        if (collection == null) {
          return [];
        }
        if (!isArray(iteratees)) {
          iteratees = iteratees == null ? [] : [iteratees];
        }
        orders = guard ? undefined$1 : orders;
        if (!isArray(orders)) {
          orders = orders == null ? [] : [orders];
        }
        return baseOrderBy(collection, iteratees, orders);
      }

      /**
       * Creates an array of elements split into two groups, the first of which
       * contains elements `predicate` returns truthy for, the second of which
       * contains elements `predicate` returns falsey for. The predicate is
       * invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the array of grouped elements.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36, 'active': false },
       *   { 'user': 'fred',    'age': 40, 'active': true },
       *   { 'user': 'pebbles', 'age': 1,  'active': false }
       * ];
       *
       * _.partition(users, function(o) { return o.active; });
       * // => objects for [['fred'], ['barney', 'pebbles']]
       *
       * // The `_.matches` iteratee shorthand.
       * _.partition(users, { 'age': 1, 'active': false });
       * // => objects for [['pebbles'], ['barney', 'fred']]
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.partition(users, ['active', false]);
       * // => objects for [['barney', 'pebbles'], ['fred']]
       *
       * // The `_.property` iteratee shorthand.
       * _.partition(users, 'active');
       * // => objects for [['fred'], ['barney', 'pebbles']]
       */
      var partition = createAggregator(function(result, value, key) {
        result[key ? 0 : 1].push(value);
      }, function() { return [[], []]; });

      /**
       * Reduces `collection` to a value which is the accumulated result of running
       * each element in `collection` thru `iteratee`, where each successive
       * invocation is supplied the return value of the previous. If `accumulator`
       * is not given, the first element of `collection` is used as the initial
       * value. The iteratee is invoked with four arguments:
       * (accumulator, value, index|key, collection).
       *
       * Many lodash methods are guarded to work as iteratees for methods like
       * `_.reduce`, `_.reduceRight`, and `_.transform`.
       *
       * The guarded methods are:
       * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
       * and `sortBy`
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @returns {*} Returns the accumulated value.
       * @see _.reduceRight
       * @example
       *
       * _.reduce([1, 2], function(sum, n) {
       *   return sum + n;
       * }, 0);
       * // => 3
       *
       * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
       *   (result[value] || (result[value] = [])).push(key);
       *   return result;
       * }, {});
       * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
       */
      function reduce(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduce : baseReduce,
            initAccum = arguments.length < 3;

        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
      }

      /**
       * This method is like `_.reduce` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @returns {*} Returns the accumulated value.
       * @see _.reduce
       * @example
       *
       * var array = [[0, 1], [2, 3], [4, 5]];
       *
       * _.reduceRight(array, function(flattened, other) {
       *   return flattened.concat(other);
       * }, []);
       * // => [4, 5, 2, 3, 0, 1]
       */
      function reduceRight(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduceRight : baseReduce,
            initAccum = arguments.length < 3;

        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
      }

      /**
       * The opposite of `_.filter`; this method returns the elements of `collection`
       * that `predicate` does **not** return truthy for.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       * @see _.filter
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': false },
       *   { 'user': 'fred',   'age': 40, 'active': true }
       * ];
       *
       * _.reject(users, function(o) { return !o.active; });
       * // => objects for ['fred']
       *
       * // The `_.matches` iteratee shorthand.
       * _.reject(users, { 'age': 40, 'active': true });
       * // => objects for ['barney']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.reject(users, ['active', false]);
       * // => objects for ['fred']
       *
       * // The `_.property` iteratee shorthand.
       * _.reject(users, 'active');
       * // => objects for ['barney']
       */
      function reject(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, negate(getIteratee(predicate, 3)));
      }

      /**
       * Gets a random element from `collection`.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to sample.
       * @returns {*} Returns the random element.
       * @example
       *
       * _.sample([1, 2, 3, 4]);
       * // => 2
       */
      function sample(collection) {
        var func = isArray(collection) ? arraySample : baseSample;
        return func(collection);
      }

      /**
       * Gets `n` random elements at unique keys from `collection` up to the
       * size of `collection`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to sample.
       * @param {number} [n=1] The number of elements to sample.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the random elements.
       * @example
       *
       * _.sampleSize([1, 2, 3], 2);
       * // => [3, 1]
       *
       * _.sampleSize([1, 2, 3], 4);
       * // => [2, 3, 1]
       */
      function sampleSize(collection, n, guard) {
        if ((guard ? isIterateeCall(collection, n, guard) : n === undefined$1)) {
          n = 1;
        } else {
          n = toInteger(n);
        }
        var func = isArray(collection) ? arraySampleSize : baseSampleSize;
        return func(collection, n);
      }

      /**
       * Creates an array of shuffled values, using a version of the
       * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to shuffle.
       * @returns {Array} Returns the new shuffled array.
       * @example
       *
       * _.shuffle([1, 2, 3, 4]);
       * // => [4, 1, 3, 2]
       */
      function shuffle(collection) {
        var func = isArray(collection) ? arrayShuffle : baseShuffle;
        return func(collection);
      }

      /**
       * Gets the size of `collection` by returning its length for array-like
       * values or the number of own enumerable string keyed properties for objects.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object|string} collection The collection to inspect.
       * @returns {number} Returns the collection size.
       * @example
       *
       * _.size([1, 2, 3]);
       * // => 3
       *
       * _.size({ 'a': 1, 'b': 2 });
       * // => 2
       *
       * _.size('pebbles');
       * // => 7
       */
      function size(collection) {
        if (collection == null) {
          return 0;
        }
        if (isArrayLike(collection)) {
          return isString(collection) ? stringSize(collection) : collection.length;
        }
        var tag = getTag(collection);
        if (tag == mapTag || tag == setTag) {
          return collection.size;
        }
        return baseKeys(collection).length;
      }

      /**
       * Checks if `predicate` returns truthy for **any** element of `collection`.
       * Iteration is stopped once `predicate` returns truthy. The predicate is
       * invoked with three arguments: (value, index|key, collection).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {boolean} Returns `true` if any element passes the predicate check,
       *  else `false`.
       * @example
       *
       * _.some([null, 0, 'yes', false], Boolean);
       * // => true
       *
       * var users = [
       *   { 'user': 'barney', 'active': true },
       *   { 'user': 'fred',   'active': false }
       * ];
       *
       * // The `_.matches` iteratee shorthand.
       * _.some(users, { 'user': 'barney', 'active': false });
       * // => false
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.some(users, ['active', false]);
       * // => true
       *
       * // The `_.property` iteratee shorthand.
       * _.some(users, 'active');
       * // => true
       */
      function some(collection, predicate, guard) {
        var func = isArray(collection) ? arraySome : baseSome;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined$1;
        }
        return func(collection, getIteratee(predicate, 3));
      }

      /**
       * Creates an array of elements, sorted in ascending order by the results of
       * running each element in a collection thru each iteratee. This method
       * performs a stable sort, that is, it preserves the original sort order of
       * equal elements. The iteratees are invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {...(Function|Function[])} [iteratees=[_.identity]]
       *  The iteratees to sort by.
       * @returns {Array} Returns the new sorted array.
       * @example
       *
       * var users = [
       *   { 'user': 'fred',   'age': 48 },
       *   { 'user': 'barney', 'age': 36 },
       *   { 'user': 'fred',   'age': 30 },
       *   { 'user': 'barney', 'age': 34 }
       * ];
       *
       * _.sortBy(users, [function(o) { return o.user; }]);
       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
       *
       * _.sortBy(users, ['user', 'age']);
       * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
       */
      var sortBy = baseRest(function(collection, iteratees) {
        if (collection == null) {
          return [];
        }
        var length = iteratees.length;
        if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
          iteratees = [];
        } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
          iteratees = [iteratees[0]];
        }
        return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
      });

      /*------------------------------------------------------------------------*/

      /**
       * Gets the timestamp of the number of milliseconds that have elapsed since
       * the Unix epoch (1 January 1970 00:00:00 UTC).
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Date
       * @returns {number} Returns the timestamp.
       * @example
       *
       * _.defer(function(stamp) {
       *   console.log(_.now() - stamp);
       * }, _.now());
       * // => Logs the number of milliseconds it took for the deferred invocation.
       */
      var now = ctxNow || function() {
        return root.Date.now();
      };

      /*------------------------------------------------------------------------*/

      /**
       * The opposite of `_.before`; this method creates a function that invokes
       * `func` once it's called `n` or more times.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {number} n The number of calls before `func` is invoked.
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * var saves = ['profile', 'settings'];
       *
       * var done = _.after(saves.length, function() {
       *   console.log('done saving!');
       * });
       *
       * _.forEach(saves, function(type) {
       *   asyncSave({ 'type': type, 'complete': done });
       * });
       * // => Logs 'done saving!' after the two async saves have completed.
       */
      function after(n, func) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        n = toInteger(n);
        return function() {
          if (--n < 1) {
            return func.apply(this, arguments);
          }
        };
      }

      /**
       * Creates a function that invokes `func`, with up to `n` arguments,
       * ignoring any additional arguments.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} func The function to cap arguments for.
       * @param {number} [n=func.length] The arity cap.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the new capped function.
       * @example
       *
       * _.map(['6', '8', '10'], _.ary(parseInt, 1));
       * // => [6, 8, 10]
       */
      function ary(func, n, guard) {
        n = guard ? undefined$1 : n;
        n = (func && n == null) ? func.length : n;
        return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
      }

      /**
       * Creates a function that invokes `func`, with the `this` binding and arguments
       * of the created function, while it's called less than `n` times. Subsequent
       * calls to the created function return the result of the last `func` invocation.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {number} n The number of calls at which `func` is no longer invoked.
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * jQuery(element).on('click', _.before(5, addContactToList));
       * // => Allows adding up to 4 contacts to the list.
       */
      function before(n, func) {
        var result;
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        n = toInteger(n);
        return function() {
          if (--n > 0) {
            result = func.apply(this, arguments);
          }
          if (n <= 1) {
            func = undefined$1;
          }
          return result;
        };
      }

      /**
       * Creates a function that invokes `func` with the `this` binding of `thisArg`
       * and `partials` prepended to the arguments it receives.
       *
       * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
       * may be used as a placeholder for partially applied arguments.
       *
       * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
       * property of bound functions.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to bind.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new bound function.
       * @example
       *
       * function greet(greeting, punctuation) {
       *   return greeting + ' ' + this.user + punctuation;
       * }
       *
       * var object = { 'user': 'fred' };
       *
       * var bound = _.bind(greet, object, 'hi');
       * bound('!');
       * // => 'hi fred!'
       *
       * // Bound with placeholders.
       * var bound = _.bind(greet, object, _, '!');
       * bound('hi');
       * // => 'hi fred!'
       */
      var bind = baseRest(function(func, thisArg, partials) {
        var bitmask = WRAP_BIND_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bind));
          bitmask |= WRAP_PARTIAL_FLAG;
        }
        return createWrap(func, bitmask, thisArg, partials, holders);
      });

      /**
       * Creates a function that invokes the method at `object[key]` with `partials`
       * prepended to the arguments it receives.
       *
       * This method differs from `_.bind` by allowing bound functions to reference
       * methods that may be redefined or don't yet exist. See
       * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
       * for more details.
       *
       * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * @static
       * @memberOf _
       * @since 0.10.0
       * @category Function
       * @param {Object} object The object to invoke the method on.
       * @param {string} key The key of the method.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new bound function.
       * @example
       *
       * var object = {
       *   'user': 'fred',
       *   'greet': function(greeting, punctuation) {
       *     return greeting + ' ' + this.user + punctuation;
       *   }
       * };
       *
       * var bound = _.bindKey(object, 'greet', 'hi');
       * bound('!');
       * // => 'hi fred!'
       *
       * object.greet = function(greeting, punctuation) {
       *   return greeting + 'ya ' + this.user + punctuation;
       * };
       *
       * bound('!');
       * // => 'hiya fred!'
       *
       * // Bound with placeholders.
       * var bound = _.bindKey(object, 'greet', _, '!');
       * bound('hi');
       * // => 'hiya fred!'
       */
      var bindKey = baseRest(function(object, key, partials) {
        var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bindKey));
          bitmask |= WRAP_PARTIAL_FLAG;
        }
        return createWrap(key, bitmask, object, partials, holders);
      });

      /**
       * Creates a function that accepts arguments of `func` and either invokes
       * `func` returning its result, if at least `arity` number of arguments have
       * been provided, or returns a function that accepts the remaining `func`
       * arguments, and so on. The arity of `func` may be specified if `func.length`
       * is not sufficient.
       *
       * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
       * may be used as a placeholder for provided arguments.
       *
       * **Note:** This method doesn't set the "length" property of curried functions.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Function
       * @param {Function} func The function to curry.
       * @param {number} [arity=func.length] The arity of `func`.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the new curried function.
       * @example
       *
       * var abc = function(a, b, c) {
       *   return [a, b, c];
       * };
       *
       * var curried = _.curry(abc);
       *
       * curried(1)(2)(3);
       * // => [1, 2, 3]
       *
       * curried(1, 2)(3);
       * // => [1, 2, 3]
       *
       * curried(1, 2, 3);
       * // => [1, 2, 3]
       *
       * // Curried with placeholders.
       * curried(1)(_, 3)(2);
       * // => [1, 2, 3]
       */
      function curry(func, arity, guard) {
        arity = guard ? undefined$1 : arity;
        var result = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
        result.placeholder = curry.placeholder;
        return result;
      }

      /**
       * This method is like `_.curry` except that arguments are applied to `func`
       * in the manner of `_.partialRight` instead of `_.partial`.
       *
       * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for provided arguments.
       *
       * **Note:** This method doesn't set the "length" property of curried functions.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} func The function to curry.
       * @param {number} [arity=func.length] The arity of `func`.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the new curried function.
       * @example
       *
       * var abc = function(a, b, c) {
       *   return [a, b, c];
       * };
       *
       * var curried = _.curryRight(abc);
       *
       * curried(3)(2)(1);
       * // => [1, 2, 3]
       *
       * curried(2, 3)(1);
       * // => [1, 2, 3]
       *
       * curried(1, 2, 3);
       * // => [1, 2, 3]
       *
       * // Curried with placeholders.
       * curried(3)(1, _)(2);
       * // => [1, 2, 3]
       */
      function curryRight(func, arity, guard) {
        arity = guard ? undefined$1 : arity;
        var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
        result.placeholder = curryRight.placeholder;
        return result;
      }

      /**
       * Creates a debounced function that delays invoking `func` until after `wait`
       * milliseconds have elapsed since the last time the debounced function was
       * invoked. The debounced function comes with a `cancel` method to cancel
       * delayed `func` invocations and a `flush` method to immediately invoke them.
       * Provide `options` to indicate whether `func` should be invoked on the
       * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
       * with the last arguments provided to the debounced function. Subsequent
       * calls to the debounced function return the result of the last `func`
       * invocation.
       *
       * **Note:** If `leading` and `trailing` options are `true`, `func` is
       * invoked on the trailing edge of the timeout only if the debounced function
       * is invoked more than once during the `wait` timeout.
       *
       * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
       * until to the next tick, similar to `setTimeout` with a timeout of `0`.
       *
       * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
       * for details over the differences between `_.debounce` and `_.throttle`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to debounce.
       * @param {number} [wait=0] The number of milliseconds to delay.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.leading=false]
       *  Specify invoking on the leading edge of the timeout.
       * @param {number} [options.maxWait]
       *  The maximum time `func` is allowed to be delayed before it's invoked.
       * @param {boolean} [options.trailing=true]
       *  Specify invoking on the trailing edge of the timeout.
       * @returns {Function} Returns the new debounced function.
       * @example
       *
       * // Avoid costly calculations while the window size is in flux.
       * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
       *
       * // Invoke `sendMail` when clicked, debouncing subsequent calls.
       * jQuery(element).on('click', _.debounce(sendMail, 300, {
       *   'leading': true,
       *   'trailing': false
       * }));
       *
       * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
       * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
       * var source = new EventSource('/stream');
       * jQuery(source).on('message', debounced);
       *
       * // Cancel the trailing debounced invocation.
       * jQuery(window).on('popstate', debounced.cancel);
       */
      function debounce(func, wait, options) {
        var lastArgs,
            lastThis,
            maxWait,
            result,
            timerId,
            lastCallTime,
            lastInvokeTime = 0,
            leading = false,
            maxing = false,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        wait = toNumber(wait) || 0;
        if (isObject(options)) {
          leading = !!options.leading;
          maxing = 'maxWait' in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }

        function invokeFunc(time) {
          var args = lastArgs,
              thisArg = lastThis;

          lastArgs = lastThis = undefined$1;
          lastInvokeTime = time;
          result = func.apply(thisArg, args);
          return result;
        }

        function leadingEdge(time) {
          // Reset any `maxWait` timer.
          lastInvokeTime = time;
          // Start the timer for the trailing edge.
          timerId = setTimeout(timerExpired, wait);
          // Invoke the leading edge.
          return leading ? invokeFunc(time) : result;
        }

        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime,
              timeWaiting = wait - timeSinceLastCall;

          return maxing
            ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
            : timeWaiting;
        }

        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime;

          // Either this is the first call, activity has stopped and we're at the
          // trailing edge, the system time has gone backwards and we're treating
          // it as the trailing edge, or we've hit the `maxWait` limit.
          return (lastCallTime === undefined$1 || (timeSinceLastCall >= wait) ||
            (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
        }

        function timerExpired() {
          var time = now();
          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }
          // Restart the timer.
          timerId = setTimeout(timerExpired, remainingWait(time));
        }

        function trailingEdge(time) {
          timerId = undefined$1;

          // Only invoke if we have `lastArgs` which means `func` has been
          // debounced at least once.
          if (trailing && lastArgs) {
            return invokeFunc(time);
          }
          lastArgs = lastThis = undefined$1;
          return result;
        }

        function cancel() {
          if (timerId !== undefined$1) {
            clearTimeout(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = undefined$1;
        }

        function flush() {
          return timerId === undefined$1 ? result : trailingEdge(now());
        }

        function debounced() {
          var time = now(),
              isInvoking = shouldInvoke(time);

          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;

          if (isInvoking) {
            if (timerId === undefined$1) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              // Handle invocations in a tight loop.
              clearTimeout(timerId);
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === undefined$1) {
            timerId = setTimeout(timerExpired, wait);
          }
          return result;
        }
        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }

      /**
       * Defers invoking the `func` until the current call stack has cleared. Any
       * additional arguments are provided to `func` when it's invoked.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to defer.
       * @param {...*} [args] The arguments to invoke `func` with.
       * @returns {number} Returns the timer id.
       * @example
       *
       * _.defer(function(text) {
       *   console.log(text);
       * }, 'deferred');
       * // => Logs 'deferred' after one millisecond.
       */
      var defer = baseRest(function(func, args) {
        return baseDelay(func, 1, args);
      });

      /**
       * Invokes `func` after `wait` milliseconds. Any additional arguments are
       * provided to `func` when it's invoked.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @param {...*} [args] The arguments to invoke `func` with.
       * @returns {number} Returns the timer id.
       * @example
       *
       * _.delay(function(text) {
       *   console.log(text);
       * }, 1000, 'later');
       * // => Logs 'later' after one second.
       */
      var delay = baseRest(function(func, wait, args) {
        return baseDelay(func, toNumber(wait) || 0, args);
      });

      /**
       * Creates a function that invokes `func` with arguments reversed.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Function
       * @param {Function} func The function to flip arguments for.
       * @returns {Function} Returns the new flipped function.
       * @example
       *
       * var flipped = _.flip(function() {
       *   return _.toArray(arguments);
       * });
       *
       * flipped('a', 'b', 'c', 'd');
       * // => ['d', 'c', 'b', 'a']
       */
      function flip(func) {
        return createWrap(func, WRAP_FLIP_FLAG);
      }

      /**
       * Creates a function that memoizes the result of `func`. If `resolver` is
       * provided, it determines the cache key for storing the result based on the
       * arguments provided to the memoized function. By default, the first argument
       * provided to the memoized function is used as the map cache key. The `func`
       * is invoked with the `this` binding of the memoized function.
       *
       * **Note:** The cache is exposed as the `cache` property on the memoized
       * function. Its creation may be customized by replacing the `_.memoize.Cache`
       * constructor with one whose instances implement the
       * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
       * method interface of `clear`, `delete`, `get`, `has`, and `set`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to have its output memoized.
       * @param {Function} [resolver] The function to resolve the cache key.
       * @returns {Function} Returns the new memoized function.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       * var other = { 'c': 3, 'd': 4 };
       *
       * var values = _.memoize(_.values);
       * values(object);
       * // => [1, 2]
       *
       * values(other);
       * // => [3, 4]
       *
       * object.a = 2;
       * values(object);
       * // => [1, 2]
       *
       * // Modify the result cache.
       * values.cache.set(object, ['a', 'b']);
       * values(object);
       * // => ['a', 'b']
       *
       * // Replace `_.memoize.Cache`.
       * _.memoize.Cache = WeakMap;
       */
      function memoize(func, resolver) {
        if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var memoized = function() {
          var args = arguments,
              key = resolver ? resolver.apply(this, args) : args[0],
              cache = memoized.cache;

          if (cache.has(key)) {
            return cache.get(key);
          }
          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result) || cache;
          return result;
        };
        memoized.cache = new (memoize.Cache || MapCache);
        return memoized;
      }

      // Expose `MapCache`.
      memoize.Cache = MapCache;

      /**
       * Creates a function that negates the result of the predicate `func`. The
       * `func` predicate is invoked with the `this` binding and arguments of the
       * created function.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} predicate The predicate to negate.
       * @returns {Function} Returns the new negated function.
       * @example
       *
       * function isEven(n) {
       *   return n % 2 == 0;
       * }
       *
       * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
       * // => [1, 3, 5]
       */
      function negate(predicate) {
        if (typeof predicate != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return function() {
          var args = arguments;
          switch (args.length) {
            case 0: return !predicate.call(this);
            case 1: return !predicate.call(this, args[0]);
            case 2: return !predicate.call(this, args[0], args[1]);
            case 3: return !predicate.call(this, args[0], args[1], args[2]);
          }
          return !predicate.apply(this, args);
        };
      }

      /**
       * Creates a function that is restricted to invoking `func` once. Repeat calls
       * to the function return the value of the first invocation. The `func` is
       * invoked with the `this` binding and arguments of the created function.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * var initialize = _.once(createApplication);
       * initialize();
       * initialize();
       * // => `createApplication` is invoked once
       */
      function once(func) {
        return before(2, func);
      }

      /**
       * Creates a function that invokes `func` with its arguments transformed.
       *
       * @static
       * @since 4.0.0
       * @memberOf _
       * @category Function
       * @param {Function} func The function to wrap.
       * @param {...(Function|Function[])} [transforms=[_.identity]]
       *  The argument transforms.
       * @returns {Function} Returns the new function.
       * @example
       *
       * function doubled(n) {
       *   return n * 2;
       * }
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var func = _.overArgs(function(x, y) {
       *   return [x, y];
       * }, [square, doubled]);
       *
       * func(9, 3);
       * // => [81, 6]
       *
       * func(10, 5);
       * // => [100, 10]
       */
      var overArgs = castRest(function(func, transforms) {
        transforms = (transforms.length == 1 && isArray(transforms[0]))
          ? arrayMap(transforms[0], baseUnary(getIteratee()))
          : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

        var funcsLength = transforms.length;
        return baseRest(function(args) {
          var index = -1,
              length = nativeMin(args.length, funcsLength);

          while (++index < length) {
            args[index] = transforms[index].call(this, args[index]);
          }
          return apply(func, this, args);
        });
      });

      /**
       * Creates a function that invokes `func` with `partials` prepended to the
       * arguments it receives. This method is like `_.bind` except it does **not**
       * alter the `this` binding.
       *
       * The `_.partial.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * **Note:** This method doesn't set the "length" property of partially
       * applied functions.
       *
       * @static
       * @memberOf _
       * @since 0.2.0
       * @category Function
       * @param {Function} func The function to partially apply arguments to.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new partially applied function.
       * @example
       *
       * function greet(greeting, name) {
       *   return greeting + ' ' + name;
       * }
       *
       * var sayHelloTo = _.partial(greet, 'hello');
       * sayHelloTo('fred');
       * // => 'hello fred'
       *
       * // Partially applied with placeholders.
       * var greetFred = _.partial(greet, _, 'fred');
       * greetFred('hi');
       * // => 'hi fred'
       */
      var partial = baseRest(function(func, partials) {
        var holders = replaceHolders(partials, getHolder(partial));
        return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
      });

      /**
       * This method is like `_.partial` except that partially applied arguments
       * are appended to the arguments it receives.
       *
       * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * **Note:** This method doesn't set the "length" property of partially
       * applied functions.
       *
       * @static
       * @memberOf _
       * @since 1.0.0
       * @category Function
       * @param {Function} func The function to partially apply arguments to.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new partially applied function.
       * @example
       *
       * function greet(greeting, name) {
       *   return greeting + ' ' + name;
       * }
       *
       * var greetFred = _.partialRight(greet, 'fred');
       * greetFred('hi');
       * // => 'hi fred'
       *
       * // Partially applied with placeholders.
       * var sayHelloTo = _.partialRight(greet, 'hello', _);
       * sayHelloTo('fred');
       * // => 'hello fred'
       */
      var partialRight = baseRest(function(func, partials) {
        var holders = replaceHolders(partials, getHolder(partialRight));
        return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
      });

      /**
       * Creates a function that invokes `func` with arguments arranged according
       * to the specified `indexes` where the argument value at the first index is
       * provided as the first argument, the argument value at the second index is
       * provided as the second argument, and so on.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} func The function to rearrange arguments for.
       * @param {...(number|number[])} indexes The arranged argument indexes.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var rearged = _.rearg(function(a, b, c) {
       *   return [a, b, c];
       * }, [2, 0, 1]);
       *
       * rearged('b', 'c', 'a')
       * // => ['a', 'b', 'c']
       */
      var rearg = flatRest(function(func, indexes) {
        return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
      });

      /**
       * Creates a function that invokes `func` with the `this` binding of the
       * created function and arguments from `start` and beyond provided as
       * an array.
       *
       * **Note:** This method is based on the
       * [rest parameter](https://mdn.io/rest_parameters).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Function
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var say = _.rest(function(what, names) {
       *   return what + ' ' + _.initial(names).join(', ') +
       *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
       * });
       *
       * say('hello', 'fred', 'barney', 'pebbles');
       * // => 'hello fred, barney, & pebbles'
       */
      function rest(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        start = start === undefined$1 ? start : toInteger(start);
        return baseRest(func, start);
      }

      /**
       * Creates a function that invokes `func` with the `this` binding of the
       * create function and an array of arguments much like
       * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
       *
       * **Note:** This method is based on the
       * [spread operator](https://mdn.io/spread_operator).
       *
       * @static
       * @memberOf _
       * @since 3.2.0
       * @category Function
       * @param {Function} func The function to spread arguments over.
       * @param {number} [start=0] The start position of the spread.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var say = _.spread(function(who, what) {
       *   return who + ' says ' + what;
       * });
       *
       * say(['fred', 'hello']);
       * // => 'fred says hello'
       *
       * var numbers = Promise.all([
       *   Promise.resolve(40),
       *   Promise.resolve(36)
       * ]);
       *
       * numbers.then(_.spread(function(x, y) {
       *   return x + y;
       * }));
       * // => a Promise of 76
       */
      function spread(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        start = start == null ? 0 : nativeMax(toInteger(start), 0);
        return baseRest(function(args) {
          var array = args[start],
              otherArgs = castSlice(args, 0, start);

          if (array) {
            arrayPush(otherArgs, array);
          }
          return apply(func, this, otherArgs);
        });
      }

      /**
       * Creates a throttled function that only invokes `func` at most once per
       * every `wait` milliseconds. The throttled function comes with a `cancel`
       * method to cancel delayed `func` invocations and a `flush` method to
       * immediately invoke them. Provide `options` to indicate whether `func`
       * should be invoked on the leading and/or trailing edge of the `wait`
       * timeout. The `func` is invoked with the last arguments provided to the
       * throttled function. Subsequent calls to the throttled function return the
       * result of the last `func` invocation.
       *
       * **Note:** If `leading` and `trailing` options are `true`, `func` is
       * invoked on the trailing edge of the timeout only if the throttled function
       * is invoked more than once during the `wait` timeout.
       *
       * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
       * until to the next tick, similar to `setTimeout` with a timeout of `0`.
       *
       * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
       * for details over the differences between `_.throttle` and `_.debounce`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to throttle.
       * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.leading=true]
       *  Specify invoking on the leading edge of the timeout.
       * @param {boolean} [options.trailing=true]
       *  Specify invoking on the trailing edge of the timeout.
       * @returns {Function} Returns the new throttled function.
       * @example
       *
       * // Avoid excessively updating the position while scrolling.
       * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
       *
       * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
       * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
       * jQuery(element).on('click', throttled);
       *
       * // Cancel the trailing throttled invocation.
       * jQuery(window).on('popstate', throttled.cancel);
       */
      function throttle(func, wait, options) {
        var leading = true,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        if (isObject(options)) {
          leading = 'leading' in options ? !!options.leading : leading;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }
        return debounce(func, wait, {
          'leading': leading,
          'maxWait': wait,
          'trailing': trailing
        });
      }

      /**
       * Creates a function that accepts up to one argument, ignoring any
       * additional arguments.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Function
       * @param {Function} func The function to cap arguments for.
       * @returns {Function} Returns the new capped function.
       * @example
       *
       * _.map(['6', '8', '10'], _.unary(parseInt));
       * // => [6, 8, 10]
       */
      function unary(func) {
        return ary(func, 1);
      }

      /**
       * Creates a function that provides `value` to `wrapper` as its first
       * argument. Any additional arguments provided to the function are appended
       * to those provided to the `wrapper`. The wrapper is invoked with the `this`
       * binding of the created function.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {*} value The value to wrap.
       * @param {Function} [wrapper=identity] The wrapper function.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var p = _.wrap(_.escape, function(func, text) {
       *   return '<p>' + func(text) + '</p>';
       * });
       *
       * p('fred, barney, & pebbles');
       * // => '<p>fred, barney, &amp; pebbles</p>'
       */
      function wrap(value, wrapper) {
        return partial(castFunction(wrapper), value);
      }

      /*------------------------------------------------------------------------*/

      /**
       * Casts `value` as an array if it's not one.
       *
       * @static
       * @memberOf _
       * @since 4.4.0
       * @category Lang
       * @param {*} value The value to inspect.
       * @returns {Array} Returns the cast array.
       * @example
       *
       * _.castArray(1);
       * // => [1]
       *
       * _.castArray({ 'a': 1 });
       * // => [{ 'a': 1 }]
       *
       * _.castArray('abc');
       * // => ['abc']
       *
       * _.castArray(null);
       * // => [null]
       *
       * _.castArray(undefined);
       * // => [undefined]
       *
       * _.castArray();
       * // => []
       *
       * var array = [1, 2, 3];
       * console.log(_.castArray(array) === array);
       * // => true
       */
      function castArray() {
        if (!arguments.length) {
          return [];
        }
        var value = arguments[0];
        return isArray(value) ? value : [value];
      }

      /**
       * Creates a shallow clone of `value`.
       *
       * **Note:** This method is loosely based on the
       * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
       * and supports cloning arrays, array buffers, booleans, date objects, maps,
       * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
       * arrays. The own enumerable properties of `arguments` objects are cloned
       * as plain objects. An empty object is returned for uncloneable values such
       * as error objects, functions, DOM nodes, and WeakMaps.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to clone.
       * @returns {*} Returns the cloned value.
       * @see _.cloneDeep
       * @example
       *
       * var objects = [{ 'a': 1 }, { 'b': 2 }];
       *
       * var shallow = _.clone(objects);
       * console.log(shallow[0] === objects[0]);
       * // => true
       */
      function clone(value) {
        return baseClone(value, CLONE_SYMBOLS_FLAG);
      }

      /**
       * This method is like `_.clone` except that it accepts `customizer` which
       * is invoked to produce the cloned value. If `customizer` returns `undefined`,
       * cloning is handled by the method instead. The `customizer` is invoked with
       * up to four arguments; (value [, index|key, object, stack]).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to clone.
       * @param {Function} [customizer] The function to customize cloning.
       * @returns {*} Returns the cloned value.
       * @see _.cloneDeepWith
       * @example
       *
       * function customizer(value) {
       *   if (_.isElement(value)) {
       *     return value.cloneNode(false);
       *   }
       * }
       *
       * var el = _.cloneWith(document.body, customizer);
       *
       * console.log(el === document.body);
       * // => false
       * console.log(el.nodeName);
       * // => 'BODY'
       * console.log(el.childNodes.length);
       * // => 0
       */
      function cloneWith(value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined$1;
        return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
      }

      /**
       * This method is like `_.clone` except that it recursively clones `value`.
       *
       * @static
       * @memberOf _
       * @since 1.0.0
       * @category Lang
       * @param {*} value The value to recursively clone.
       * @returns {*} Returns the deep cloned value.
       * @see _.clone
       * @example
       *
       * var objects = [{ 'a': 1 }, { 'b': 2 }];
       *
       * var deep = _.cloneDeep(objects);
       * console.log(deep[0] === objects[0]);
       * // => false
       */
      function cloneDeep(value) {
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
      }

      /**
       * This method is like `_.cloneWith` except that it recursively clones `value`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to recursively clone.
       * @param {Function} [customizer] The function to customize cloning.
       * @returns {*} Returns the deep cloned value.
       * @see _.cloneWith
       * @example
       *
       * function customizer(value) {
       *   if (_.isElement(value)) {
       *     return value.cloneNode(true);
       *   }
       * }
       *
       * var el = _.cloneDeepWith(document.body, customizer);
       *
       * console.log(el === document.body);
       * // => false
       * console.log(el.nodeName);
       * // => 'BODY'
       * console.log(el.childNodes.length);
       * // => 20
       */
      function cloneDeepWith(value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined$1;
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
      }

      /**
       * Checks if `object` conforms to `source` by invoking the predicate
       * properties of `source` with the corresponding property values of `object`.
       *
       * **Note:** This method is equivalent to `_.conforms` when `source` is
       * partially applied.
       *
       * @static
       * @memberOf _
       * @since 4.14.0
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property predicates to conform to.
       * @returns {boolean} Returns `true` if `object` conforms, else `false`.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       *
       * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
       * // => true
       *
       * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
       * // => false
       */
      function conformsTo(object, source) {
        return source == null || baseConformsTo(object, source, keys(source));
      }

      /**
       * Performs a
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * comparison between two values to determine if they are equivalent.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * var object = { 'a': 1 };
       * var other = { 'a': 1 };
       *
       * _.eq(object, object);
       * // => true
       *
       * _.eq(object, other);
       * // => false
       *
       * _.eq('a', 'a');
       * // => true
       *
       * _.eq('a', Object('a'));
       * // => false
       *
       * _.eq(NaN, NaN);
       * // => true
       */
      function eq(value, other) {
        return value === other || (value !== value && other !== other);
      }

      /**
       * Checks if `value` is greater than `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than `other`,
       *  else `false`.
       * @see _.lt
       * @example
       *
       * _.gt(3, 1);
       * // => true
       *
       * _.gt(3, 3);
       * // => false
       *
       * _.gt(1, 3);
       * // => false
       */
      var gt = createRelationalOperation(baseGt);

      /**
       * Checks if `value` is greater than or equal to `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than or equal to
       *  `other`, else `false`.
       * @see _.lte
       * @example
       *
       * _.gte(3, 1);
       * // => true
       *
       * _.gte(3, 3);
       * // => true
       *
       * _.gte(1, 3);
       * // => false
       */
      var gte = createRelationalOperation(function(value, other) {
        return value >= other;
      });

      /**
       * Checks if `value` is likely an `arguments` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
       *  else `false`.
       * @example
       *
       * _.isArguments(function() { return arguments; }());
       * // => true
       *
       * _.isArguments([1, 2, 3]);
       * // => false
       */
      var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
        return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
          !propertyIsEnumerable.call(value, 'callee');
      };

      /**
       * Checks if `value` is classified as an `Array` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array, else `false`.
       * @example
       *
       * _.isArray([1, 2, 3]);
       * // => true
       *
       * _.isArray(document.body.children);
       * // => false
       *
       * _.isArray('abc');
       * // => false
       *
       * _.isArray(_.noop);
       * // => false
       */
      var isArray = Array.isArray;

      /**
       * Checks if `value` is classified as an `ArrayBuffer` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
       * @example
       *
       * _.isArrayBuffer(new ArrayBuffer(2));
       * // => true
       *
       * _.isArrayBuffer(new Array(2));
       * // => false
       */
      var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

      /**
       * Checks if `value` is array-like. A value is considered array-like if it's
       * not a function and has a `value.length` that's an integer greater than or
       * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
       * @example
       *
       * _.isArrayLike([1, 2, 3]);
       * // => true
       *
       * _.isArrayLike(document.body.children);
       * // => true
       *
       * _.isArrayLike('abc');
       * // => true
       *
       * _.isArrayLike(_.noop);
       * // => false
       */
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
      }

      /**
       * This method is like `_.isArrayLike` except that it also checks if `value`
       * is an object.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array-like object,
       *  else `false`.
       * @example
       *
       * _.isArrayLikeObject([1, 2, 3]);
       * // => true
       *
       * _.isArrayLikeObject(document.body.children);
       * // => true
       *
       * _.isArrayLikeObject('abc');
       * // => false
       *
       * _.isArrayLikeObject(_.noop);
       * // => false
       */
      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }

      /**
       * Checks if `value` is classified as a boolean primitive or object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
       * @example
       *
       * _.isBoolean(false);
       * // => true
       *
       * _.isBoolean(null);
       * // => false
       */
      function isBoolean(value) {
        return value === true || value === false ||
          (isObjectLike(value) && baseGetTag(value) == boolTag);
      }

      /**
       * Checks if `value` is a buffer.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
       * @example
       *
       * _.isBuffer(new Buffer(2));
       * // => true
       *
       * _.isBuffer(new Uint8Array(2));
       * // => false
       */
      var isBuffer = nativeIsBuffer || stubFalse;

      /**
       * Checks if `value` is classified as a `Date` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
       * @example
       *
       * _.isDate(new Date);
       * // => true
       *
       * _.isDate('Mon April 23 2012');
       * // => false
       */
      var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

      /**
       * Checks if `value` is likely a DOM element.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
       * @example
       *
       * _.isElement(document.body);
       * // => true
       *
       * _.isElement('<body>');
       * // => false
       */
      function isElement(value) {
        return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
      }

      /**
       * Checks if `value` is an empty object, collection, map, or set.
       *
       * Objects are considered empty if they have no own enumerable string keyed
       * properties.
       *
       * Array-like values such as `arguments` objects, arrays, buffers, strings, or
       * jQuery-like collections are considered empty if they have a `length` of `0`.
       * Similarly, maps and sets are considered empty if they have a `size` of `0`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is empty, else `false`.
       * @example
       *
       * _.isEmpty(null);
       * // => true
       *
       * _.isEmpty(true);
       * // => true
       *
       * _.isEmpty(1);
       * // => true
       *
       * _.isEmpty([1, 2, 3]);
       * // => false
       *
       * _.isEmpty({ 'a': 1 });
       * // => false
       */
      function isEmpty(value) {
        if (value == null) {
          return true;
        }
        if (isArrayLike(value) &&
            (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
              isBuffer(value) || isTypedArray(value) || isArguments(value))) {
          return !value.length;
        }
        var tag = getTag(value);
        if (tag == mapTag || tag == setTag) {
          return !value.size;
        }
        if (isPrototype(value)) {
          return !baseKeys(value).length;
        }
        for (var key in value) {
          if (hasOwnProperty.call(value, key)) {
            return false;
          }
        }
        return true;
      }

      /**
       * Performs a deep comparison between two values to determine if they are
       * equivalent.
       *
       * **Note:** This method supports comparing arrays, array buffers, booleans,
       * date objects, error objects, maps, numbers, `Object` objects, regexes,
       * sets, strings, symbols, and typed arrays. `Object` objects are compared
       * by their own, not inherited, enumerable properties. Functions and DOM
       * nodes are compared by strict equality, i.e. `===`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * var object = { 'a': 1 };
       * var other = { 'a': 1 };
       *
       * _.isEqual(object, other);
       * // => true
       *
       * object === other;
       * // => false
       */
      function isEqual(value, other) {
        return baseIsEqual(value, other);
      }

      /**
       * This method is like `_.isEqual` except that it accepts `customizer` which
       * is invoked to compare values. If `customizer` returns `undefined`, comparisons
       * are handled by the method instead. The `customizer` is invoked with up to
       * six arguments: (objValue, othValue [, index|key, object, other, stack]).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * function isGreeting(value) {
       *   return /^h(?:i|ello)$/.test(value);
       * }
       *
       * function customizer(objValue, othValue) {
       *   if (isGreeting(objValue) && isGreeting(othValue)) {
       *     return true;
       *   }
       * }
       *
       * var array = ['hello', 'goodbye'];
       * var other = ['hi', 'goodbye'];
       *
       * _.isEqualWith(array, other, customizer);
       * // => true
       */
      function isEqualWith(value, other, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined$1;
        var result = customizer ? customizer(value, other) : undefined$1;
        return result === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result;
      }

      /**
       * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
       * `SyntaxError`, `TypeError`, or `URIError` object.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
       * @example
       *
       * _.isError(new Error);
       * // => true
       *
       * _.isError(Error);
       * // => false
       */
      function isError(value) {
        if (!isObjectLike(value)) {
          return false;
        }
        var tag = baseGetTag(value);
        return tag == errorTag || tag == domExcTag ||
          (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
      }

      /**
       * Checks if `value` is a finite primitive number.
       *
       * **Note:** This method is based on
       * [`Number.isFinite`](https://mdn.io/Number/isFinite).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
       * @example
       *
       * _.isFinite(3);
       * // => true
       *
       * _.isFinite(Number.MIN_VALUE);
       * // => true
       *
       * _.isFinite(Infinity);
       * // => false
       *
       * _.isFinite('3');
       * // => false
       */
      function isFinite(value) {
        return typeof value == 'number' && nativeIsFinite(value);
      }

      /**
       * Checks if `value` is classified as a `Function` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a function, else `false`.
       * @example
       *
       * _.isFunction(_);
       * // => true
       *
       * _.isFunction(/abc/);
       * // => false
       */
      function isFunction(value) {
        if (!isObject(value)) {
          return false;
        }
        // The use of `Object#toString` avoids issues with the `typeof` operator
        // in Safari 9 which returns 'object' for typed arrays and other constructors.
        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }

      /**
       * Checks if `value` is an integer.
       *
       * **Note:** This method is based on
       * [`Number.isInteger`](https://mdn.io/Number/isInteger).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
       * @example
       *
       * _.isInteger(3);
       * // => true
       *
       * _.isInteger(Number.MIN_VALUE);
       * // => false
       *
       * _.isInteger(Infinity);
       * // => false
       *
       * _.isInteger('3');
       * // => false
       */
      function isInteger(value) {
        return typeof value == 'number' && value == toInteger(value);
      }

      /**
       * Checks if `value` is a valid array-like length.
       *
       * **Note:** This method is loosely based on
       * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
       * @example
       *
       * _.isLength(3);
       * // => true
       *
       * _.isLength(Number.MIN_VALUE);
       * // => false
       *
       * _.isLength(Infinity);
       * // => false
       *
       * _.isLength('3');
       * // => false
       */
      function isLength(value) {
        return typeof value == 'number' &&
          value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }

      /**
       * Checks if `value` is the
       * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
       * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an object, else `false`.
       * @example
       *
       * _.isObject({});
       * // => true
       *
       * _.isObject([1, 2, 3]);
       * // => true
       *
       * _.isObject(_.noop);
       * // => true
       *
       * _.isObject(null);
       * // => false
       */
      function isObject(value) {
        var type = typeof value;
        return value != null && (type == 'object' || type == 'function');
      }

      /**
       * Checks if `value` is object-like. A value is object-like if it's not `null`
       * and has a `typeof` result of "object".
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
       * @example
       *
       * _.isObjectLike({});
       * // => true
       *
       * _.isObjectLike([1, 2, 3]);
       * // => true
       *
       * _.isObjectLike(_.noop);
       * // => false
       *
       * _.isObjectLike(null);
       * // => false
       */
      function isObjectLike(value) {
        return value != null && typeof value == 'object';
      }

      /**
       * Checks if `value` is classified as a `Map` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a map, else `false`.
       * @example
       *
       * _.isMap(new Map);
       * // => true
       *
       * _.isMap(new WeakMap);
       * // => false
       */
      var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

      /**
       * Performs a partial deep comparison between `object` and `source` to
       * determine if `object` contains equivalent property values.
       *
       * **Note:** This method is equivalent to `_.matches` when `source` is
       * partially applied.
       *
       * Partial comparisons will match empty array and empty object `source`
       * values against any array or object value, respectively. See `_.isEqual`
       * for a list of supported value comparisons.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       *
       * _.isMatch(object, { 'b': 2 });
       * // => true
       *
       * _.isMatch(object, { 'b': 1 });
       * // => false
       */
      function isMatch(object, source) {
        return object === source || baseIsMatch(object, source, getMatchData(source));
      }

      /**
       * This method is like `_.isMatch` except that it accepts `customizer` which
       * is invoked to compare values. If `customizer` returns `undefined`, comparisons
       * are handled by the method instead. The `customizer` is invoked with five
       * arguments: (objValue, srcValue, index|key, object, source).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       * @example
       *
       * function isGreeting(value) {
       *   return /^h(?:i|ello)$/.test(value);
       * }
       *
       * function customizer(objValue, srcValue) {
       *   if (isGreeting(objValue) && isGreeting(srcValue)) {
       *     return true;
       *   }
       * }
       *
       * var object = { 'greeting': 'hello' };
       * var source = { 'greeting': 'hi' };
       *
       * _.isMatchWith(object, source, customizer);
       * // => true
       */
      function isMatchWith(object, source, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined$1;
        return baseIsMatch(object, source, getMatchData(source), customizer);
      }

      /**
       * Checks if `value` is `NaN`.
       *
       * **Note:** This method is based on
       * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
       * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
       * `undefined` and other non-number values.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
       * @example
       *
       * _.isNaN(NaN);
       * // => true
       *
       * _.isNaN(new Number(NaN));
       * // => true
       *
       * isNaN(undefined);
       * // => true
       *
       * _.isNaN(undefined);
       * // => false
       */
      function isNaN(value) {
        // An `NaN` primitive is the only value that is not equal to itself.
        // Perform the `toStringTag` check first to avoid errors with some
        // ActiveX objects in IE.
        return isNumber(value) && value != +value;
      }

      /**
       * Checks if `value` is a pristine native function.
       *
       * **Note:** This method can't reliably detect native functions in the presence
       * of the core-js package because core-js circumvents this kind of detection.
       * Despite multiple requests, the core-js maintainer has made it clear: any
       * attempt to fix the detection will be obstructed. As a result, we're left
       * with little choice but to throw an error. Unfortunately, this also affects
       * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
       * which rely on core-js.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a native function,
       *  else `false`.
       * @example
       *
       * _.isNative(Array.prototype.push);
       * // => true
       *
       * _.isNative(_);
       * // => false
       */
      function isNative(value) {
        if (isMaskable(value)) {
          throw new Error(CORE_ERROR_TEXT);
        }
        return baseIsNative(value);
      }

      /**
       * Checks if `value` is `null`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
       * @example
       *
       * _.isNull(null);
       * // => true
       *
       * _.isNull(void 0);
       * // => false
       */
      function isNull(value) {
        return value === null;
      }

      /**
       * Checks if `value` is `null` or `undefined`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
       * @example
       *
       * _.isNil(null);
       * // => true
       *
       * _.isNil(void 0);
       * // => true
       *
       * _.isNil(NaN);
       * // => false
       */
      function isNil(value) {
        return value == null;
      }

      /**
       * Checks if `value` is classified as a `Number` primitive or object.
       *
       * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
       * classified as numbers, use the `_.isFinite` method.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a number, else `false`.
       * @example
       *
       * _.isNumber(3);
       * // => true
       *
       * _.isNumber(Number.MIN_VALUE);
       * // => true
       *
       * _.isNumber(Infinity);
       * // => true
       *
       * _.isNumber('3');
       * // => false
       */
      function isNumber(value) {
        return typeof value == 'number' ||
          (isObjectLike(value) && baseGetTag(value) == numberTag);
      }

      /**
       * Checks if `value` is a plain object, that is, an object created by the
       * `Object` constructor or one with a `[[Prototype]]` of `null`.
       *
       * @static
       * @memberOf _
       * @since 0.8.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * _.isPlainObject(new Foo);
       * // => false
       *
       * _.isPlainObject([1, 2, 3]);
       * // => false
       *
       * _.isPlainObject({ 'x': 0, 'y': 0 });
       * // => true
       *
       * _.isPlainObject(Object.create(null));
       * // => true
       */
      function isPlainObject(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
          return false;
        }
        var proto = getPrototype(value);
        if (proto === null) {
          return true;
        }
        var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
        return typeof Ctor == 'function' && Ctor instanceof Ctor &&
          funcToString.call(Ctor) == objectCtorString;
      }

      /**
       * Checks if `value` is classified as a `RegExp` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
       * @example
       *
       * _.isRegExp(/abc/);
       * // => true
       *
       * _.isRegExp('/abc/');
       * // => false
       */
      var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

      /**
       * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
       * double precision number which isn't the result of a rounded unsafe integer.
       *
       * **Note:** This method is based on
       * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
       * @example
       *
       * _.isSafeInteger(3);
       * // => true
       *
       * _.isSafeInteger(Number.MIN_VALUE);
       * // => false
       *
       * _.isSafeInteger(Infinity);
       * // => false
       *
       * _.isSafeInteger('3');
       * // => false
       */
      function isSafeInteger(value) {
        return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
      }

      /**
       * Checks if `value` is classified as a `Set` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a set, else `false`.
       * @example
       *
       * _.isSet(new Set);
       * // => true
       *
       * _.isSet(new WeakSet);
       * // => false
       */
      var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

      /**
       * Checks if `value` is classified as a `String` primitive or object.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a string, else `false`.
       * @example
       *
       * _.isString('abc');
       * // => true
       *
       * _.isString(1);
       * // => false
       */
      function isString(value) {
        return typeof value == 'string' ||
          (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
      }

      /**
       * Checks if `value` is classified as a `Symbol` primitive or object.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
       * @example
       *
       * _.isSymbol(Symbol.iterator);
       * // => true
       *
       * _.isSymbol('abc');
       * // => false
       */
      function isSymbol(value) {
        return typeof value == 'symbol' ||
          (isObjectLike(value) && baseGetTag(value) == symbolTag);
      }

      /**
       * Checks if `value` is classified as a typed array.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
       * @example
       *
       * _.isTypedArray(new Uint8Array);
       * // => true
       *
       * _.isTypedArray([]);
       * // => false
       */
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

      /**
       * Checks if `value` is `undefined`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
       * @example
       *
       * _.isUndefined(void 0);
       * // => true
       *
       * _.isUndefined(null);
       * // => false
       */
      function isUndefined(value) {
        return value === undefined$1;
      }

      /**
       * Checks if `value` is classified as a `WeakMap` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
       * @example
       *
       * _.isWeakMap(new WeakMap);
       * // => true
       *
       * _.isWeakMap(new Map);
       * // => false
       */
      function isWeakMap(value) {
        return isObjectLike(value) && getTag(value) == weakMapTag;
      }

      /**
       * Checks if `value` is classified as a `WeakSet` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
       * @example
       *
       * _.isWeakSet(new WeakSet);
       * // => true
       *
       * _.isWeakSet(new Set);
       * // => false
       */
      function isWeakSet(value) {
        return isObjectLike(value) && baseGetTag(value) == weakSetTag;
      }

      /**
       * Checks if `value` is less than `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than `other`,
       *  else `false`.
       * @see _.gt
       * @example
       *
       * _.lt(1, 3);
       * // => true
       *
       * _.lt(3, 3);
       * // => false
       *
       * _.lt(3, 1);
       * // => false
       */
      var lt = createRelationalOperation(baseLt);

      /**
       * Checks if `value` is less than or equal to `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than or equal to
       *  `other`, else `false`.
       * @see _.gte
       * @example
       *
       * _.lte(1, 3);
       * // => true
       *
       * _.lte(3, 3);
       * // => true
       *
       * _.lte(3, 1);
       * // => false
       */
      var lte = createRelationalOperation(function(value, other) {
        return value <= other;
      });

      /**
       * Converts `value` to an array.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {Array} Returns the converted array.
       * @example
       *
       * _.toArray({ 'a': 1, 'b': 2 });
       * // => [1, 2]
       *
       * _.toArray('abc');
       * // => ['a', 'b', 'c']
       *
       * _.toArray(1);
       * // => []
       *
       * _.toArray(null);
       * // => []
       */
      function toArray(value) {
        if (!value) {
          return [];
        }
        if (isArrayLike(value)) {
          return isString(value) ? stringToArray(value) : copyArray(value);
        }
        if (symIterator && value[symIterator]) {
          return iteratorToArray(value[symIterator]());
        }
        var tag = getTag(value),
            func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

        return func(value);
      }

      /**
       * Converts `value` to a finite number.
       *
       * @static
       * @memberOf _
       * @since 4.12.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted number.
       * @example
       *
       * _.toFinite(3.2);
       * // => 3.2
       *
       * _.toFinite(Number.MIN_VALUE);
       * // => 5e-324
       *
       * _.toFinite(Infinity);
       * // => 1.7976931348623157e+308
       *
       * _.toFinite('3.2');
       * // => 3.2
       */
      function toFinite(value) {
        if (!value) {
          return value === 0 ? value : 0;
        }
        value = toNumber(value);
        if (value === INFINITY || value === -INFINITY) {
          var sign = (value < 0 ? -1 : 1);
          return sign * MAX_INTEGER;
        }
        return value === value ? value : 0;
      }

      /**
       * Converts `value` to an integer.
       *
       * **Note:** This method is loosely based on
       * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.toInteger(3.2);
       * // => 3
       *
       * _.toInteger(Number.MIN_VALUE);
       * // => 0
       *
       * _.toInteger(Infinity);
       * // => 1.7976931348623157e+308
       *
       * _.toInteger('3.2');
       * // => 3
       */
      function toInteger(value) {
        var result = toFinite(value),
            remainder = result % 1;

        return result === result ? (remainder ? result - remainder : result) : 0;
      }

      /**
       * Converts `value` to an integer suitable for use as the length of an
       * array-like object.
       *
       * **Note:** This method is based on
       * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.toLength(3.2);
       * // => 3
       *
       * _.toLength(Number.MIN_VALUE);
       * // => 0
       *
       * _.toLength(Infinity);
       * // => 4294967295
       *
       * _.toLength('3.2');
       * // => 3
       */
      function toLength(value) {
        return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
      }

      /**
       * Converts `value` to a number.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to process.
       * @returns {number} Returns the number.
       * @example
       *
       * _.toNumber(3.2);
       * // => 3.2
       *
       * _.toNumber(Number.MIN_VALUE);
       * // => 5e-324
       *
       * _.toNumber(Infinity);
       * // => Infinity
       *
       * _.toNumber('3.2');
       * // => 3.2
       */
      function toNumber(value) {
        if (typeof value == 'number') {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        if (isObject(value)) {
          var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
          value = isObject(other) ? (other + '') : other;
        }
        if (typeof value != 'string') {
          return value === 0 ? value : +value;
        }
        value = baseTrim(value);
        var isBinary = reIsBinary.test(value);
        return (isBinary || reIsOctal.test(value))
          ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
          : (reIsBadHex.test(value) ? NAN : +value);
      }

      /**
       * Converts `value` to a plain object flattening inherited enumerable string
       * keyed properties of `value` to own properties of the plain object.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {Object} Returns the converted plain object.
       * @example
       *
       * function Foo() {
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.assign({ 'a': 1 }, new Foo);
       * // => { 'a': 1, 'b': 2 }
       *
       * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
       * // => { 'a': 1, 'b': 2, 'c': 3 }
       */
      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }

      /**
       * Converts `value` to a safe integer. A safe integer can be compared and
       * represented correctly.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.toSafeInteger(3.2);
       * // => 3
       *
       * _.toSafeInteger(Number.MIN_VALUE);
       * // => 0
       *
       * _.toSafeInteger(Infinity);
       * // => 9007199254740991
       *
       * _.toSafeInteger('3.2');
       * // => 3
       */
      function toSafeInteger(value) {
        return value
          ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
          : (value === 0 ? value : 0);
      }

      /**
       * Converts `value` to a string. An empty string is returned for `null`
       * and `undefined` values. The sign of `-0` is preserved.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.toString(null);
       * // => ''
       *
       * _.toString(-0);
       * // => '-0'
       *
       * _.toString([1, 2, 3]);
       * // => '1,2,3'
       */
      function toString(value) {
        return value == null ? '' : baseToString(value);
      }

      /*------------------------------------------------------------------------*/

      /**
       * Assigns own enumerable string keyed properties of source objects to the
       * destination object. Source objects are applied from left to right.
       * Subsequent sources overwrite property assignments of previous sources.
       *
       * **Note:** This method mutates `object` and is loosely based on
       * [`Object.assign`](https://mdn.io/Object/assign).
       *
       * @static
       * @memberOf _
       * @since 0.10.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.assignIn
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * function Bar() {
       *   this.c = 3;
       * }
       *
       * Foo.prototype.b = 2;
       * Bar.prototype.d = 4;
       *
       * _.assign({ 'a': 0 }, new Foo, new Bar);
       * // => { 'a': 1, 'c': 3 }
       */
      var assign = createAssigner(function(object, source) {
        if (isPrototype(source) || isArrayLike(source)) {
          copyObject(source, keys(source), object);
          return;
        }
        for (var key in source) {
          if (hasOwnProperty.call(source, key)) {
            assignValue(object, key, source[key]);
          }
        }
      });

      /**
       * This method is like `_.assign` except that it iterates over own and
       * inherited source properties.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias extend
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.assign
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * function Bar() {
       *   this.c = 3;
       * }
       *
       * Foo.prototype.b = 2;
       * Bar.prototype.d = 4;
       *
       * _.assignIn({ 'a': 0 }, new Foo, new Bar);
       * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
       */
      var assignIn = createAssigner(function(object, source) {
        copyObject(source, keysIn(source), object);
      });

      /**
       * This method is like `_.assignIn` except that it accepts `customizer`
       * which is invoked to produce the assigned values. If `customizer` returns
       * `undefined`, assignment is handled by the method instead. The `customizer`
       * is invoked with five arguments: (objValue, srcValue, key, object, source).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias extendWith
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @see _.assignWith
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   return _.isUndefined(objValue) ? srcValue : objValue;
       * }
       *
       * var defaults = _.partialRight(_.assignInWith, customizer);
       *
       * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
       * // => { 'a': 1, 'b': 2 }
       */
      var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
        copyObject(source, keysIn(source), object, customizer);
      });

      /**
       * This method is like `_.assign` except that it accepts `customizer`
       * which is invoked to produce the assigned values. If `customizer` returns
       * `undefined`, assignment is handled by the method instead. The `customizer`
       * is invoked with five arguments: (objValue, srcValue, key, object, source).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @see _.assignInWith
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   return _.isUndefined(objValue) ? srcValue : objValue;
       * }
       *
       * var defaults = _.partialRight(_.assignWith, customizer);
       *
       * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
       * // => { 'a': 1, 'b': 2 }
       */
      var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
        copyObject(source, keys(source), object, customizer);
      });

      /**
       * Creates an array of values corresponding to `paths` of `object`.
       *
       * @static
       * @memberOf _
       * @since 1.0.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {...(string|string[])} [paths] The property paths to pick.
       * @returns {Array} Returns the picked values.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
       *
       * _.at(object, ['a[0].b.c', 'a[1]']);
       * // => [3, 4]
       */
      var at = flatRest(baseAt);

      /**
       * Creates an object that inherits from the `prototype` object. If a
       * `properties` object is given, its own enumerable string keyed properties
       * are assigned to the created object.
       *
       * @static
       * @memberOf _
       * @since 2.3.0
       * @category Object
       * @param {Object} prototype The object to inherit from.
       * @param {Object} [properties] The properties to assign to the object.
       * @returns {Object} Returns the new object.
       * @example
       *
       * function Shape() {
       *   this.x = 0;
       *   this.y = 0;
       * }
       *
       * function Circle() {
       *   Shape.call(this);
       * }
       *
       * Circle.prototype = _.create(Shape.prototype, {
       *   'constructor': Circle
       * });
       *
       * var circle = new Circle;
       * circle instanceof Circle;
       * // => true
       *
       * circle instanceof Shape;
       * // => true
       */
      function create(prototype, properties) {
        var result = baseCreate(prototype);
        return properties == null ? result : baseAssign(result, properties);
      }

      /**
       * Assigns own and inherited enumerable string keyed properties of source
       * objects to the destination object for all destination properties that
       * resolve to `undefined`. Source objects are applied from left to right.
       * Once a property is set, additional values of the same property are ignored.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.defaultsDeep
       * @example
       *
       * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
       * // => { 'a': 1, 'b': 2 }
       */
      var defaults = baseRest(function(object, sources) {
        object = Object(object);

        var index = -1;
        var length = sources.length;
        var guard = length > 2 ? sources[2] : undefined$1;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          length = 1;
        }

        while (++index < length) {
          var source = sources[index];
          var props = keysIn(source);
          var propsIndex = -1;
          var propsLength = props.length;

          while (++propsIndex < propsLength) {
            var key = props[propsIndex];
            var value = object[key];

            if (value === undefined$1 ||
                (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
              object[key] = source[key];
            }
          }
        }

        return object;
      });

      /**
       * This method is like `_.defaults` except that it recursively assigns
       * default properties.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.defaults
       * @example
       *
       * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
       * // => { 'a': { 'b': 2, 'c': 3 } }
       */
      var defaultsDeep = baseRest(function(args) {
        args.push(undefined$1, customDefaultsMerge);
        return apply(mergeWith, undefined$1, args);
      });

      /**
       * This method is like `_.find` except that it returns the key of the first
       * element `predicate` returns truthy for instead of the element itself.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category Object
       * @param {Object} object The object to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {string|undefined} Returns the key of the matched element,
       *  else `undefined`.
       * @example
       *
       * var users = {
       *   'barney':  { 'age': 36, 'active': true },
       *   'fred':    { 'age': 40, 'active': false },
       *   'pebbles': { 'age': 1,  'active': true }
       * };
       *
       * _.findKey(users, function(o) { return o.age < 40; });
       * // => 'barney' (iteration order is not guaranteed)
       *
       * // The `_.matches` iteratee shorthand.
       * _.findKey(users, { 'age': 1, 'active': true });
       * // => 'pebbles'
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findKey(users, ['active', false]);
       * // => 'fred'
       *
       * // The `_.property` iteratee shorthand.
       * _.findKey(users, 'active');
       * // => 'barney'
       */
      function findKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
      }

      /**
       * This method is like `_.findKey` except that it iterates over elements of
       * a collection in the opposite order.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Object
       * @param {Object} object The object to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {string|undefined} Returns the key of the matched element,
       *  else `undefined`.
       * @example
       *
       * var users = {
       *   'barney':  { 'age': 36, 'active': true },
       *   'fred':    { 'age': 40, 'active': false },
       *   'pebbles': { 'age': 1,  'active': true }
       * };
       *
       * _.findLastKey(users, function(o) { return o.age < 40; });
       * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
       *
       * // The `_.matches` iteratee shorthand.
       * _.findLastKey(users, { 'age': 36, 'active': true });
       * // => 'barney'
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findLastKey(users, ['active', false]);
       * // => 'fred'
       *
       * // The `_.property` iteratee shorthand.
       * _.findLastKey(users, 'active');
       * // => 'pebbles'
       */
      function findLastKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
      }

      /**
       * Iterates over own and inherited enumerable string keyed properties of an
       * object and invokes `iteratee` for each property. The iteratee is invoked
       * with three arguments: (value, key, object). Iteratee functions may exit
       * iteration early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @since 0.3.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forInRight
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forIn(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
       */
      function forIn(object, iteratee) {
        return object == null
          ? object
          : baseFor(object, getIteratee(iteratee, 3), keysIn);
      }

      /**
       * This method is like `_.forIn` except that it iterates over properties of
       * `object` in the opposite order.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forIn
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forInRight(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
       */
      function forInRight(object, iteratee) {
        return object == null
          ? object
          : baseForRight(object, getIteratee(iteratee, 3), keysIn);
      }

      /**
       * Iterates over own enumerable string keyed properties of an object and
       * invokes `iteratee` for each property. The iteratee is invoked with three
       * arguments: (value, key, object). Iteratee functions may exit iteration
       * early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @since 0.3.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forOwnRight
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forOwn(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a' then 'b' (iteration order is not guaranteed).
       */
      function forOwn(object, iteratee) {
        return object && baseForOwn(object, getIteratee(iteratee, 3));
      }

      /**
       * This method is like `_.forOwn` except that it iterates over properties of
       * `object` in the opposite order.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forOwn
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forOwnRight(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
       */
      function forOwnRight(object, iteratee) {
        return object && baseForOwnRight(object, getIteratee(iteratee, 3));
      }

      /**
       * Creates an array of function property names from own enumerable properties
       * of `object`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to inspect.
       * @returns {Array} Returns the function names.
       * @see _.functionsIn
       * @example
       *
       * function Foo() {
       *   this.a = _.constant('a');
       *   this.b = _.constant('b');
       * }
       *
       * Foo.prototype.c = _.constant('c');
       *
       * _.functions(new Foo);
       * // => ['a', 'b']
       */
      function functions(object) {
        return object == null ? [] : baseFunctions(object, keys(object));
      }

      /**
       * Creates an array of function property names from own and inherited
       * enumerable properties of `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to inspect.
       * @returns {Array} Returns the function names.
       * @see _.functions
       * @example
       *
       * function Foo() {
       *   this.a = _.constant('a');
       *   this.b = _.constant('b');
       * }
       *
       * Foo.prototype.c = _.constant('c');
       *
       * _.functionsIn(new Foo);
       * // => ['a', 'b', 'c']
       */
      function functionsIn(object) {
        return object == null ? [] : baseFunctions(object, keysIn(object));
      }

      /**
       * Gets the value at `path` of `object`. If the resolved value is
       * `undefined`, the `defaultValue` is returned in its place.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to get.
       * @param {*} [defaultValue] The value returned for `undefined` resolved values.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.get(object, 'a[0].b.c');
       * // => 3
       *
       * _.get(object, ['a', '0', 'b', 'c']);
       * // => 3
       *
       * _.get(object, 'a.b.c', 'default');
       * // => 'default'
       */
      function get(object, path, defaultValue) {
        var result = object == null ? undefined$1 : baseGet(object, path);
        return result === undefined$1 ? defaultValue : result;
      }

      /**
       * Checks if `path` is a direct property of `object`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       * @example
       *
       * var object = { 'a': { 'b': 2 } };
       * var other = _.create({ 'a': _.create({ 'b': 2 }) });
       *
       * _.has(object, 'a');
       * // => true
       *
       * _.has(object, 'a.b');
       * // => true
       *
       * _.has(object, ['a', 'b']);
       * // => true
       *
       * _.has(other, 'a');
       * // => false
       */
      function has(object, path) {
        return object != null && hasPath(object, path, baseHas);
      }

      /**
       * Checks if `path` is a direct or inherited property of `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       * @example
       *
       * var object = _.create({ 'a': _.create({ 'b': 2 }) });
       *
       * _.hasIn(object, 'a');
       * // => true
       *
       * _.hasIn(object, 'a.b');
       * // => true
       *
       * _.hasIn(object, ['a', 'b']);
       * // => true
       *
       * _.hasIn(object, 'b');
       * // => false
       */
      function hasIn(object, path) {
        return object != null && hasPath(object, path, baseHasIn);
      }

      /**
       * Creates an object composed of the inverted keys and values of `object`.
       * If `object` contains duplicate values, subsequent values overwrite
       * property assignments of previous values.
       *
       * @static
       * @memberOf _
       * @since 0.7.0
       * @category Object
       * @param {Object} object The object to invert.
       * @returns {Object} Returns the new inverted object.
       * @example
       *
       * var object = { 'a': 1, 'b': 2, 'c': 1 };
       *
       * _.invert(object);
       * // => { '1': 'c', '2': 'b' }
       */
      var invert = createInverter(function(result, value, key) {
        if (value != null &&
            typeof value.toString != 'function') {
          value = nativeObjectToString.call(value);
        }

        result[value] = key;
      }, constant(identity));

      /**
       * This method is like `_.invert` except that the inverted object is generated
       * from the results of running each element of `object` thru `iteratee`. The
       * corresponding inverted value of each inverted key is an array of keys
       * responsible for generating the inverted value. The iteratee is invoked
       * with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.1.0
       * @category Object
       * @param {Object} object The object to invert.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Object} Returns the new inverted object.
       * @example
       *
       * var object = { 'a': 1, 'b': 2, 'c': 1 };
       *
       * _.invertBy(object);
       * // => { '1': ['a', 'c'], '2': ['b'] }
       *
       * _.invertBy(object, function(value) {
       *   return 'group' + value;
       * });
       * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
       */
      var invertBy = createInverter(function(result, value, key) {
        if (value != null &&
            typeof value.toString != 'function') {
          value = nativeObjectToString.call(value);
        }

        if (hasOwnProperty.call(result, value)) {
          result[value].push(key);
        } else {
          result[value] = [key];
        }
      }, getIteratee);

      /**
       * Invokes the method at `path` of `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the method to invoke.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {*} Returns the result of the invoked method.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
       *
       * _.invoke(object, 'a[0].b.c.slice', 1, 3);
       * // => [2, 3]
       */
      var invoke = baseRest(baseInvoke);

      /**
       * Creates an array of the own enumerable property names of `object`.
       *
       * **Note:** Non-object values are coerced to objects. See the
       * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
       * for more details.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.keys(new Foo);
       * // => ['a', 'b'] (iteration order is not guaranteed)
       *
       * _.keys('hi');
       * // => ['0', '1']
       */
      function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }

      /**
       * Creates an array of the own and inherited enumerable property names of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.keysIn(new Foo);
       * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
       */
      function keysIn(object) {
        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
      }

      /**
       * The opposite of `_.mapValues`; this method creates an object with the
       * same values as `object` and keys generated by running each own enumerable
       * string keyed property of `object` thru `iteratee`. The iteratee is invoked
       * with three arguments: (value, key, object).
       *
       * @static
       * @memberOf _
       * @since 3.8.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns the new mapped object.
       * @see _.mapValues
       * @example
       *
       * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
       *   return key + value;
       * });
       * // => { 'a1': 1, 'b2': 2 }
       */
      function mapKeys(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);

        baseForOwn(object, function(value, key, object) {
          baseAssignValue(result, iteratee(value, key, object), value);
        });
        return result;
      }

      /**
       * Creates an object with the same keys as `object` and values generated
       * by running each own enumerable string keyed property of `object` thru
       * `iteratee`. The iteratee is invoked with three arguments:
       * (value, key, object).
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns the new mapped object.
       * @see _.mapKeys
       * @example
       *
       * var users = {
       *   'fred':    { 'user': 'fred',    'age': 40 },
       *   'pebbles': { 'user': 'pebbles', 'age': 1 }
       * };
       *
       * _.mapValues(users, function(o) { return o.age; });
       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
       *
       * // The `_.property` iteratee shorthand.
       * _.mapValues(users, 'age');
       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
       */
      function mapValues(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);

        baseForOwn(object, function(value, key, object) {
          baseAssignValue(result, key, iteratee(value, key, object));
        });
        return result;
      }

      /**
       * This method is like `_.assign` except that it recursively merges own and
       * inherited enumerable string keyed properties of source objects into the
       * destination object. Source properties that resolve to `undefined` are
       * skipped if a destination value exists. Array and plain object properties
       * are merged recursively. Other objects and value types are overridden by
       * assignment. Source objects are applied from left to right. Subsequent
       * sources overwrite property assignments of previous sources.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {
       *   'a': [{ 'b': 2 }, { 'd': 4 }]
       * };
       *
       * var other = {
       *   'a': [{ 'c': 3 }, { 'e': 5 }]
       * };
       *
       * _.merge(object, other);
       * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
       */
      var merge = createAssigner(function(object, source, srcIndex) {
        baseMerge(object, source, srcIndex);
      });

      /**
       * This method is like `_.merge` except that it accepts `customizer` which
       * is invoked to produce the merged values of the destination and source
       * properties. If `customizer` returns `undefined`, merging is handled by the
       * method instead. The `customizer` is invoked with six arguments:
       * (objValue, srcValue, key, object, source, stack).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} customizer The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   if (_.isArray(objValue)) {
       *     return objValue.concat(srcValue);
       *   }
       * }
       *
       * var object = { 'a': [1], 'b': [2] };
       * var other = { 'a': [3], 'b': [4] };
       *
       * _.mergeWith(object, other, customizer);
       * // => { 'a': [1, 3], 'b': [2, 4] }
       */
      var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
        baseMerge(object, source, srcIndex, customizer);
      });

      /**
       * The opposite of `_.pick`; this method creates an object composed of the
       * own and inherited enumerable property paths of `object` that are not omitted.
       *
       * **Note:** This method is considerably slower than `_.pick`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The source object.
       * @param {...(string|string[])} [paths] The property paths to omit.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.omit(object, ['a', 'c']);
       * // => { 'b': '2' }
       */
      var omit = flatRest(function(object, paths) {
        var result = {};
        if (object == null) {
          return result;
        }
        var isDeep = false;
        paths = arrayMap(paths, function(path) {
          path = castPath(path, object);
          isDeep || (isDeep = path.length > 1);
          return path;
        });
        copyObject(object, getAllKeysIn(object), result);
        if (isDeep) {
          result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
        }
        var length = paths.length;
        while (length--) {
          baseUnset(result, paths[length]);
        }
        return result;
      });

      /**
       * The opposite of `_.pickBy`; this method creates an object composed of
       * the own and inherited enumerable string keyed properties of `object` that
       * `predicate` doesn't return truthy for. The predicate is invoked with two
       * arguments: (value, key).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The source object.
       * @param {Function} [predicate=_.identity] The function invoked per property.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.omitBy(object, _.isNumber);
       * // => { 'b': '2' }
       */
      function omitBy(object, predicate) {
        return pickBy(object, negate(getIteratee(predicate)));
      }

      /**
       * Creates an object composed of the picked `object` properties.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The source object.
       * @param {...(string|string[])} [paths] The property paths to pick.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.pick(object, ['a', 'c']);
       * // => { 'a': 1, 'c': 3 }
       */
      var pick = flatRest(function(object, paths) {
        return object == null ? {} : basePick(object, paths);
      });

      /**
       * Creates an object composed of the `object` properties `predicate` returns
       * truthy for. The predicate is invoked with two arguments: (value, key).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The source object.
       * @param {Function} [predicate=_.identity] The function invoked per property.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.pickBy(object, _.isNumber);
       * // => { 'a': 1, 'c': 3 }
       */
      function pickBy(object, predicate) {
        if (object == null) {
          return {};
        }
        var props = arrayMap(getAllKeysIn(object), function(prop) {
          return [prop];
        });
        predicate = getIteratee(predicate);
        return basePickBy(object, props, function(value, path) {
          return predicate(value, path[0]);
        });
      }

      /**
       * This method is like `_.get` except that if the resolved value is a
       * function it's invoked with the `this` binding of its parent object and
       * its result is returned.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to resolve.
       * @param {*} [defaultValue] The value returned for `undefined` resolved values.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
       *
       * _.result(object, 'a[0].b.c1');
       * // => 3
       *
       * _.result(object, 'a[0].b.c2');
       * // => 4
       *
       * _.result(object, 'a[0].b.c3', 'default');
       * // => 'default'
       *
       * _.result(object, 'a[0].b.c3', _.constant('default'));
       * // => 'default'
       */
      function result(object, path, defaultValue) {
        path = castPath(path, object);

        var index = -1,
            length = path.length;

        // Ensure the loop is entered when path is empty.
        if (!length) {
          length = 1;
          object = undefined$1;
        }
        while (++index < length) {
          var value = object == null ? undefined$1 : object[toKey(path[index])];
          if (value === undefined$1) {
            index = length;
            value = defaultValue;
          }
          object = isFunction(value) ? value.call(object) : value;
        }
        return object;
      }

      /**
       * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
       * it's created. Arrays are created for missing index properties while objects
       * are created for all other missing properties. Use `_.setWith` to customize
       * `path` creation.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.set(object, 'a[0].b.c', 4);
       * console.log(object.a[0].b.c);
       * // => 4
       *
       * _.set(object, ['x', '0', 'y', 'z'], 5);
       * console.log(object.x[0].y.z);
       * // => 5
       */
      function set(object, path, value) {
        return object == null ? object : baseSet(object, path, value);
      }

      /**
       * This method is like `_.set` except that it accepts `customizer` which is
       * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
       * path creation is handled by the method instead. The `customizer` is invoked
       * with three arguments: (nsValue, key, nsObject).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {*} value The value to set.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {};
       *
       * _.setWith(object, '[0][1]', 'a', Object);
       * // => { '0': { '1': 'a' } }
       */
      function setWith(object, path, value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined$1;
        return object == null ? object : baseSet(object, path, value, customizer);
      }

      /**
       * Creates an array of own enumerable string keyed-value pairs for `object`
       * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
       * entries are returned.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias entries
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the key-value pairs.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.toPairs(new Foo);
       * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
       */
      var toPairs = createToPairs(keys);

      /**
       * Creates an array of own and inherited enumerable string keyed-value pairs
       * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
       * or set, its entries are returned.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias entriesIn
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the key-value pairs.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.toPairsIn(new Foo);
       * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
       */
      var toPairsIn = createToPairs(keysIn);

      /**
       * An alternative to `_.reduce`; this method transforms `object` to a new
       * `accumulator` object which is the result of running each of its own
       * enumerable string keyed properties thru `iteratee`, with each invocation
       * potentially mutating the `accumulator` object. If `accumulator` is not
       * provided, a new object with the same `[[Prototype]]` will be used. The
       * iteratee is invoked with four arguments: (accumulator, value, key, object).
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @since 1.3.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The custom accumulator value.
       * @returns {*} Returns the accumulated value.
       * @example
       *
       * _.transform([2, 3, 4], function(result, n) {
       *   result.push(n *= n);
       *   return n % 2 == 0;
       * }, []);
       * // => [4, 9]
       *
       * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
       *   (result[value] || (result[value] = [])).push(key);
       * }, {});
       * // => { '1': ['a', 'c'], '2': ['b'] }
       */
      function transform(object, iteratee, accumulator) {
        var isArr = isArray(object),
            isArrLike = isArr || isBuffer(object) || isTypedArray(object);

        iteratee = getIteratee(iteratee, 4);
        if (accumulator == null) {
          var Ctor = object && object.constructor;
          if (isArrLike) {
            accumulator = isArr ? new Ctor : [];
          }
          else if (isObject(object)) {
            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
          }
          else {
            accumulator = {};
          }
        }
        (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
          return iteratee(accumulator, value, index, object);
        });
        return accumulator;
      }

      /**
       * Removes the property at `path` of `object`.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to unset.
       * @returns {boolean} Returns `true` if the property is deleted, else `false`.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 7 } }] };
       * _.unset(object, 'a[0].b.c');
       * // => true
       *
       * console.log(object);
       * // => { 'a': [{ 'b': {} }] };
       *
       * _.unset(object, ['a', '0', 'b', 'c']);
       * // => true
       *
       * console.log(object);
       * // => { 'a': [{ 'b': {} }] };
       */
      function unset(object, path) {
        return object == null ? true : baseUnset(object, path);
      }

      /**
       * This method is like `_.set` except that accepts `updater` to produce the
       * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
       * is invoked with one argument: (value).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.6.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {Function} updater The function to produce the updated value.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.update(object, 'a[0].b.c', function(n) { return n * n; });
       * console.log(object.a[0].b.c);
       * // => 9
       *
       * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
       * console.log(object.x[0].y.z);
       * // => 0
       */
      function update(object, path, updater) {
        return object == null ? object : baseUpdate(object, path, castFunction(updater));
      }

      /**
       * This method is like `_.update` except that it accepts `customizer` which is
       * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
       * path creation is handled by the method instead. The `customizer` is invoked
       * with three arguments: (nsValue, key, nsObject).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.6.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {Function} updater The function to produce the updated value.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {};
       *
       * _.updateWith(object, '[0][1]', _.constant('a'), Object);
       * // => { '0': { '1': 'a' } }
       */
      function updateWith(object, path, updater, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined$1;
        return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
      }

      /**
       * Creates an array of the own enumerable string keyed property values of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property values.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.values(new Foo);
       * // => [1, 2] (iteration order is not guaranteed)
       *
       * _.values('hi');
       * // => ['h', 'i']
       */
      function values(object) {
        return object == null ? [] : baseValues(object, keys(object));
      }

      /**
       * Creates an array of the own and inherited enumerable string keyed property
       * values of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property values.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.valuesIn(new Foo);
       * // => [1, 2, 3] (iteration order is not guaranteed)
       */
      function valuesIn(object) {
        return object == null ? [] : baseValues(object, keysIn(object));
      }

      /*------------------------------------------------------------------------*/

      /**
       * Clamps `number` within the inclusive `lower` and `upper` bounds.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Number
       * @param {number} number The number to clamp.
       * @param {number} [lower] The lower bound.
       * @param {number} upper The upper bound.
       * @returns {number} Returns the clamped number.
       * @example
       *
       * _.clamp(-10, -5, 5);
       * // => -5
       *
       * _.clamp(10, -5, 5);
       * // => 5
       */
      function clamp(number, lower, upper) {
        if (upper === undefined$1) {
          upper = lower;
          lower = undefined$1;
        }
        if (upper !== undefined$1) {
          upper = toNumber(upper);
          upper = upper === upper ? upper : 0;
        }
        if (lower !== undefined$1) {
          lower = toNumber(lower);
          lower = lower === lower ? lower : 0;
        }
        return baseClamp(toNumber(number), lower, upper);
      }

      /**
       * Checks if `n` is between `start` and up to, but not including, `end`. If
       * `end` is not specified, it's set to `start` with `start` then set to `0`.
       * If `start` is greater than `end` the params are swapped to support
       * negative ranges.
       *
       * @static
       * @memberOf _
       * @since 3.3.0
       * @category Number
       * @param {number} number The number to check.
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
       * @see _.range, _.rangeRight
       * @example
       *
       * _.inRange(3, 2, 4);
       * // => true
       *
       * _.inRange(4, 8);
       * // => true
       *
       * _.inRange(4, 2);
       * // => false
       *
       * _.inRange(2, 2);
       * // => false
       *
       * _.inRange(1.2, 2);
       * // => true
       *
       * _.inRange(5.2, 4);
       * // => false
       *
       * _.inRange(-3, -2, -6);
       * // => true
       */
      function inRange(number, start, end) {
        start = toFinite(start);
        if (end === undefined$1) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        number = toNumber(number);
        return baseInRange(number, start, end);
      }

      /**
       * Produces a random number between the inclusive `lower` and `upper` bounds.
       * If only one argument is provided a number between `0` and the given number
       * is returned. If `floating` is `true`, or either `lower` or `upper` are
       * floats, a floating-point number is returned instead of an integer.
       *
       * **Note:** JavaScript follows the IEEE-754 standard for resolving
       * floating-point values which can produce unexpected results.
       *
       * @static
       * @memberOf _
       * @since 0.7.0
       * @category Number
       * @param {number} [lower=0] The lower bound.
       * @param {number} [upper=1] The upper bound.
       * @param {boolean} [floating] Specify returning a floating-point number.
       * @returns {number} Returns the random number.
       * @example
       *
       * _.random(0, 5);
       * // => an integer between 0 and 5
       *
       * _.random(5);
       * // => also an integer between 0 and 5
       *
       * _.random(5, true);
       * // => a floating-point number between 0 and 5
       *
       * _.random(1.2, 5.2);
       * // => a floating-point number between 1.2 and 5.2
       */
      function random(lower, upper, floating) {
        if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
          upper = floating = undefined$1;
        }
        if (floating === undefined$1) {
          if (typeof upper == 'boolean') {
            floating = upper;
            upper = undefined$1;
          }
          else if (typeof lower == 'boolean') {
            floating = lower;
            lower = undefined$1;
          }
        }
        if (lower === undefined$1 && upper === undefined$1) {
          lower = 0;
          upper = 1;
        }
        else {
          lower = toFinite(lower);
          if (upper === undefined$1) {
            upper = lower;
            lower = 0;
          } else {
            upper = toFinite(upper);
          }
        }
        if (lower > upper) {
          var temp = lower;
          lower = upper;
          upper = temp;
        }
        if (floating || lower % 1 || upper % 1) {
          var rand = nativeRandom();
          return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
        }
        return baseRandom(lower, upper);
      }

      /*------------------------------------------------------------------------*/

      /**
       * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the camel cased string.
       * @example
       *
       * _.camelCase('Foo Bar');
       * // => 'fooBar'
       *
       * _.camelCase('--foo-bar--');
       * // => 'fooBar'
       *
       * _.camelCase('__FOO_BAR__');
       * // => 'fooBar'
       */
      var camelCase = createCompounder(function(result, word, index) {
        word = word.toLowerCase();
        return result + (index ? capitalize(word) : word);
      });

      /**
       * Converts the first character of `string` to upper case and the remaining
       * to lower case.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to capitalize.
       * @returns {string} Returns the capitalized string.
       * @example
       *
       * _.capitalize('FRED');
       * // => 'Fred'
       */
      function capitalize(string) {
        return upperFirst(toString(string).toLowerCase());
      }

      /**
       * Deburrs `string` by converting
       * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
       * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
       * letters to basic Latin letters and removing
       * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to deburr.
       * @returns {string} Returns the deburred string.
       * @example
       *
       * _.deburr('déjà vu');
       * // => 'deja vu'
       */
      function deburr(string) {
        string = toString(string);
        return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
      }

      /**
       * Checks if `string` ends with the given target string.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {string} [target] The string to search for.
       * @param {number} [position=string.length] The position to search up to.
       * @returns {boolean} Returns `true` if `string` ends with `target`,
       *  else `false`.
       * @example
       *
       * _.endsWith('abc', 'c');
       * // => true
       *
       * _.endsWith('abc', 'b');
       * // => false
       *
       * _.endsWith('abc', 'b', 2);
       * // => true
       */
      function endsWith(string, target, position) {
        string = toString(string);
        target = baseToString(target);

        var length = string.length;
        position = position === undefined$1
          ? length
          : baseClamp(toInteger(position), 0, length);

        var end = position;
        position -= target.length;
        return position >= 0 && string.slice(position, end) == target;
      }

      /**
       * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
       * corresponding HTML entities.
       *
       * **Note:** No other characters are escaped. To escape additional
       * characters use a third-party library like [_he_](https://mths.be/he).
       *
       * Though the ">" character is escaped for symmetry, characters like
       * ">" and "/" don't need escaping in HTML and have no special meaning
       * unless they're part of a tag or unquoted attribute value. See
       * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
       * (under "semi-related fun fact") for more details.
       *
       * When working with HTML you should always
       * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
       * XSS vectors.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category String
       * @param {string} [string=''] The string to escape.
       * @returns {string} Returns the escaped string.
       * @example
       *
       * _.escape('fred, barney, & pebbles');
       * // => 'fred, barney, &amp; pebbles'
       */
      function escape(string) {
        string = toString(string);
        return (string && reHasUnescapedHtml.test(string))
          ? string.replace(reUnescapedHtml, escapeHtmlChar)
          : string;
      }

      /**
       * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
       * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to escape.
       * @returns {string} Returns the escaped string.
       * @example
       *
       * _.escapeRegExp('[lodash](https://lodash.com/)');
       * // => '\[lodash\]\(https://lodash\.com/\)'
       */
      function escapeRegExp(string) {
        string = toString(string);
        return (string && reHasRegExpChar.test(string))
          ? string.replace(reRegExpChar, '\\$&')
          : string;
      }

      /**
       * Converts `string` to
       * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the kebab cased string.
       * @example
       *
       * _.kebabCase('Foo Bar');
       * // => 'foo-bar'
       *
       * _.kebabCase('fooBar');
       * // => 'foo-bar'
       *
       * _.kebabCase('__FOO_BAR__');
       * // => 'foo-bar'
       */
      var kebabCase = createCompounder(function(result, word, index) {
        return result + (index ? '-' : '') + word.toLowerCase();
      });

      /**
       * Converts `string`, as space separated words, to lower case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the lower cased string.
       * @example
       *
       * _.lowerCase('--Foo-Bar--');
       * // => 'foo bar'
       *
       * _.lowerCase('fooBar');
       * // => 'foo bar'
       *
       * _.lowerCase('__FOO_BAR__');
       * // => 'foo bar'
       */
      var lowerCase = createCompounder(function(result, word, index) {
        return result + (index ? ' ' : '') + word.toLowerCase();
      });

      /**
       * Converts the first character of `string` to lower case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.lowerFirst('Fred');
       * // => 'fred'
       *
       * _.lowerFirst('FRED');
       * // => 'fRED'
       */
      var lowerFirst = createCaseFirst('toLowerCase');

      /**
       * Pads `string` on the left and right sides if it's shorter than `length`.
       * Padding characters are truncated if they can't be evenly divided by `length`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.pad('abc', 8);
       * // => '  abc   '
       *
       * _.pad('abc', 8, '_-');
       * // => '_-abc_-_'
       *
       * _.pad('abc', 3);
       * // => 'abc'
       */
      function pad(string, length, chars) {
        string = toString(string);
        length = toInteger(length);

        var strLength = length ? stringSize(string) : 0;
        if (!length || strLength >= length) {
          return string;
        }
        var mid = (length - strLength) / 2;
        return (
          createPadding(nativeFloor(mid), chars) +
          string +
          createPadding(nativeCeil(mid), chars)
        );
      }

      /**
       * Pads `string` on the right side if it's shorter than `length`. Padding
       * characters are truncated if they exceed `length`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.padEnd('abc', 6);
       * // => 'abc   '
       *
       * _.padEnd('abc', 6, '_-');
       * // => 'abc_-_'
       *
       * _.padEnd('abc', 3);
       * // => 'abc'
       */
      function padEnd(string, length, chars) {
        string = toString(string);
        length = toInteger(length);

        var strLength = length ? stringSize(string) : 0;
        return (length && strLength < length)
          ? (string + createPadding(length - strLength, chars))
          : string;
      }

      /**
       * Pads `string` on the left side if it's shorter than `length`. Padding
       * characters are truncated if they exceed `length`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.padStart('abc', 6);
       * // => '   abc'
       *
       * _.padStart('abc', 6, '_-');
       * // => '_-_abc'
       *
       * _.padStart('abc', 3);
       * // => 'abc'
       */
      function padStart(string, length, chars) {
        string = toString(string);
        length = toInteger(length);

        var strLength = length ? stringSize(string) : 0;
        return (length && strLength < length)
          ? (createPadding(length - strLength, chars) + string)
          : string;
      }

      /**
       * Converts `string` to an integer of the specified radix. If `radix` is
       * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
       * hexadecimal, in which case a `radix` of `16` is used.
       *
       * **Note:** This method aligns with the
       * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category String
       * @param {string} string The string to convert.
       * @param {number} [radix=10] The radix to interpret `value` by.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.parseInt('08');
       * // => 8
       *
       * _.map(['6', '08', '10'], _.parseInt);
       * // => [6, 8, 10]
       */
      function parseInt(string, radix, guard) {
        if (guard || radix == null) {
          radix = 0;
        } else if (radix) {
          radix = +radix;
        }
        return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
      }

      /**
       * Repeats the given string `n` times.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to repeat.
       * @param {number} [n=1] The number of times to repeat the string.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the repeated string.
       * @example
       *
       * _.repeat('*', 3);
       * // => '***'
       *
       * _.repeat('abc', 2);
       * // => 'abcabc'
       *
       * _.repeat('abc', 0);
       * // => ''
       */
      function repeat(string, n, guard) {
        if ((guard ? isIterateeCall(string, n, guard) : n === undefined$1)) {
          n = 1;
        } else {
          n = toInteger(n);
        }
        return baseRepeat(toString(string), n);
      }

      /**
       * Replaces matches for `pattern` in `string` with `replacement`.
       *
       * **Note:** This method is based on
       * [`String#replace`](https://mdn.io/String/replace).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to modify.
       * @param {RegExp|string} pattern The pattern to replace.
       * @param {Function|string} replacement The match replacement.
       * @returns {string} Returns the modified string.
       * @example
       *
       * _.replace('Hi Fred', 'Fred', 'Barney');
       * // => 'Hi Barney'
       */
      function replace() {
        var args = arguments,
            string = toString(args[0]);

        return args.length < 3 ? string : string.replace(args[1], args[2]);
      }

      /**
       * Converts `string` to
       * [snake case](https://en.wikipedia.org/wiki/Snake_case).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the snake cased string.
       * @example
       *
       * _.snakeCase('Foo Bar');
       * // => 'foo_bar'
       *
       * _.snakeCase('fooBar');
       * // => 'foo_bar'
       *
       * _.snakeCase('--FOO-BAR--');
       * // => 'foo_bar'
       */
      var snakeCase = createCompounder(function(result, word, index) {
        return result + (index ? '_' : '') + word.toLowerCase();
      });

      /**
       * Splits `string` by `separator`.
       *
       * **Note:** This method is based on
       * [`String#split`](https://mdn.io/String/split).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to split.
       * @param {RegExp|string} separator The separator pattern to split by.
       * @param {number} [limit] The length to truncate results to.
       * @returns {Array} Returns the string segments.
       * @example
       *
       * _.split('a-b-c', '-', 2);
       * // => ['a', 'b']
       */
      function split(string, separator, limit) {
        if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
          separator = limit = undefined$1;
        }
        limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
        if (!limit) {
          return [];
        }
        string = toString(string);
        if (string && (
              typeof separator == 'string' ||
              (separator != null && !isRegExp(separator))
            )) {
          separator = baseToString(separator);
          if (!separator && hasUnicode(string)) {
            return castSlice(stringToArray(string), 0, limit);
          }
        }
        return string.split(separator, limit);
      }

      /**
       * Converts `string` to
       * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
       *
       * @static
       * @memberOf _
       * @since 3.1.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the start cased string.
       * @example
       *
       * _.startCase('--foo-bar--');
       * // => 'Foo Bar'
       *
       * _.startCase('fooBar');
       * // => 'Foo Bar'
       *
       * _.startCase('__FOO_BAR__');
       * // => 'FOO BAR'
       */
      var startCase = createCompounder(function(result, word, index) {
        return result + (index ? ' ' : '') + upperFirst(word);
      });

      /**
       * Checks if `string` starts with the given target string.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {string} [target] The string to search for.
       * @param {number} [position=0] The position to search from.
       * @returns {boolean} Returns `true` if `string` starts with `target`,
       *  else `false`.
       * @example
       *
       * _.startsWith('abc', 'a');
       * // => true
       *
       * _.startsWith('abc', 'b');
       * // => false
       *
       * _.startsWith('abc', 'b', 1);
       * // => true
       */
      function startsWith(string, target, position) {
        string = toString(string);
        position = position == null
          ? 0
          : baseClamp(toInteger(position), 0, string.length);

        target = baseToString(target);
        return string.slice(position, position + target.length) == target;
      }

      /**
       * Creates a compiled template function that can interpolate data properties
       * in "interpolate" delimiters, HTML-escape interpolated data properties in
       * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
       * properties may be accessed as free variables in the template. If a setting
       * object is given, it takes precedence over `_.templateSettings` values.
       *
       * **Note:** In the development build `_.template` utilizes
       * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
       * for easier debugging.
       *
       * For more information on precompiling templates see
       * [lodash's custom builds documentation](https://lodash.com/custom-builds).
       *
       * For more information on Chrome extension sandboxes see
       * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category String
       * @param {string} [string=''] The template string.
       * @param {Object} [options={}] The options object.
       * @param {RegExp} [options.escape=_.templateSettings.escape]
       *  The HTML "escape" delimiter.
       * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
       *  The "evaluate" delimiter.
       * @param {Object} [options.imports=_.templateSettings.imports]
       *  An object to import into the template as free variables.
       * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
       *  The "interpolate" delimiter.
       * @param {string} [options.sourceURL='lodash.templateSources[n]']
       *  The sourceURL of the compiled template.
       * @param {string} [options.variable='obj']
       *  The data object variable name.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the compiled template function.
       * @example
       *
       * // Use the "interpolate" delimiter to create a compiled template.
       * var compiled = _.template('hello <%= user %>!');
       * compiled({ 'user': 'fred' });
       * // => 'hello fred!'
       *
       * // Use the HTML "escape" delimiter to escape data property values.
       * var compiled = _.template('<b><%- value %></b>');
       * compiled({ 'value': '<script>' });
       * // => '<b>&lt;script&gt;</b>'
       *
       * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
       * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
       * compiled({ 'users': ['fred', 'barney'] });
       * // => '<li>fred</li><li>barney</li>'
       *
       * // Use the internal `print` function in "evaluate" delimiters.
       * var compiled = _.template('<% print("hello " + user); %>!');
       * compiled({ 'user': 'barney' });
       * // => 'hello barney!'
       *
       * // Use the ES template literal delimiter as an "interpolate" delimiter.
       * // Disable support by replacing the "interpolate" delimiter.
       * var compiled = _.template('hello ${ user }!');
       * compiled({ 'user': 'pebbles' });
       * // => 'hello pebbles!'
       *
       * // Use backslashes to treat delimiters as plain text.
       * var compiled = _.template('<%= "\\<%- value %\\>" %>');
       * compiled({ 'value': 'ignored' });
       * // => '<%- value %>'
       *
       * // Use the `imports` option to import `jQuery` as `jq`.
       * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
       * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
       * compiled({ 'users': ['fred', 'barney'] });
       * // => '<li>fred</li><li>barney</li>'
       *
       * // Use the `sourceURL` option to specify a custom sourceURL for the template.
       * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
       * compiled(data);
       * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
       *
       * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
       * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
       * compiled.source;
       * // => function(data) {
       * //   var __t, __p = '';
       * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
       * //   return __p;
       * // }
       *
       * // Use custom template delimiters.
       * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
       * var compiled = _.template('hello {{ user }}!');
       * compiled({ 'user': 'mustache' });
       * // => 'hello mustache!'
       *
       * // Use the `source` property to inline compiled templates for meaningful
       * // line numbers in error messages and stack traces.
       * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
       *   var JST = {\
       *     "main": ' + _.template(mainText).source + '\
       *   };\
       * ');
       */
      function template(string, options, guard) {
        // Based on John Resig's `tmpl` implementation
        // (http://ejohn.org/blog/javascript-micro-templating/)
        // and Laura Doktorova's doT.js (https://github.com/olado/doT).
        var settings = lodash.templateSettings;

        if (guard && isIterateeCall(string, options, guard)) {
          options = undefined$1;
        }
        string = toString(string);
        options = assignInWith({}, options, settings, customDefaultsAssignIn);

        var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
            importsKeys = keys(imports),
            importsValues = baseValues(imports, importsKeys);

        var isEscaping,
            isEvaluating,
            index = 0,
            interpolate = options.interpolate || reNoMatch,
            source = "__p += '";

        // Compile the regexp to match each delimiter.
        var reDelimiters = RegExp(
          (options.escape || reNoMatch).source + '|' +
          interpolate.source + '|' +
          (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
          (options.evaluate || reNoMatch).source + '|$'
        , 'g');

        // Use a sourceURL for easier debugging.
        // The sourceURL gets injected into the source that's eval-ed, so be careful
        // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
        // and escape the comment, thus injecting code that gets evaled.
        var sourceURL = '//# sourceURL=' +
          (hasOwnProperty.call(options, 'sourceURL')
            ? (options.sourceURL + '').replace(/\s/g, ' ')
            : ('lodash.templateSources[' + (++templateCounter) + ']')
          ) + '\n';

        string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
          interpolateValue || (interpolateValue = esTemplateValue);

          // Escape characters that can't be included in string literals.
          source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

          // Replace delimiters with snippets.
          if (escapeValue) {
            isEscaping = true;
            source += "' +\n__e(" + escapeValue + ") +\n'";
          }
          if (evaluateValue) {
            isEvaluating = true;
            source += "';\n" + evaluateValue + ";\n__p += '";
          }
          if (interpolateValue) {
            source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
          }
          index = offset + match.length;

          // The JS engine embedded in Adobe products needs `match` returned in
          // order to produce the correct `offset` value.
          return match;
        });

        source += "';\n";

        // If `variable` is not specified wrap a with-statement around the generated
        // code to add the data object to the top of the scope chain.
        var variable = hasOwnProperty.call(options, 'variable') && options.variable;
        if (!variable) {
          source = 'with (obj) {\n' + source + '\n}\n';
        }
        // Throw an error if a forbidden character was found in `variable`, to prevent
        // potential command injection attacks.
        else if (reForbiddenIdentifierChars.test(variable)) {
          throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
        }

        // Cleanup code by stripping empty strings.
        source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
          .replace(reEmptyStringMiddle, '$1')
          .replace(reEmptyStringTrailing, '$1;');

        // Frame code as the function body.
        source = 'function(' + (variable || 'obj') + ') {\n' +
          (variable
            ? ''
            : 'obj || (obj = {});\n'
          ) +
          "var __t, __p = ''" +
          (isEscaping
             ? ', __e = _.escape'
             : ''
          ) +
          (isEvaluating
            ? ', __j = Array.prototype.join;\n' +
              "function print() { __p += __j.call(arguments, '') }\n"
            : ';\n'
          ) +
          source +
          'return __p\n}';

        var result = attempt(function() {
          return Function(importsKeys, sourceURL + 'return ' + source)
            .apply(undefined$1, importsValues);
        });

        // Provide the compiled function's source by its `toString` method or
        // the `source` property as a convenience for inlining compiled templates.
        result.source = source;
        if (isError(result)) {
          throw result;
        }
        return result;
      }

      /**
       * Converts `string`, as a whole, to lower case just like
       * [String#toLowerCase](https://mdn.io/toLowerCase).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the lower cased string.
       * @example
       *
       * _.toLower('--Foo-Bar--');
       * // => '--foo-bar--'
       *
       * _.toLower('fooBar');
       * // => 'foobar'
       *
       * _.toLower('__FOO_BAR__');
       * // => '__foo_bar__'
       */
      function toLower(value) {
        return toString(value).toLowerCase();
      }

      /**
       * Converts `string`, as a whole, to upper case just like
       * [String#toUpperCase](https://mdn.io/toUpperCase).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the upper cased string.
       * @example
       *
       * _.toUpper('--foo-bar--');
       * // => '--FOO-BAR--'
       *
       * _.toUpper('fooBar');
       * // => 'FOOBAR'
       *
       * _.toUpper('__foo_bar__');
       * // => '__FOO_BAR__'
       */
      function toUpper(value) {
        return toString(value).toUpperCase();
      }

      /**
       * Removes leading and trailing whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trim('  abc  ');
       * // => 'abc'
       *
       * _.trim('-_-abc-_-', '_-');
       * // => 'abc'
       *
       * _.map(['  foo  ', '  bar  '], _.trim);
       * // => ['foo', 'bar']
       */
      function trim(string, chars, guard) {
        string = toString(string);
        if (string && (guard || chars === undefined$1)) {
          return baseTrim(string);
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string),
            chrSymbols = stringToArray(chars),
            start = charsStartIndex(strSymbols, chrSymbols),
            end = charsEndIndex(strSymbols, chrSymbols) + 1;

        return castSlice(strSymbols, start, end).join('');
      }

      /**
       * Removes trailing whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trimEnd('  abc  ');
       * // => '  abc'
       *
       * _.trimEnd('-_-abc-_-', '_-');
       * // => '-_-abc'
       */
      function trimEnd(string, chars, guard) {
        string = toString(string);
        if (string && (guard || chars === undefined$1)) {
          return string.slice(0, trimmedEndIndex(string) + 1);
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string),
            end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

        return castSlice(strSymbols, 0, end).join('');
      }

      /**
       * Removes leading whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trimStart('  abc  ');
       * // => 'abc  '
       *
       * _.trimStart('-_-abc-_-', '_-');
       * // => 'abc-_-'
       */
      function trimStart(string, chars, guard) {
        string = toString(string);
        if (string && (guard || chars === undefined$1)) {
          return string.replace(reTrimStart, '');
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string),
            start = charsStartIndex(strSymbols, stringToArray(chars));

        return castSlice(strSymbols, start).join('');
      }

      /**
       * Truncates `string` if it's longer than the given maximum string length.
       * The last characters of the truncated string are replaced with the omission
       * string which defaults to "...".
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to truncate.
       * @param {Object} [options={}] The options object.
       * @param {number} [options.length=30] The maximum string length.
       * @param {string} [options.omission='...'] The string to indicate text is omitted.
       * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
       * @returns {string} Returns the truncated string.
       * @example
       *
       * _.truncate('hi-diddly-ho there, neighborino');
       * // => 'hi-diddly-ho there, neighbo...'
       *
       * _.truncate('hi-diddly-ho there, neighborino', {
       *   'length': 24,
       *   'separator': ' '
       * });
       * // => 'hi-diddly-ho there,...'
       *
       * _.truncate('hi-diddly-ho there, neighborino', {
       *   'length': 24,
       *   'separator': /,? +/
       * });
       * // => 'hi-diddly-ho there...'
       *
       * _.truncate('hi-diddly-ho there, neighborino', {
       *   'omission': ' [...]'
       * });
       * // => 'hi-diddly-ho there, neig [...]'
       */
      function truncate(string, options) {
        var length = DEFAULT_TRUNC_LENGTH,
            omission = DEFAULT_TRUNC_OMISSION;

        if (isObject(options)) {
          var separator = 'separator' in options ? options.separator : separator;
          length = 'length' in options ? toInteger(options.length) : length;
          omission = 'omission' in options ? baseToString(options.omission) : omission;
        }
        string = toString(string);

        var strLength = string.length;
        if (hasUnicode(string)) {
          var strSymbols = stringToArray(string);
          strLength = strSymbols.length;
        }
        if (length >= strLength) {
          return string;
        }
        var end = length - stringSize(omission);
        if (end < 1) {
          return omission;
        }
        var result = strSymbols
          ? castSlice(strSymbols, 0, end).join('')
          : string.slice(0, end);

        if (separator === undefined$1) {
          return result + omission;
        }
        if (strSymbols) {
          end += (result.length - end);
        }
        if (isRegExp(separator)) {
          if (string.slice(end).search(separator)) {
            var match,
                substring = result;

            if (!separator.global) {
              separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
            }
            separator.lastIndex = 0;
            while ((match = separator.exec(substring))) {
              var newEnd = match.index;
            }
            result = result.slice(0, newEnd === undefined$1 ? end : newEnd);
          }
        } else if (string.indexOf(baseToString(separator), end) != end) {
          var index = result.lastIndexOf(separator);
          if (index > -1) {
            result = result.slice(0, index);
          }
        }
        return result + omission;
      }

      /**
       * The inverse of `_.escape`; this method converts the HTML entities
       * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
       * their corresponding characters.
       *
       * **Note:** No other HTML entities are unescaped. To unescape additional
       * HTML entities use a third-party library like [_he_](https://mths.be/he).
       *
       * @static
       * @memberOf _
       * @since 0.6.0
       * @category String
       * @param {string} [string=''] The string to unescape.
       * @returns {string} Returns the unescaped string.
       * @example
       *
       * _.unescape('fred, barney, &amp; pebbles');
       * // => 'fred, barney, & pebbles'
       */
      function unescape(string) {
        string = toString(string);
        return (string && reHasEscapedHtml.test(string))
          ? string.replace(reEscapedHtml, unescapeHtmlChar)
          : string;
      }

      /**
       * Converts `string`, as space separated words, to upper case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the upper cased string.
       * @example
       *
       * _.upperCase('--foo-bar');
       * // => 'FOO BAR'
       *
       * _.upperCase('fooBar');
       * // => 'FOO BAR'
       *
       * _.upperCase('__foo_bar__');
       * // => 'FOO BAR'
       */
      var upperCase = createCompounder(function(result, word, index) {
        return result + (index ? ' ' : '') + word.toUpperCase();
      });

      /**
       * Converts the first character of `string` to upper case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.upperFirst('fred');
       * // => 'Fred'
       *
       * _.upperFirst('FRED');
       * // => 'FRED'
       */
      var upperFirst = createCaseFirst('toUpperCase');

      /**
       * Splits `string` into an array of its words.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {RegExp|string} [pattern] The pattern to match words.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the words of `string`.
       * @example
       *
       * _.words('fred, barney, & pebbles');
       * // => ['fred', 'barney', 'pebbles']
       *
       * _.words('fred, barney, & pebbles', /[^, ]+/g);
       * // => ['fred', 'barney', '&', 'pebbles']
       */
      function words(string, pattern, guard) {
        string = toString(string);
        pattern = guard ? undefined$1 : pattern;

        if (pattern === undefined$1) {
          return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
        }
        return string.match(pattern) || [];
      }

      /*------------------------------------------------------------------------*/

      /**
       * Attempts to invoke `func`, returning either the result or the caught error
       * object. Any additional arguments are provided to `func` when it's invoked.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {Function} func The function to attempt.
       * @param {...*} [args] The arguments to invoke `func` with.
       * @returns {*} Returns the `func` result or error object.
       * @example
       *
       * // Avoid throwing errors for invalid selectors.
       * var elements = _.attempt(function(selector) {
       *   return document.querySelectorAll(selector);
       * }, '>_>');
       *
       * if (_.isError(elements)) {
       *   elements = [];
       * }
       */
      var attempt = baseRest(function(func, args) {
        try {
          return apply(func, undefined$1, args);
        } catch (e) {
          return isError(e) ? e : new Error(e);
        }
      });

      /**
       * Binds methods of an object to the object itself, overwriting the existing
       * method.
       *
       * **Note:** This method doesn't set the "length" property of bound functions.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {Object} object The object to bind and assign the bound methods to.
       * @param {...(string|string[])} methodNames The object method names to bind.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var view = {
       *   'label': 'docs',
       *   'click': function() {
       *     console.log('clicked ' + this.label);
       *   }
       * };
       *
       * _.bindAll(view, ['click']);
       * jQuery(element).on('click', view.click);
       * // => Logs 'clicked docs' when clicked.
       */
      var bindAll = flatRest(function(object, methodNames) {
        arrayEach(methodNames, function(key) {
          key = toKey(key);
          baseAssignValue(object, key, bind(object[key], object));
        });
        return object;
      });

      /**
       * Creates a function that iterates over `pairs` and invokes the corresponding
       * function of the first predicate to return truthy. The predicate-function
       * pairs are invoked with the `this` binding and arguments of the created
       * function.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {Array} pairs The predicate-function pairs.
       * @returns {Function} Returns the new composite function.
       * @example
       *
       * var func = _.cond([
       *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
       *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
       *   [_.stubTrue,                      _.constant('no match')]
       * ]);
       *
       * func({ 'a': 1, 'b': 2 });
       * // => 'matches A'
       *
       * func({ 'a': 0, 'b': 1 });
       * // => 'matches B'
       *
       * func({ 'a': '1', 'b': '2' });
       * // => 'no match'
       */
      function cond(pairs) {
        var length = pairs == null ? 0 : pairs.length,
            toIteratee = getIteratee();

        pairs = !length ? [] : arrayMap(pairs, function(pair) {
          if (typeof pair[1] != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          return [toIteratee(pair[0]), pair[1]];
        });

        return baseRest(function(args) {
          var index = -1;
          while (++index < length) {
            var pair = pairs[index];
            if (apply(pair[0], this, args)) {
              return apply(pair[1], this, args);
            }
          }
        });
      }

      /**
       * Creates a function that invokes the predicate properties of `source` with
       * the corresponding property values of a given object, returning `true` if
       * all predicates return truthy, else `false`.
       *
       * **Note:** The created function is equivalent to `_.conformsTo` with
       * `source` partially applied.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {Object} source The object of property predicates to conform to.
       * @returns {Function} Returns the new spec function.
       * @example
       *
       * var objects = [
       *   { 'a': 2, 'b': 1 },
       *   { 'a': 1, 'b': 2 }
       * ];
       *
       * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
       * // => [{ 'a': 1, 'b': 2 }]
       */
      function conforms(source) {
        return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
      }

      /**
       * Creates a function that returns `value`.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Util
       * @param {*} value The value to return from the new function.
       * @returns {Function} Returns the new constant function.
       * @example
       *
       * var objects = _.times(2, _.constant({ 'a': 1 }));
       *
       * console.log(objects);
       * // => [{ 'a': 1 }, { 'a': 1 }]
       *
       * console.log(objects[0] === objects[1]);
       * // => true
       */
      function constant(value) {
        return function() {
          return value;
        };
      }

      /**
       * Checks `value` to determine whether a default value should be returned in
       * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
       * or `undefined`.
       *
       * @static
       * @memberOf _
       * @since 4.14.0
       * @category Util
       * @param {*} value The value to check.
       * @param {*} defaultValue The default value.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * _.defaultTo(1, 10);
       * // => 1
       *
       * _.defaultTo(undefined, 10);
       * // => 10
       */
      function defaultTo(value, defaultValue) {
        return (value == null || value !== value) ? defaultValue : value;
      }

      /**
       * Creates a function that returns the result of invoking the given functions
       * with the `this` binding of the created function, where each successive
       * invocation is supplied the return value of the previous.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {...(Function|Function[])} [funcs] The functions to invoke.
       * @returns {Function} Returns the new composite function.
       * @see _.flowRight
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var addSquare = _.flow([_.add, square]);
       * addSquare(1, 2);
       * // => 9
       */
      var flow = createFlow();

      /**
       * This method is like `_.flow` except that it creates a function that
       * invokes the given functions from right to left.
       *
       * @static
       * @since 3.0.0
       * @memberOf _
       * @category Util
       * @param {...(Function|Function[])} [funcs] The functions to invoke.
       * @returns {Function} Returns the new composite function.
       * @see _.flow
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var addSquare = _.flowRight([square, _.add]);
       * addSquare(1, 2);
       * // => 9
       */
      var flowRight = createFlow(true);

      /**
       * This method returns the first argument it receives.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {*} value Any value.
       * @returns {*} Returns `value`.
       * @example
       *
       * var object = { 'a': 1 };
       *
       * console.log(_.identity(object) === object);
       * // => true
       */
      function identity(value) {
        return value;
      }

      /**
       * Creates a function that invokes `func` with the arguments of the created
       * function. If `func` is a property name, the created function returns the
       * property value for a given element. If `func` is an array or object, the
       * created function returns `true` for elements that contain the equivalent
       * source properties, otherwise it returns `false`.
       *
       * @static
       * @since 4.0.0
       * @memberOf _
       * @category Util
       * @param {*} [func=_.identity] The value to convert to a callback.
       * @returns {Function} Returns the callback.
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': true },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * // The `_.matches` iteratee shorthand.
       * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
       * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.filter(users, _.iteratee(['user', 'fred']));
       * // => [{ 'user': 'fred', 'age': 40 }]
       *
       * // The `_.property` iteratee shorthand.
       * _.map(users, _.iteratee('user'));
       * // => ['barney', 'fred']
       *
       * // Create custom iteratee shorthands.
       * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
       *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
       *     return func.test(string);
       *   };
       * });
       *
       * _.filter(['abc', 'def'], /ef/);
       * // => ['def']
       */
      function iteratee(func) {
        return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
      }

      /**
       * Creates a function that performs a partial deep comparison between a given
       * object and `source`, returning `true` if the given object has equivalent
       * property values, else `false`.
       *
       * **Note:** The created function is equivalent to `_.isMatch` with `source`
       * partially applied.
       *
       * Partial comparisons will match empty array and empty object `source`
       * values against any array or object value, respectively. See `_.isEqual`
       * for a list of supported value comparisons.
       *
       * **Note:** Multiple values can be checked by combining several matchers
       * using `_.overSome`
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {Object} source The object of property values to match.
       * @returns {Function} Returns the new spec function.
       * @example
       *
       * var objects = [
       *   { 'a': 1, 'b': 2, 'c': 3 },
       *   { 'a': 4, 'b': 5, 'c': 6 }
       * ];
       *
       * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
       * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
       *
       * // Checking for several possible values
       * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
       * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
       */
      function matches(source) {
        return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
      }

      /**
       * Creates a function that performs a partial deep comparison between the
       * value at `path` of a given object to `srcValue`, returning `true` if the
       * object value is equivalent, else `false`.
       *
       * **Note:** Partial comparisons will match empty array and empty object
       * `srcValue` values against any array or object value, respectively. See
       * `_.isEqual` for a list of supported value comparisons.
       *
       * **Note:** Multiple values can be checked by combining several matchers
       * using `_.overSome`
       *
       * @static
       * @memberOf _
       * @since 3.2.0
       * @category Util
       * @param {Array|string} path The path of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       * @example
       *
       * var objects = [
       *   { 'a': 1, 'b': 2, 'c': 3 },
       *   { 'a': 4, 'b': 5, 'c': 6 }
       * ];
       *
       * _.find(objects, _.matchesProperty('a', 4));
       * // => { 'a': 4, 'b': 5, 'c': 6 }
       *
       * // Checking for several possible values
       * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
       * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
       */
      function matchesProperty(path, srcValue) {
        return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
      }

      /**
       * Creates a function that invokes the method at `path` of a given object.
       * Any additional arguments are provided to the invoked method.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Util
       * @param {Array|string} path The path of the method to invoke.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {Function} Returns the new invoker function.
       * @example
       *
       * var objects = [
       *   { 'a': { 'b': _.constant(2) } },
       *   { 'a': { 'b': _.constant(1) } }
       * ];
       *
       * _.map(objects, _.method('a.b'));
       * // => [2, 1]
       *
       * _.map(objects, _.method(['a', 'b']));
       * // => [2, 1]
       */
      var method = baseRest(function(path, args) {
        return function(object) {
          return baseInvoke(object, path, args);
        };
      });

      /**
       * The opposite of `_.method`; this method creates a function that invokes
       * the method at a given path of `object`. Any additional arguments are
       * provided to the invoked method.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Util
       * @param {Object} object The object to query.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {Function} Returns the new invoker function.
       * @example
       *
       * var array = _.times(3, _.constant),
       *     object = { 'a': array, 'b': array, 'c': array };
       *
       * _.map(['a[2]', 'c[0]'], _.methodOf(object));
       * // => [2, 0]
       *
       * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
       * // => [2, 0]
       */
      var methodOf = baseRest(function(object, args) {
        return function(path) {
          return baseInvoke(object, path, args);
        };
      });

      /**
       * Adds all own enumerable string keyed function properties of a source
       * object to the destination object. If `object` is a function, then methods
       * are added to its prototype as well.
       *
       * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
       * avoid conflicts caused by modifying the original.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {Function|Object} [object=lodash] The destination object.
       * @param {Object} source The object of functions to add.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
       * @returns {Function|Object} Returns `object`.
       * @example
       *
       * function vowels(string) {
       *   return _.filter(string, function(v) {
       *     return /[aeiou]/i.test(v);
       *   });
       * }
       *
       * _.mixin({ 'vowels': vowels });
       * _.vowels('fred');
       * // => ['e']
       *
       * _('fred').vowels().value();
       * // => ['e']
       *
       * _.mixin({ 'vowels': vowels }, { 'chain': false });
       * _('fred').vowels();
       * // => ['e']
       */
      function mixin(object, source, options) {
        var props = keys(source),
            methodNames = baseFunctions(source, props);

        if (options == null &&
            !(isObject(source) && (methodNames.length || !props.length))) {
          options = source;
          source = object;
          object = this;
          methodNames = baseFunctions(source, keys(source));
        }
        var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
            isFunc = isFunction(object);

        arrayEach(methodNames, function(methodName) {
          var func = source[methodName];
          object[methodName] = func;
          if (isFunc) {
            object.prototype[methodName] = function() {
              var chainAll = this.__chain__;
              if (chain || chainAll) {
                var result = object(this.__wrapped__),
                    actions = result.__actions__ = copyArray(this.__actions__);

                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                result.__chain__ = chainAll;
                return result;
              }
              return func.apply(object, arrayPush([this.value()], arguments));
            };
          }
        });

        return object;
      }

      /**
       * Reverts the `_` variable to its previous value and returns a reference to
       * the `lodash` function.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @returns {Function} Returns the `lodash` function.
       * @example
       *
       * var lodash = _.noConflict();
       */
      function noConflict() {
        if (root._ === this) {
          root._ = oldDash;
        }
        return this;
      }

      /**
       * This method returns `undefined`.
       *
       * @static
       * @memberOf _
       * @since 2.3.0
       * @category Util
       * @example
       *
       * _.times(2, _.noop);
       * // => [undefined, undefined]
       */
      function noop() {
        // No operation performed.
      }

      /**
       * Creates a function that gets the argument at index `n`. If `n` is negative,
       * the nth argument from the end is returned.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {number} [n=0] The index of the argument to return.
       * @returns {Function} Returns the new pass-thru function.
       * @example
       *
       * var func = _.nthArg(1);
       * func('a', 'b', 'c', 'd');
       * // => 'b'
       *
       * var func = _.nthArg(-2);
       * func('a', 'b', 'c', 'd');
       * // => 'c'
       */
      function nthArg(n) {
        n = toInteger(n);
        return baseRest(function(args) {
          return baseNth(args, n);
        });
      }

      /**
       * Creates a function that invokes `iteratees` with the arguments it receives
       * and returns their results.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {...(Function|Function[])} [iteratees=[_.identity]]
       *  The iteratees to invoke.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var func = _.over([Math.max, Math.min]);
       *
       * func(1, 2, 3, 4);
       * // => [4, 1]
       */
      var over = createOver(arrayMap);

      /**
       * Creates a function that checks if **all** of the `predicates` return
       * truthy when invoked with the arguments it receives.
       *
       * Following shorthands are possible for providing predicates.
       * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
       * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {...(Function|Function[])} [predicates=[_.identity]]
       *  The predicates to check.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var func = _.overEvery([Boolean, isFinite]);
       *
       * func('1');
       * // => true
       *
       * func(null);
       * // => false
       *
       * func(NaN);
       * // => false
       */
      var overEvery = createOver(arrayEvery);

      /**
       * Creates a function that checks if **any** of the `predicates` return
       * truthy when invoked with the arguments it receives.
       *
       * Following shorthands are possible for providing predicates.
       * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
       * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {...(Function|Function[])} [predicates=[_.identity]]
       *  The predicates to check.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var func = _.overSome([Boolean, isFinite]);
       *
       * func('1');
       * // => true
       *
       * func(null);
       * // => true
       *
       * func(NaN);
       * // => false
       *
       * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
       * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
       */
      var overSome = createOver(arraySome);

      /**
       * Creates a function that returns the value at `path` of a given object.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Util
       * @param {Array|string} path The path of the property to get.
       * @returns {Function} Returns the new accessor function.
       * @example
       *
       * var objects = [
       *   { 'a': { 'b': 2 } },
       *   { 'a': { 'b': 1 } }
       * ];
       *
       * _.map(objects, _.property('a.b'));
       * // => [2, 1]
       *
       * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
       * // => [1, 2]
       */
      function property(path) {
        return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
      }

      /**
       * The opposite of `_.property`; this method creates a function that returns
       * the value at a given path of `object`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {Object} object The object to query.
       * @returns {Function} Returns the new accessor function.
       * @example
       *
       * var array = [0, 1, 2],
       *     object = { 'a': array, 'b': array, 'c': array };
       *
       * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
       * // => [2, 0]
       *
       * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
       * // => [2, 0]
       */
      function propertyOf(object) {
        return function(path) {
          return object == null ? undefined$1 : baseGet(object, path);
        };
      }

      /**
       * Creates an array of numbers (positive and/or negative) progressing from
       * `start` up to, but not including, `end`. A step of `-1` is used if a negative
       * `start` is specified without an `end` or `step`. If `end` is not specified,
       * it's set to `start` with `start` then set to `0`.
       *
       * **Note:** JavaScript follows the IEEE-754 standard for resolving
       * floating-point values which can produce unexpected results.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @param {number} [step=1] The value to increment or decrement by.
       * @returns {Array} Returns the range of numbers.
       * @see _.inRange, _.rangeRight
       * @example
       *
       * _.range(4);
       * // => [0, 1, 2, 3]
       *
       * _.range(-4);
       * // => [0, -1, -2, -3]
       *
       * _.range(1, 5);
       * // => [1, 2, 3, 4]
       *
       * _.range(0, 20, 5);
       * // => [0, 5, 10, 15]
       *
       * _.range(0, -4, -1);
       * // => [0, -1, -2, -3]
       *
       * _.range(1, 4, 0);
       * // => [1, 1, 1]
       *
       * _.range(0);
       * // => []
       */
      var range = createRange();

      /**
       * This method is like `_.range` except that it populates values in
       * descending order.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @param {number} [step=1] The value to increment or decrement by.
       * @returns {Array} Returns the range of numbers.
       * @see _.inRange, _.range
       * @example
       *
       * _.rangeRight(4);
       * // => [3, 2, 1, 0]
       *
       * _.rangeRight(-4);
       * // => [-3, -2, -1, 0]
       *
       * _.rangeRight(1, 5);
       * // => [4, 3, 2, 1]
       *
       * _.rangeRight(0, 20, 5);
       * // => [15, 10, 5, 0]
       *
       * _.rangeRight(0, -4, -1);
       * // => [-3, -2, -1, 0]
       *
       * _.rangeRight(1, 4, 0);
       * // => [1, 1, 1]
       *
       * _.rangeRight(0);
       * // => []
       */
      var rangeRight = createRange(true);

      /**
       * This method returns a new empty array.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {Array} Returns the new empty array.
       * @example
       *
       * var arrays = _.times(2, _.stubArray);
       *
       * console.log(arrays);
       * // => [[], []]
       *
       * console.log(arrays[0] === arrays[1]);
       * // => false
       */
      function stubArray() {
        return [];
      }

      /**
       * This method returns `false`.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {boolean} Returns `false`.
       * @example
       *
       * _.times(2, _.stubFalse);
       * // => [false, false]
       */
      function stubFalse() {
        return false;
      }

      /**
       * This method returns a new empty object.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {Object} Returns the new empty object.
       * @example
       *
       * var objects = _.times(2, _.stubObject);
       *
       * console.log(objects);
       * // => [{}, {}]
       *
       * console.log(objects[0] === objects[1]);
       * // => false
       */
      function stubObject() {
        return {};
      }

      /**
       * This method returns an empty string.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {string} Returns the empty string.
       * @example
       *
       * _.times(2, _.stubString);
       * // => ['', '']
       */
      function stubString() {
        return '';
      }

      /**
       * This method returns `true`.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {boolean} Returns `true`.
       * @example
       *
       * _.times(2, _.stubTrue);
       * // => [true, true]
       */
      function stubTrue() {
        return true;
      }

      /**
       * Invokes the iteratee `n` times, returning an array of the results of
       * each invocation. The iteratee is invoked with one argument; (index).
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {number} n The number of times to invoke `iteratee`.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the array of results.
       * @example
       *
       * _.times(3, String);
       * // => ['0', '1', '2']
       *
       *  _.times(4, _.constant(0));
       * // => [0, 0, 0, 0]
       */
      function times(n, iteratee) {
        n = toInteger(n);
        if (n < 1 || n > MAX_SAFE_INTEGER) {
          return [];
        }
        var index = MAX_ARRAY_LENGTH,
            length = nativeMin(n, MAX_ARRAY_LENGTH);

        iteratee = getIteratee(iteratee);
        n -= MAX_ARRAY_LENGTH;

        var result = baseTimes(length, iteratee);
        while (++index < n) {
          iteratee(index);
        }
        return result;
      }

      /**
       * Converts `value` to a property path array.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {*} value The value to convert.
       * @returns {Array} Returns the new property path array.
       * @example
       *
       * _.toPath('a.b.c');
       * // => ['a', 'b', 'c']
       *
       * _.toPath('a[0].b.c');
       * // => ['a', '0', 'b', 'c']
       */
      function toPath(value) {
        if (isArray(value)) {
          return arrayMap(value, toKey);
        }
        return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
      }

      /**
       * Generates a unique ID. If `prefix` is given, the ID is appended to it.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {string} [prefix=''] The value to prefix the ID with.
       * @returns {string} Returns the unique ID.
       * @example
       *
       * _.uniqueId('contact_');
       * // => 'contact_104'
       *
       * _.uniqueId();
       * // => '105'
       */
      function uniqueId(prefix) {
        var id = ++idCounter;
        return toString(prefix) + id;
      }

      /*------------------------------------------------------------------------*/

      /**
       * Adds two numbers.
       *
       * @static
       * @memberOf _
       * @since 3.4.0
       * @category Math
       * @param {number} augend The first number in an addition.
       * @param {number} addend The second number in an addition.
       * @returns {number} Returns the total.
       * @example
       *
       * _.add(6, 4);
       * // => 10
       */
      var add = createMathOperation(function(augend, addend) {
        return augend + addend;
      }, 0);

      /**
       * Computes `number` rounded up to `precision`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Math
       * @param {number} number The number to round up.
       * @param {number} [precision=0] The precision to round up to.
       * @returns {number} Returns the rounded up number.
       * @example
       *
       * _.ceil(4.006);
       * // => 5
       *
       * _.ceil(6.004, 2);
       * // => 6.01
       *
       * _.ceil(6040, -2);
       * // => 6100
       */
      var ceil = createRound('ceil');

      /**
       * Divide two numbers.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Math
       * @param {number} dividend The first number in a division.
       * @param {number} divisor The second number in a division.
       * @returns {number} Returns the quotient.
       * @example
       *
       * _.divide(6, 4);
       * // => 1.5
       */
      var divide = createMathOperation(function(dividend, divisor) {
        return dividend / divisor;
      }, 1);

      /**
       * Computes `number` rounded down to `precision`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Math
       * @param {number} number The number to round down.
       * @param {number} [precision=0] The precision to round down to.
       * @returns {number} Returns the rounded down number.
       * @example
       *
       * _.floor(4.006);
       * // => 4
       *
       * _.floor(0.046, 2);
       * // => 0.04
       *
       * _.floor(4060, -2);
       * // => 4000
       */
      var floor = createRound('floor');

      /**
       * Computes the maximum value of `array`. If `array` is empty or falsey,
       * `undefined` is returned.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {*} Returns the maximum value.
       * @example
       *
       * _.max([4, 2, 8, 6]);
       * // => 8
       *
       * _.max([]);
       * // => undefined
       */
      function max(array) {
        return (array && array.length)
          ? baseExtremum(array, identity, baseGt)
          : undefined$1;
      }

      /**
       * This method is like `_.max` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the criterion by which
       * the value is ranked. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {*} Returns the maximum value.
       * @example
       *
       * var objects = [{ 'n': 1 }, { 'n': 2 }];
       *
       * _.maxBy(objects, function(o) { return o.n; });
       * // => { 'n': 2 }
       *
       * // The `_.property` iteratee shorthand.
       * _.maxBy(objects, 'n');
       * // => { 'n': 2 }
       */
      function maxBy(array, iteratee) {
        return (array && array.length)
          ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
          : undefined$1;
      }

      /**
       * Computes the mean of the values in `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {number} Returns the mean.
       * @example
       *
       * _.mean([4, 2, 8, 6]);
       * // => 5
       */
      function mean(array) {
        return baseMean(array, identity);
      }

      /**
       * This method is like `_.mean` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the value to be averaged.
       * The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the mean.
       * @example
       *
       * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
       *
       * _.meanBy(objects, function(o) { return o.n; });
       * // => 5
       *
       * // The `_.property` iteratee shorthand.
       * _.meanBy(objects, 'n');
       * // => 5
       */
      function meanBy(array, iteratee) {
        return baseMean(array, getIteratee(iteratee, 2));
      }

      /**
       * Computes the minimum value of `array`. If `array` is empty or falsey,
       * `undefined` is returned.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {*} Returns the minimum value.
       * @example
       *
       * _.min([4, 2, 8, 6]);
       * // => 2
       *
       * _.min([]);
       * // => undefined
       */
      function min(array) {
        return (array && array.length)
          ? baseExtremum(array, identity, baseLt)
          : undefined$1;
      }

      /**
       * This method is like `_.min` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the criterion by which
       * the value is ranked. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {*} Returns the minimum value.
       * @example
       *
       * var objects = [{ 'n': 1 }, { 'n': 2 }];
       *
       * _.minBy(objects, function(o) { return o.n; });
       * // => { 'n': 1 }
       *
       * // The `_.property` iteratee shorthand.
       * _.minBy(objects, 'n');
       * // => { 'n': 1 }
       */
      function minBy(array, iteratee) {
        return (array && array.length)
          ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
          : undefined$1;
      }

      /**
       * Multiply two numbers.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Math
       * @param {number} multiplier The first number in a multiplication.
       * @param {number} multiplicand The second number in a multiplication.
       * @returns {number} Returns the product.
       * @example
       *
       * _.multiply(6, 4);
       * // => 24
       */
      var multiply = createMathOperation(function(multiplier, multiplicand) {
        return multiplier * multiplicand;
      }, 1);

      /**
       * Computes `number` rounded to `precision`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Math
       * @param {number} number The number to round.
       * @param {number} [precision=0] The precision to round to.
       * @returns {number} Returns the rounded number.
       * @example
       *
       * _.round(4.006);
       * // => 4
       *
       * _.round(4.006, 2);
       * // => 4.01
       *
       * _.round(4060, -2);
       * // => 4100
       */
      var round = createRound('round');

      /**
       * Subtract two numbers.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {number} minuend The first number in a subtraction.
       * @param {number} subtrahend The second number in a subtraction.
       * @returns {number} Returns the difference.
       * @example
       *
       * _.subtract(6, 4);
       * // => 2
       */
      var subtract = createMathOperation(function(minuend, subtrahend) {
        return minuend - subtrahend;
      }, 0);

      /**
       * Computes the sum of the values in `array`.
       *
       * @static
       * @memberOf _
       * @since 3.4.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {number} Returns the sum.
       * @example
       *
       * _.sum([4, 2, 8, 6]);
       * // => 20
       */
      function sum(array) {
        return (array && array.length)
          ? baseSum(array, identity)
          : 0;
      }

      /**
       * This method is like `_.sum` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the value to be summed.
       * The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the sum.
       * @example
       *
       * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
       *
       * _.sumBy(objects, function(o) { return o.n; });
       * // => 20
       *
       * // The `_.property` iteratee shorthand.
       * _.sumBy(objects, 'n');
       * // => 20
       */
      function sumBy(array, iteratee) {
        return (array && array.length)
          ? baseSum(array, getIteratee(iteratee, 2))
          : 0;
      }

      /*------------------------------------------------------------------------*/

      // Add methods that return wrapped values in chain sequences.
      lodash.after = after;
      lodash.ary = ary;
      lodash.assign = assign;
      lodash.assignIn = assignIn;
      lodash.assignInWith = assignInWith;
      lodash.assignWith = assignWith;
      lodash.at = at;
      lodash.before = before;
      lodash.bind = bind;
      lodash.bindAll = bindAll;
      lodash.bindKey = bindKey;
      lodash.castArray = castArray;
      lodash.chain = chain;
      lodash.chunk = chunk;
      lodash.compact = compact;
      lodash.concat = concat;
      lodash.cond = cond;
      lodash.conforms = conforms;
      lodash.constant = constant;
      lodash.countBy = countBy;
      lodash.create = create;
      lodash.curry = curry;
      lodash.curryRight = curryRight;
      lodash.debounce = debounce;
      lodash.defaults = defaults;
      lodash.defaultsDeep = defaultsDeep;
      lodash.defer = defer;
      lodash.delay = delay;
      lodash.difference = difference;
      lodash.differenceBy = differenceBy;
      lodash.differenceWith = differenceWith;
      lodash.drop = drop;
      lodash.dropRight = dropRight;
      lodash.dropRightWhile = dropRightWhile;
      lodash.dropWhile = dropWhile;
      lodash.fill = fill;
      lodash.filter = filter;
      lodash.flatMap = flatMap;
      lodash.flatMapDeep = flatMapDeep;
      lodash.flatMapDepth = flatMapDepth;
      lodash.flatten = flatten;
      lodash.flattenDeep = flattenDeep;
      lodash.flattenDepth = flattenDepth;
      lodash.flip = flip;
      lodash.flow = flow;
      lodash.flowRight = flowRight;
      lodash.fromPairs = fromPairs;
      lodash.functions = functions;
      lodash.functionsIn = functionsIn;
      lodash.groupBy = groupBy;
      lodash.initial = initial;
      lodash.intersection = intersection;
      lodash.intersectionBy = intersectionBy;
      lodash.intersectionWith = intersectionWith;
      lodash.invert = invert;
      lodash.invertBy = invertBy;
      lodash.invokeMap = invokeMap;
      lodash.iteratee = iteratee;
      lodash.keyBy = keyBy;
      lodash.keys = keys;
      lodash.keysIn = keysIn;
      lodash.map = map;
      lodash.mapKeys = mapKeys;
      lodash.mapValues = mapValues;
      lodash.matches = matches;
      lodash.matchesProperty = matchesProperty;
      lodash.memoize = memoize;
      lodash.merge = merge;
      lodash.mergeWith = mergeWith;
      lodash.method = method;
      lodash.methodOf = methodOf;
      lodash.mixin = mixin;
      lodash.negate = negate;
      lodash.nthArg = nthArg;
      lodash.omit = omit;
      lodash.omitBy = omitBy;
      lodash.once = once;
      lodash.orderBy = orderBy;
      lodash.over = over;
      lodash.overArgs = overArgs;
      lodash.overEvery = overEvery;
      lodash.overSome = overSome;
      lodash.partial = partial;
      lodash.partialRight = partialRight;
      lodash.partition = partition;
      lodash.pick = pick;
      lodash.pickBy = pickBy;
      lodash.property = property;
      lodash.propertyOf = propertyOf;
      lodash.pull = pull;
      lodash.pullAll = pullAll;
      lodash.pullAllBy = pullAllBy;
      lodash.pullAllWith = pullAllWith;
      lodash.pullAt = pullAt;
      lodash.range = range;
      lodash.rangeRight = rangeRight;
      lodash.rearg = rearg;
      lodash.reject = reject;
      lodash.remove = remove;
      lodash.rest = rest;
      lodash.reverse = reverse;
      lodash.sampleSize = sampleSize;
      lodash.set = set;
      lodash.setWith = setWith;
      lodash.shuffle = shuffle;
      lodash.slice = slice;
      lodash.sortBy = sortBy;
      lodash.sortedUniq = sortedUniq;
      lodash.sortedUniqBy = sortedUniqBy;
      lodash.split = split;
      lodash.spread = spread;
      lodash.tail = tail;
      lodash.take = take;
      lodash.takeRight = takeRight;
      lodash.takeRightWhile = takeRightWhile;
      lodash.takeWhile = takeWhile;
      lodash.tap = tap;
      lodash.throttle = throttle;
      lodash.thru = thru;
      lodash.toArray = toArray;
      lodash.toPairs = toPairs;
      lodash.toPairsIn = toPairsIn;
      lodash.toPath = toPath;
      lodash.toPlainObject = toPlainObject;
      lodash.transform = transform;
      lodash.unary = unary;
      lodash.union = union;
      lodash.unionBy = unionBy;
      lodash.unionWith = unionWith;
      lodash.uniq = uniq;
      lodash.uniqBy = uniqBy;
      lodash.uniqWith = uniqWith;
      lodash.unset = unset;
      lodash.unzip = unzip;
      lodash.unzipWith = unzipWith;
      lodash.update = update;
      lodash.updateWith = updateWith;
      lodash.values = values;
      lodash.valuesIn = valuesIn;
      lodash.without = without;
      lodash.words = words;
      lodash.wrap = wrap;
      lodash.xor = xor;
      lodash.xorBy = xorBy;
      lodash.xorWith = xorWith;
      lodash.zip = zip;
      lodash.zipObject = zipObject;
      lodash.zipObjectDeep = zipObjectDeep;
      lodash.zipWith = zipWith;

      // Add aliases.
      lodash.entries = toPairs;
      lodash.entriesIn = toPairsIn;
      lodash.extend = assignIn;
      lodash.extendWith = assignInWith;

      // Add methods to `lodash.prototype`.
      mixin(lodash, lodash);

      /*------------------------------------------------------------------------*/

      // Add methods that return unwrapped values in chain sequences.
      lodash.add = add;
      lodash.attempt = attempt;
      lodash.camelCase = camelCase;
      lodash.capitalize = capitalize;
      lodash.ceil = ceil;
      lodash.clamp = clamp;
      lodash.clone = clone;
      lodash.cloneDeep = cloneDeep;
      lodash.cloneDeepWith = cloneDeepWith;
      lodash.cloneWith = cloneWith;
      lodash.conformsTo = conformsTo;
      lodash.deburr = deburr;
      lodash.defaultTo = defaultTo;
      lodash.divide = divide;
      lodash.endsWith = endsWith;
      lodash.eq = eq;
      lodash.escape = escape;
      lodash.escapeRegExp = escapeRegExp;
      lodash.every = every;
      lodash.find = find;
      lodash.findIndex = findIndex;
      lodash.findKey = findKey;
      lodash.findLast = findLast;
      lodash.findLastIndex = findLastIndex;
      lodash.findLastKey = findLastKey;
      lodash.floor = floor;
      lodash.forEach = forEach;
      lodash.forEachRight = forEachRight;
      lodash.forIn = forIn;
      lodash.forInRight = forInRight;
      lodash.forOwn = forOwn;
      lodash.forOwnRight = forOwnRight;
      lodash.get = get;
      lodash.gt = gt;
      lodash.gte = gte;
      lodash.has = has;
      lodash.hasIn = hasIn;
      lodash.head = head;
      lodash.identity = identity;
      lodash.includes = includes;
      lodash.indexOf = indexOf;
      lodash.inRange = inRange;
      lodash.invoke = invoke;
      lodash.isArguments = isArguments;
      lodash.isArray = isArray;
      lodash.isArrayBuffer = isArrayBuffer;
      lodash.isArrayLike = isArrayLike;
      lodash.isArrayLikeObject = isArrayLikeObject;
      lodash.isBoolean = isBoolean;
      lodash.isBuffer = isBuffer;
      lodash.isDate = isDate;
      lodash.isElement = isElement;
      lodash.isEmpty = isEmpty;
      lodash.isEqual = isEqual;
      lodash.isEqualWith = isEqualWith;
      lodash.isError = isError;
      lodash.isFinite = isFinite;
      lodash.isFunction = isFunction;
      lodash.isInteger = isInteger;
      lodash.isLength = isLength;
      lodash.isMap = isMap;
      lodash.isMatch = isMatch;
      lodash.isMatchWith = isMatchWith;
      lodash.isNaN = isNaN;
      lodash.isNative = isNative;
      lodash.isNil = isNil;
      lodash.isNull = isNull;
      lodash.isNumber = isNumber;
      lodash.isObject = isObject;
      lodash.isObjectLike = isObjectLike;
      lodash.isPlainObject = isPlainObject;
      lodash.isRegExp = isRegExp;
      lodash.isSafeInteger = isSafeInteger;
      lodash.isSet = isSet;
      lodash.isString = isString;
      lodash.isSymbol = isSymbol;
      lodash.isTypedArray = isTypedArray;
      lodash.isUndefined = isUndefined;
      lodash.isWeakMap = isWeakMap;
      lodash.isWeakSet = isWeakSet;
      lodash.join = join;
      lodash.kebabCase = kebabCase;
      lodash.last = last;
      lodash.lastIndexOf = lastIndexOf;
      lodash.lowerCase = lowerCase;
      lodash.lowerFirst = lowerFirst;
      lodash.lt = lt;
      lodash.lte = lte;
      lodash.max = max;
      lodash.maxBy = maxBy;
      lodash.mean = mean;
      lodash.meanBy = meanBy;
      lodash.min = min;
      lodash.minBy = minBy;
      lodash.stubArray = stubArray;
      lodash.stubFalse = stubFalse;
      lodash.stubObject = stubObject;
      lodash.stubString = stubString;
      lodash.stubTrue = stubTrue;
      lodash.multiply = multiply;
      lodash.nth = nth;
      lodash.noConflict = noConflict;
      lodash.noop = noop;
      lodash.now = now;
      lodash.pad = pad;
      lodash.padEnd = padEnd;
      lodash.padStart = padStart;
      lodash.parseInt = parseInt;
      lodash.random = random;
      lodash.reduce = reduce;
      lodash.reduceRight = reduceRight;
      lodash.repeat = repeat;
      lodash.replace = replace;
      lodash.result = result;
      lodash.round = round;
      lodash.runInContext = runInContext;
      lodash.sample = sample;
      lodash.size = size;
      lodash.snakeCase = snakeCase;
      lodash.some = some;
      lodash.sortedIndex = sortedIndex;
      lodash.sortedIndexBy = sortedIndexBy;
      lodash.sortedIndexOf = sortedIndexOf;
      lodash.sortedLastIndex = sortedLastIndex;
      lodash.sortedLastIndexBy = sortedLastIndexBy;
      lodash.sortedLastIndexOf = sortedLastIndexOf;
      lodash.startCase = startCase;
      lodash.startsWith = startsWith;
      lodash.subtract = subtract;
      lodash.sum = sum;
      lodash.sumBy = sumBy;
      lodash.template = template;
      lodash.times = times;
      lodash.toFinite = toFinite;
      lodash.toInteger = toInteger;
      lodash.toLength = toLength;
      lodash.toLower = toLower;
      lodash.toNumber = toNumber;
      lodash.toSafeInteger = toSafeInteger;
      lodash.toString = toString;
      lodash.toUpper = toUpper;
      lodash.trim = trim;
      lodash.trimEnd = trimEnd;
      lodash.trimStart = trimStart;
      lodash.truncate = truncate;
      lodash.unescape = unescape;
      lodash.uniqueId = uniqueId;
      lodash.upperCase = upperCase;
      lodash.upperFirst = upperFirst;

      // Add aliases.
      lodash.each = forEach;
      lodash.eachRight = forEachRight;
      lodash.first = head;

      mixin(lodash, (function() {
        var source = {};
        baseForOwn(lodash, function(func, methodName) {
          if (!hasOwnProperty.call(lodash.prototype, methodName)) {
            source[methodName] = func;
          }
        });
        return source;
      }()), { 'chain': false });

      /*------------------------------------------------------------------------*/

      /**
       * The semantic version number.
       *
       * @static
       * @memberOf _
       * @type {string}
       */
      lodash.VERSION = VERSION;

      // Assign default placeholders.
      arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
        lodash[methodName].placeholder = lodash;
      });

      // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
      arrayEach(['drop', 'take'], function(methodName, index) {
        LazyWrapper.prototype[methodName] = function(n) {
          n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);

          var result = (this.__filtered__ && !index)
            ? new LazyWrapper(this)
            : this.clone();

          if (result.__filtered__) {
            result.__takeCount__ = nativeMin(n, result.__takeCount__);
          } else {
            result.__views__.push({
              'size': nativeMin(n, MAX_ARRAY_LENGTH),
              'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
            });
          }
          return result;
        };

        LazyWrapper.prototype[methodName + 'Right'] = function(n) {
          return this.reverse()[methodName](n).reverse();
        };
      });

      // Add `LazyWrapper` methods that accept an `iteratee` value.
      arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
        var type = index + 1,
            isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

        LazyWrapper.prototype[methodName] = function(iteratee) {
          var result = this.clone();
          result.__iteratees__.push({
            'iteratee': getIteratee(iteratee, 3),
            'type': type
          });
          result.__filtered__ = result.__filtered__ || isFilter;
          return result;
        };
      });

      // Add `LazyWrapper` methods for `_.head` and `_.last`.
      arrayEach(['head', 'last'], function(methodName, index) {
        var takeName = 'take' + (index ? 'Right' : '');

        LazyWrapper.prototype[methodName] = function() {
          return this[takeName](1).value()[0];
        };
      });

      // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
      arrayEach(['initial', 'tail'], function(methodName, index) {
        var dropName = 'drop' + (index ? '' : 'Right');

        LazyWrapper.prototype[methodName] = function() {
          return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
        };
      });

      LazyWrapper.prototype.compact = function() {
        return this.filter(identity);
      };

      LazyWrapper.prototype.find = function(predicate) {
        return this.filter(predicate).head();
      };

      LazyWrapper.prototype.findLast = function(predicate) {
        return this.reverse().find(predicate);
      };

      LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
        if (typeof path == 'function') {
          return new LazyWrapper(this);
        }
        return this.map(function(value) {
          return baseInvoke(value, path, args);
        });
      });

      LazyWrapper.prototype.reject = function(predicate) {
        return this.filter(negate(getIteratee(predicate)));
      };

      LazyWrapper.prototype.slice = function(start, end) {
        start = toInteger(start);

        var result = this;
        if (result.__filtered__ && (start > 0 || end < 0)) {
          return new LazyWrapper(result);
        }
        if (start < 0) {
          result = result.takeRight(-start);
        } else if (start) {
          result = result.drop(start);
        }
        if (end !== undefined$1) {
          end = toInteger(end);
          result = end < 0 ? result.dropRight(-end) : result.take(end - start);
        }
        return result;
      };

      LazyWrapper.prototype.takeRightWhile = function(predicate) {
        return this.reverse().takeWhile(predicate).reverse();
      };

      LazyWrapper.prototype.toArray = function() {
        return this.take(MAX_ARRAY_LENGTH);
      };

      // Add `LazyWrapper` methods to `lodash.prototype`.
      baseForOwn(LazyWrapper.prototype, function(func, methodName) {
        var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
            isTaker = /^(?:head|last)$/.test(methodName),
            lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
            retUnwrapped = isTaker || /^find/.test(methodName);

        if (!lodashFunc) {
          return;
        }
        lodash.prototype[methodName] = function() {
          var value = this.__wrapped__,
              args = isTaker ? [1] : arguments,
              isLazy = value instanceof LazyWrapper,
              iteratee = args[0],
              useLazy = isLazy || isArray(value);

          var interceptor = function(value) {
            var result = lodashFunc.apply(lodash, arrayPush([value], args));
            return (isTaker && chainAll) ? result[0] : result;
          };

          if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
            // Avoid lazy use if the iteratee has a "length" value other than `1`.
            isLazy = useLazy = false;
          }
          var chainAll = this.__chain__,
              isHybrid = !!this.__actions__.length,
              isUnwrapped = retUnwrapped && !chainAll,
              onlyLazy = isLazy && !isHybrid;

          if (!retUnwrapped && useLazy) {
            value = onlyLazy ? value : new LazyWrapper(this);
            var result = func.apply(value, args);
            result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined$1 });
            return new LodashWrapper(result, chainAll);
          }
          if (isUnwrapped && onlyLazy) {
            return func.apply(this, args);
          }
          result = this.thru(interceptor);
          return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
        };
      });

      // Add `Array` methods to `lodash.prototype`.
      arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
        var func = arrayProto[methodName],
            chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
            retUnwrapped = /^(?:pop|shift)$/.test(methodName);

        lodash.prototype[methodName] = function() {
          var args = arguments;
          if (retUnwrapped && !this.__chain__) {
            var value = this.value();
            return func.apply(isArray(value) ? value : [], args);
          }
          return this[chainName](function(value) {
            return func.apply(isArray(value) ? value : [], args);
          });
        };
      });

      // Map minified method names to their real names.
      baseForOwn(LazyWrapper.prototype, function(func, methodName) {
        var lodashFunc = lodash[methodName];
        if (lodashFunc) {
          var key = lodashFunc.name + '';
          if (!hasOwnProperty.call(realNames, key)) {
            realNames[key] = [];
          }
          realNames[key].push({ 'name': methodName, 'func': lodashFunc });
        }
      });

      realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
        'name': 'wrapper',
        'func': undefined$1
      }];

      // Add methods to `LazyWrapper`.
      LazyWrapper.prototype.clone = lazyClone;
      LazyWrapper.prototype.reverse = lazyReverse;
      LazyWrapper.prototype.value = lazyValue;

      // Add chain sequence methods to the `lodash` wrapper.
      lodash.prototype.at = wrapperAt;
      lodash.prototype.chain = wrapperChain;
      lodash.prototype.commit = wrapperCommit;
      lodash.prototype.next = wrapperNext;
      lodash.prototype.plant = wrapperPlant;
      lodash.prototype.reverse = wrapperReverse;
      lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

      // Add lazy aliases.
      lodash.prototype.first = lodash.prototype.head;

      if (symIterator) {
        lodash.prototype[symIterator] = wrapperToIterator;
      }
      return lodash;
    });

    /*--------------------------------------------------------------------------*/

    // Export lodash.
    var _ = runInContext();

    // Some AMD build optimizers, like r.js, check for condition patterns like:
    if (freeModule) {
      // Export for Node.js.
      (freeModule.exports = _)._ = _;
      // Export for CommonJS support.
      freeExports._ = _;
    }
    else {
      // Export to the global object.
      root._ = _;
    }
  }.call(commonjsGlobal));
  });

  //
  var script$1 = {
    data: function () { return ({
      pos_profile: '',
      flags: {},
      items_view: 'list',
      item_group: 'ALL',
      loading: false,
      items_group: ['ALL'],
      items: [],
      search: '',
      first_search: '',
      itemsPerPage: 1000,
      items_headers: [
        { text: __('Name'), align: 'start', sortable: true, value: 'item_name' },
        { text: __('Rate'), value: 'rate', align: 'start' },
        { text: __('Available QTY'), value: 'actual_qty', align: 'start' },
        { text: __('UOM'), value: 'stock_uom', align: 'start' } ],
      offersCount: 0,
      appliedOffersCount: 0,
      couponsCount: 0,
      appliedCouponsCount: 0,
      customer_price_list: null,
    }); },

    watch: {
      filtred_items: function filtred_items(data_value) {
        this.update_items_details(data_value);
      },
      customer_price_list: function customer_price_list() {
        this.get_items();
      },
    },

    methods: {
      show_offers: function show_offers() {
        evntBus.$emit('show_offers', 'true');
      },
      show_coupons: function show_coupons() {
        evntBus.$emit('show_coupons', 'true');
      },
      get_items: function get_items() {
        if (!this.pos_profile) {
          console.log('No POS Profile');
          return;
        }
        var vm = this;
        this.loading = true;
        if (vm.pos_profile.posa_local_storage && localStorage.items_storage) {
          vm.items = JSON.parse(localStorage.getItem('items_storage'));
          evntBus.$emit('set_all_items', vm.items);
          vm.loading = false;
        }
        frappe.call({
          method: 'posawesome.posawesome.api.posapp.get_items',
          args: {
            pos_profile: vm.pos_profile,
            price_list: vm.customer_price_list,
          },
          callback: function (r) {
            if (r.message) {
              vm.items = r.message;
              evntBus.$emit('set_all_items', vm.items);
              vm.loading = false;
              console.info('loadItmes');
              if (vm.pos_profile.posa_local_storage) {
                localStorage.setItem('items_storage', '');
                localStorage.setItem('items_storage', JSON.stringify(r.message));
              }
            }
          },
        });
      },
      get_items_groups: function get_items_groups() {
        var this$1 = this;

        if (!this.pos_profile) {
          console.log('No POS Profile');
          return;
        }
        if (this.pos_profile.item_groups.length > 0) {
          this.pos_profile.item_groups.forEach(function (element) {
            if (element.item_group !== 'All Item Groups') {
              this$1.items_group.push(element.item_group);
            }
          });
        } else {
          var vm = this;
          frappe.call({
            method: 'posawesome.posawesome.api.posapp.get_items_groups',
            args: {},
            callback: function (r) {
              if (r.message) {
                r.message.forEach(function (element) {
                  vm.items_group.push(element.name);
                });
              }
            },
          });
        }
      },
      add_item: function add_item(item) {
        if (item.has_variants) {
          evntBus.$emit('open_variants_model', item, this.items);
        } else {
          evntBus.$emit('add_item', item);
        }
      },
      enter_event: function enter_event() {
        var this$1 = this;

        if (!this.filtred_items.length || !this.first_search) {
          return;
        }
        var qty = this.get_item_qty(this.first_search);
        var new_item = Object.assign({}, this.filtred_items[0]);
        new_item.qty = flt(qty);
        new_item.item_barcode.forEach(function (element) {
          if (this$1.search == element.barcode) {
            new_item.uom = element.posa_uom;
          }
        });
        if (this.flags.serial_no) {
          new_item.to_set_serial_no = this.flags.serial_no;
        }
        this.add_item(new_item);
        this.search = null;
        this.first_search = null;
        this.debounce_search = null;
        this.flags.serial_no = null;
      },
      get_item_qty: function get_item_qty(first_search) {
        var scal_qty = 1;
        if (first_search.startsWith(this.pos_profile.posa_scale_barcode_start)) {
          var pesokg1 = first_search.substr(7, 5);
          var pesokg;
          if (pesokg1.startsWith('0000')) {
            pesokg = '0.00' + pesokg1.substr(4);
          } else if (pesokg1.startsWith('000')) {
            pesokg = '0.0' + pesokg1.substr(3);
          } else if (pesokg1.startsWith('00')) {
            pesokg = '0.' + pesokg1.substr(2);
          } else if (pesokg1.startsWith('0')) {
            pesokg =
              pesokg1.substr(1, 1) + '.' + pesokg1.substr(2, pesokg1.length);
          } else if (!pesokg1.startsWith('0')) {
            pesokg =
              pesokg1.substr(0, 2) + '.' + pesokg1.substr(2, pesokg1.length);
          }
          scal_qty = pesokg;
        }
        return scal_qty;
      },
      get_search: function get_search(first_search) {
        var search_term = '';
        if (
          first_search &&
          first_search.startsWith(this.pos_profile.posa_scale_barcode_start)
        ) {
          search_term = first_search.substr(0, 7);
        } else {
          search_term = first_search;
        }
        return search_term;
      },
      esc_event: function esc_event() {
        this.search = null;
        this.first_search = null;
      },
      update_items_details: function update_items_details(items) {
        var vm = this;
        frappe.call({
          method: 'posawesome.posawesome.api.posapp.get_items_details',
          args: {
            pos_profile: vm.pos_profile,
            items_data: items,
          },
          callback: function (r) {
            if (r.message) {
              items.forEach(function (item) {
                var updated_item = r.message.find(
                  function (element) { return element.item_code == item.item_code; }
                );        
                
                item.actual_qty = updated_item.actual_qty;
                item.serial_no_data = updated_item.serial_no_data;
                item.batch_no_data = updated_item.batch_no_data;
                item.item_uoms = updated_item.item_uoms;

              });
            }
          },
        });
      },
      update_cur_items_details: function update_cur_items_details() {
        this.update_items_details(this.filtred_items);
      },
      scan_barcoud: function scan_barcoud() {
        var vm = this;
        onScan.attachTo(document, {
          suffixKeyCodes: [],
          keyCodeMapper: function (oEvent) {
            oEvent.stopImmediatePropagation();
            return onScan.decodeKeyEvent(oEvent);
          },
          onScan: function (sCode) {
            setTimeout(function () {
              vm.trigger_onscan(sCode);
            }, 300);
          },
        });
      },
      trigger_onscan: function trigger_onscan(sCode) {
        if (this.filtred_items.length == 0) {
          evntBus.$emit('show_mesage', {
            text: ("No Item has this barcode \"" + sCode + "\""),
            color: 'error',
          });
          frappe.utils.play_sound('error');
        } else {
          this.enter_event();
          this.debounce_search = null;
          this.search = null;
        }
      },
      formtCurrency: function formtCurrency(value) {
        value = parseFloat(value);
        return value.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
      },
    },

    computed: {
      filtred_items: function filtred_items() {
        var this$1 = this;

        this.search = this.get_search(this.first_search);
        var filtred_list = [];
        var filtred_group_list = [];
        if (this.item_group != 'ALL') {
          filtred_group_list = this.items.filter(function (item) { return item.item_group.toLowerCase().includes(this$1.item_group.toLowerCase()); }
          );
        } else {
          filtred_group_list = this.items;
        }
        if (!this.search || this.search.length < 3) {
          if (
            this.pos_profile.posa_show_template_items &&
            this.pos_profile.posa_hide_variants_items
          ) {
            return (filtred_list = filtred_group_list
              .filter(function (item) { return !item.variant_of; })
              .slice(0, 50));
          } else {
            return (filtred_list = filtred_group_list.slice(0, 50));
          }
        } else if (this.search) {
          filtred_list = filtred_group_list.filter(function (item) {
            var found = false;
            for (var i = 0, list = item.item_barcode; i < list.length; i += 1) {
              var element = list[i];

              if (element.barcode == this$1.search) {
                found = true;
                break;
              }
            }
            return found;
          });
          if (filtred_list.length == 0) {
            filtred_list = filtred_group_list.filter(function (item) { return item.item_code.toLowerCase().includes(this$1.search.toLowerCase()); }
            );
            if (filtred_list.length == 0) {
              filtred_list = filtred_group_list.filter(function (item) { return item.item_name.toLowerCase().includes(this$1.search.toLowerCase()); }
              );
            }
            if (
              filtred_list.length == 0 &&
              this.pos_profile.posa_search_serial_no
            ) {
              filtred_list = filtred_group_list.filter(function (item) {
                var found = false;
                for (var i = 0, list = item.serial_no_data; i < list.length; i += 1) {
                  var element = list[i];

                  if (element.serial_no == this$1.search) {
                    found = true;
                    this$1.flags.serial_no = null;
                    this$1.flags.serial_no = this$1.search;
                    break;
                  }
                }
                return found;
              });
            }
          }
        }
        if (
          this.pos_profile.posa_show_template_items &&
          this.pos_profile.posa_hide_variants_items
        ) {
          return filtred_list.filter(function (item) { return !item.variant_of; }).slice(0, 50);
        } else {
          return filtred_list.slice(0, 50);
        }
      },
      debounce_search: {
        get: function get() {
          return this.first_search;
        },
        set: lodash.debounce(function (newValue) {
          this.first_search = newValue;
        }, 200),
      },
    },

    created: function () {
      var this$1 = this;

      this.$nextTick(function () {});
      evntBus.$on('register_pos_profile', function (data) {
        this$1.pos_profile = data.pos_profile;
        this$1.get_items();
        this$1.get_items_groups();
      });
      evntBus.$on('update_cur_items_details', function () {
        this$1.update_cur_items_details();
      });
      evntBus.$on('update_offers_counters', function (data) {
        this$1.offersCount = data.offersCount;
        this$1.appliedOffersCount = data.appliedOffersCount;
      });
      evntBus.$on('update_coupons_counters', function (data) {
        this$1.couponsCount = data.couponsCount;
        this$1.appliedCouponsCount = data.appliedCouponsCount;
      });
      evntBus.$on('update_customer_price_list', function (data) {
        this$1.customer_price_list = data;
      });
    },

    mounted: function mounted() {
      this.scan_barcoud();
    },
  };

  /* script */
              var __vue_script__$1 = script$1;
              
  /* template */
  var __vue_render__$1 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      [
        _c(
          "v-card",
          {
            staticClass: "selection mx-auto grey lighten-5",
            staticStyle: { "max-height": "75vh", height: "75vh" }
          },
          [
            _c("v-progress-linear", {
              attrs: {
                active: _vm.loading,
                indeterminate: _vm.loading,
                absolute: "",
                top: "",
                color: "deep-purple accent-4"
              }
            }),
            _vm._v(" "),
            _c(
              "v-row",
              { staticClass: "items px-2 py-1" },
              [
                _c(
                  "v-col",
                  { staticClass: "pb-0 mb-2", attrs: { cols: "12" } },
                  [
                    _c("v-text-field", {
                      attrs: {
                        dense: "",
                        clearable: "",
                        autofocus: "",
                        outlined: "",
                        color: "indigo",
                        label: _vm.frappe._("Search Items"),
                        hint:
                          "Search by item code, serial number, batch no or barcode",
                        "background-color": "white",
                        "hide-details": ""
                      },
                      on: {
                        keydown: [
                          function($event) {
                            if (
                              !$event.type.indexOf("key") &&
                              _vm._k($event.keyCode, "esc", 27, $event.key, [
                                "Esc",
                                "Escape"
                              ])
                            ) {
                              return null
                            }
                            return _vm.esc_event($event)
                          },
                          function($event) {
                            if (
                              !$event.type.indexOf("key") &&
                              _vm._k(
                                $event.keyCode,
                                "enter",
                                13,
                                $event.key,
                                "Enter"
                              )
                            ) {
                              return null
                            }
                            return _vm.enter_event($event)
                          }
                        ]
                      },
                      model: {
                        value: _vm.debounce_search,
                        callback: function($$v) {
                          _vm.debounce_search = $$v;
                        },
                        expression: "debounce_search"
                      }
                    })
                  ],
                  1
                ),
                _vm._v(" "),
                _c("v-col", { staticClass: "pt-0 mt-0", attrs: { cols: "12" } }, [
                  _vm.items_view == "card"
                    ? _c(
                        "div",
                        { staticClass: "items", attrs: { fluid: "" } },
                        [
                          _c(
                            "v-row",
                            {
                              staticClass: "overflow-y-auto",
                              staticStyle: { "max-height": "67vh" },
                              attrs: { dense: "" }
                            },
                            _vm._l(_vm.filtred_items, function(item, idx) {
                              return _c(
                                "v-col",
                                {
                                  key: idx,
                                  attrs: {
                                    xl: "2",
                                    lg: "3",
                                    md: "6",
                                    sm: "6",
                                    cols: "6",
                                    "min-height": "50"
                                  }
                                },
                                [
                                  _c(
                                    "v-card",
                                    {
                                      attrs: { hover: "hover" },
                                      on: {
                                        click: function($event) {
                                          return _vm.add_item(item)
                                        }
                                      }
                                    },
                                    [
                                      _c(
                                        "v-img",
                                        {
                                          staticClass: "white--text align-end",
                                          attrs: {
                                            src:
                                              item.image ||
                                              "/assets/posawesome/js/posapp/components/pos/placeholder-image.png",
                                            gradient:
                                              "to bottom, rgba(0,0,0,.2), rgba(0,0,0,.7)",
                                            height: "100px"
                                          }
                                        },
                                        [
                                          _c("v-card-text", {
                                            staticClass:
                                              "text-subtitle-2 px-1 pb-2",
                                            domProps: {
                                              textContent: _vm._s(item.item_name)
                                            }
                                          })
                                        ],
                                        1
                                      ),
                                      _vm._v(" "),
                                      _c(
                                        "v-card-text",
                                        { staticClass: "text--primary pa-1" },
                                        [
                                          _c(
                                            "div",
                                            {
                                              staticClass:
                                                "text-caption indigo--text accent-3"
                                            },
                                            [
                                              _vm._v(
                                                "\n                    " +
                                                  _vm._s(item.rate || 0) +
                                                  " " +
                                                  _vm._s(item.currency || "") +
                                                  "\n                  "
                                              )
                                            ]
                                          )
                                        ]
                                      )
                                    ],
                                    1
                                  )
                                ],
                                1
                              )
                            }),
                            1
                          )
                        ],
                        1
                      )
                    : _vm._e(),
                  _vm._v(" "),
                  _vm.items_view == "list"
                    ? _c("div", { staticClass: "items", attrs: { fluid: "" } }, [
                        _c(
                          "div",
                          {
                            staticClass: "my-0 py-0 overflow-y-auto",
                            staticStyle: { "max-height": "65vh" }
                          },
                          [
                            [
                              _c("v-data-table", {
                                staticClass: "elevation-1",
                                attrs: {
                                  headers: _vm.items_headers,
                                  items: _vm.filtred_items,
                                  "item-key": "item_code",
                                  "items-per-page": _vm.itemsPerPage,
                                  "hide-default-footer": ""
                                },
                                on: { "click:row": _vm.add_item },
                                scopedSlots: _vm._u(
                                  [
                                    {
                                      key: "item.rate",
                                      fn: function(ref) {
                                        var item = ref.item;
                                        return [
                                          _vm._v(
                                            "\n                  " +
                                              _vm._s(
                                                _vm.formtCurrency(item.rate)
                                              ) +
                                              "\n                "
                                          )
                                        ]
                                      }
                                    },
                                    {
                                      key: "item.actual_qty",
                                      fn: function(ref) {
                                        var item = ref.item;
                                        return [
                                          _vm._v(
                                            "\n                  " +
                                              _vm._s(
                                                _vm.formtCurrency(item.actual_qty)
                                              ) +
                                              "\n                "
                                          )
                                        ]
                                      }
                                    }
                                  ],
                                  null,
                                  false,
                                  1096687177
                                )
                              })
                            ]
                          ],
                          2
                        )
                      ])
                    : _vm._e()
                ])
              ],
              1
            )
          ],
          1
        ),
        _vm._v(" "),
        _c(
          "v-card",
          { staticClass: "cards mb-0 mt-3 pa-2 grey lighten-5" },
          [
            _c(
              "v-row",
              { attrs: { "no-gutters": "", align: "center", justify: "center" } },
              [
                _c(
                  "v-col",
                  { attrs: { cols: "12" } },
                  [
                    _c("v-select", {
                      attrs: {
                        items: _vm.items_group,
                        label: _vm.frappe._("Items Group"),
                        dense: "",
                        outlined: "",
                        "hide-details": ""
                      },
                      model: {
                        value: _vm.item_group,
                        callback: function($$v) {
                          _vm.item_group = $$v;
                        },
                        expression: "item_group"
                      }
                    })
                  ],
                  1
                ),
                _vm._v(" "),
                _c(
                  "v-col",
                  { staticClass: "mt-1", attrs: { cols: "3" } },
                  [
                    _c(
                      "v-btn-toggle",
                      {
                        attrs: {
                          color: "orange",
                          group: "",
                          dense: "",
                          rounded: ""
                        },
                        model: {
                          value: _vm.items_view,
                          callback: function($$v) {
                            _vm.items_view = $$v;
                          },
                          expression: "items_view"
                        }
                      },
                      [
                        _c("v-btn", { attrs: { small: "", value: "list" } }, [
                          _vm._v(_vm._s(_vm.__("List")))
                        ]),
                        _vm._v(" "),
                        _c("v-btn", { attrs: { small: "", value: "card" } }, [
                          _vm._v(_vm._s(_vm.__("Card")))
                        ])
                      ],
                      1
                    )
                  ],
                  1
                ),
                _vm._v(" "),
                _c(
                  "v-col",
                  { staticClass: "mt-2", attrs: { cols: "4" } },
                  [
                    _c(
                      "v-btn",
                      {
                        attrs: {
                          small: "",
                          block: "",
                          color: "warning",
                          text: ""
                        },
                        on: { click: _vm.show_coupons }
                      },
                      [
                        _vm._v(
                          _vm._s(_vm.couponsCount) +
                            " " +
                            _vm._s(_vm.__("Coupons"))
                        )
                      ]
                    )
                  ],
                  1
                ),
                _vm._v(" "),
                _c(
                  "v-col",
                  { staticClass: "mt-2", attrs: { cols: "5" } },
                  [
                    _c(
                      "v-btn",
                      {
                        attrs: {
                          small: "",
                          block: "",
                          color: "warning",
                          text: ""
                        },
                        on: { click: _vm.show_offers }
                      },
                      [
                        _vm._v(
                          _vm._s(_vm.offersCount) +
                            " " +
                            _vm._s(_vm.__("Offers")) +
                            " : " +
                            _vm._s(_vm.appliedOffersCount) +
                            "\n          " +
                            _vm._s(_vm.__("Applied"))
                        )
                      ]
                    )
                  ],
                  1
                )
              ],
              1
            )
          ],
          1
        )
      ],
      1
    )
  };
  var __vue_staticRenderFns__$1 = [];
  __vue_render__$1._withStripped = true;

    /* style */
    var __vue_inject_styles__$1 = function (inject) {
      if (!inject) { return }
      inject("data-v-4ea1a488_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: {"version":3,"sources":[],"names":[],"mappings":"","file":"ItemsSelector.vue"}, media: undefined });

    };
    /* scoped */
    var __vue_scope_id__$1 = "data-v-4ea1a488";
    /* module identifier */
    var __vue_module_identifier__$1 = undefined;
    /* functional template */
    var __vue_is_functional_template__$1 = false;
    /* component normalizer */
    function __vue_normalize__$1(
      template, style, script,
      scope, functional, moduleIdentifier,
      createInjector, createInjectorSSR
    ) {
      var component = (typeof script === 'function' ? script.options : script) || {};

      // For security concerns, we use only base name in production mode.
      component.__file = "/home/skss/frappe-bench/apps/posawesome/posawesome/public/js/posapp/components/pos/ItemsSelector.vue";

      if (!component.render) {
        component.render = template.render;
        component.staticRenderFns = template.staticRenderFns;
        component._compiled = true;

        if (functional) { component.functional = true; }
      }

      component._scopeId = scope;

      {
        var hook;
        if (style) {
          hook = function(context) {
            style.call(this, createInjector(context));
          };
        }

        if (hook !== undefined) {
          if (component.functional) {
            // register for functional component in vue file
            var originalRender = component.render;
            component.render = function renderWithStyleInjection(h, context) {
              hook.call(context);
              return originalRender(h, context)
            };
          } else {
            // inject component registration as beforeCreate hook
            var existing = component.beforeCreate;
            component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
          }
        }
      }

      return component
    }
    /* style inject */
    function __vue_create_injector__$1() {
      var head = document.head || document.getElementsByTagName('head')[0];
      var styles = __vue_create_injector__$1.styles || (__vue_create_injector__$1.styles = {});
      var isOldIE =
        typeof navigator !== 'undefined' &&
        /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

      return function addStyle(id, css) {
        if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

        var group = isOldIE ? css.media || 'default' : id;
        var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

        if (!style.ids.includes(id)) {
          var code = css.source;
          var index = style.ids.length;

          style.ids.push(id);

          if (isOldIE) {
            style.element = style.element || document.querySelector('style[data-group=' + group + ']');
          }

          if (!style.element) {
            var el = style.element = document.createElement('style');
            el.type = 'text/css';

            if (css.media) { el.setAttribute('media', css.media); }
            if (isOldIE) {
              el.setAttribute('data-group', group);
              el.setAttribute('data-next-index', '0');
            }

            head.appendChild(el);
          }

          if (isOldIE) {
            index = parseInt(style.element.getAttribute('data-next-index'));
            style.element.setAttribute('data-next-index', index + 1);
          }

          if (style.element.styleSheet) {
            style.parts.push(code);
            style.element.styleSheet.cssText = style.parts
              .filter(Boolean)
              .join('\n');
          } else {
            var textNode = document.createTextNode(code);
            var nodes = style.element.childNodes;
            if (nodes[index]) { style.element.removeChild(nodes[index]); }
            if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
            else { style.element.appendChild(textNode); }
          }
        }
      }
    }
    /* style inject SSR */
    

    
    var ItemsSelector = __vue_normalize__$1(
      { render: __vue_render__$1, staticRenderFns: __vue_staticRenderFns__$1 },
      __vue_inject_styles__$1,
      __vue_script__$1,
      __vue_scope_id__$1,
      __vue_is_functional_template__$1,
      __vue_module_identifier__$1,
      __vue_create_injector__$1,
      undefined
    );

  //
  var script$2 = {
    data: function () { return ({
      pos_profile: '',
      customers: [],
      customer: '',
      readonly: false,
    }); },

    methods: {
      get_customer_names: function get_customer_names() {
        var vm = this;
        if (vm.pos_profile.posa_local_storage && localStorage.customer_storage) {
          vm.customers = JSON.parse(localStorage.getItem('customer_storage'));
        }
        frappe.call({
          method: 'posawesome.posawesome.api.posapp.get_customer_names',
          args: {
            pos_profile: this.pos_profile.pos_profile,
          },
          callback: function (r) {
            if (r.message) {
              vm.customers = r.message;
              console.info('loadCustomers');
              if (vm.pos_profile.posa_local_storage) {
                localStorage.setItem('customer_storage', '');
                localStorage.setItem(
                  'customer_storage',
                  JSON.stringify(r.message)
                );
              }
            }
          },
        });
      },
      new_customer: function new_customer() {
        evntBus.$emit('open_new_customer');
      },
      edit_customer: function edit_customer() {
        evntBus.$emit('open_edit_customer');
      },
      customFilter: function customFilter(item, queryText, itemText) {
        var textOne = item.customer_name
          ? item.customer_name.toLowerCase()
          : '';
        var textTwo = item.tax_id ? item.tax_id.toLowerCase() : '';
        var textThree = item.email_id ? item.email_id.toLowerCase() : '';
        var textFour = item.mobile_no ? item.mobile_no.toLowerCase() : '';
        var textFifth = item.name.toLowerCase();
        var searchText = queryText.toLowerCase();

        return (
          textOne.indexOf(searchText) > -1 ||
          textTwo.indexOf(searchText) > -1 ||
          textThree.indexOf(searchText) > -1 ||
          textFour.indexOf(searchText) > -1 ||
          textFifth.indexOf(searchText) > -1
        );
      },
    },

    computed: {},

    created: function () {
      this.$nextTick(function () {
        var this$1 = this;

        evntBus.$on('register_pos_profile', function (pos_profile) {
          this$1.pos_profile = pos_profile;
          this$1.get_customer_names();
        });
        evntBus.$on('set_customer', function (customer) {
          this$1.customer = customer;
        });
        evntBus.$on('add_customer_to_list', function (customer) {
          this$1.customers.push(customer);
        });
        evntBus.$on('set_customer_readonly', function (value) {
          this$1.readonly = value;
        });
      });
    },

    watch: {
      customer: function customer() {
        evntBus.$emit('update_customer', this.customer);
      },
    },
  };

  /* script */
              var __vue_script__$2 = script$2;
              
  /* template */
  var __vue_render__$2 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      [
        _c("v-autocomplete", {
          attrs: {
            dense: "",
            clearable: "",
            "auto-select-first": "",
            outlined: "",
            color: "indigo",
            label: _vm.frappe._("Customer"),
            items: _vm.customers,
            "item-text": "customer_name",
            "item-value": "name",
            "background-color": "white",
            "no-data-text": _vm.__("Customer not found"),
            "hide-details": "",
            filter: _vm.customFilter,
            disabled: _vm.readonly,
            "append-icon": "mdi-plus",
            "prepend-inner-icon": "mdi-account-edit"
          },
          on: {
            "click:append": _vm.new_customer,
            "click:prepend-inner": _vm.edit_customer
          },
          scopedSlots: _vm._u([
            {
              key: "item",
              fn: function(data) {
                is_feedback_required = data.item.feedback_required
                return [
                  [
                    _c(
                      "v-list-item-content",
                      [
                        _c("v-list-item-title", {
                          staticClass: "indigo--text subtitle-1",
                          domProps: { innerHTML: _vm._s(data.item.customer_name) }
                        }),
                        _vm._v(" "),
                        data.item.customer_name != data.item.name
                          ? _c("v-list-item-subtitle", {
                              domProps: {
                                innerHTML: _vm._s("ID: " + data.item.name)
                              }
                            })
                          : _vm._e(),
                        _vm._v(" "),
                        data.item.tax_id
                          ? _c("v-list-item-subtitle", {
                              domProps: {
                                innerHTML: _vm._s("TAX ID: " + data.item.tax_id)
                              }
                            })
                          : _vm._e(),
                        _vm._v(" "),
                        data.item.email_id
                          ? _c("v-list-item-subtitle", {
                              domProps: {
                                innerHTML: _vm._s("Email: " + data.item.email_id)
                              }
                            })
                          : _vm._e(),
                        _vm._v(" "),
                        data.item.mobile_no
                          ? _c("v-list-item-subtitle", {
                              domProps: {
                                innerHTML: _vm._s(
                                  "Mobile No: " + data.item.mobile_no
                                )
                              }
                            })
                          : _vm._e(),
                        _vm._v(" "),
                        data.item.primary_address
                          ? _c("v-list-item-subtitle", {
                              domProps: {
                                innerHTML: _vm._s(
                                  "Primary Address: " + data.item.primary_address
                                )
                              }
                            })
                          : _vm._e()
                      ],
                      1
                    )
                  ]
                ]
              }
            }
          ]),
          model: {
            value: _vm.customer,
            callback: function($$v) {
              _vm.customer = $$v;
              
              //code start
            var cond = 0
            frappe.db.get_single_value("Thirvu Retail Settings","allow_display_customer_outstanding_amount").then(value =>{
            cond = value
            if(cond == 1){
              customer = _vm.customer;
               if(customer){
              frappe.call({
                method : "posawesome.Js_Api.credit_sales.customer_credit_sale",
                args:{
                  customer: customer
                },
                callback : function(r){
                  if(r.message[2]>0){
                    let modes=[];
                    for(var i=0; i<_vm.pos_profile.pos_profile.payments.length; i++){
                      modes.push(_vm.pos_profile.pos_profile.payments[i].mode_of_payment)
                    }
                  var d = new frappe.ui.Dialog({
                    title:"Customer: "+ customer +"'s Outstanding Amount",
                    fields:[
                      {'fieldname':'alert','fieldtype':'HTML','read_only':1,'bold':1},
                      {'label':'Outstanding Amount','fieldname':'outstanding','fieldtype':'Currency','default':r.message[2],'read_only':1},
                      {'label':'Paid Amount','fieldname':'amount','fieldtype':'Currency','reqd':1},
                      {
                        'label':'Mode of Payment',
                        'fieldname':'mode',
                        'fieldtype':'Select',
                        'options':modes
                      },
                      {'label':'Reference Number','fieldname':'ref_no','fieldtype':'Data'},
                      {'label':'Reference Date','fieldname':'ref_date','fieldtype':'Date'}
                    ],
                    primary_action : function(data){
                      if(data.amount>0){
                      frappe.call(
                        'posawesome.posawesome.api.posapp.check_opening_shift', 
                        {user: frappe.session.user,}).then(function (id) {
                          if (r.message) {
                            frappe.call({
                              method:"posawesome.Js_Api.credit_sales.payment_entry",
                              args:{
                              // amount,mode,customer,pending_invoice
            
                                amount:data.amount,
                                mode:data.mode,
                                customer:customer,
                                pending_invoice:r.message[1],
                                company:_vm._data.pos_profile.company.company_name,
                                opening : id.message.pos_opening_shift.name,
                                ref_no: data.ref_no,
                                ref_date: data.ref_date
                                
                              },
                              callback : function(res){
                                  if(res.message[0]){
                                    evntBus.$emit('show_mesage', {
                                      text: __('Payment Entry Created Successfully.'),
                                      color: 'success',
                                    });
                                    var mode = r.message[1]
                                    var payment = r.message[0]
      
                                  }
                              }
                            });
                          }
                        });
      
                      }
                      d.hide();
                    }
                  });
                  var template = r.message[3]
                  d.set_df_property('alert','options',frappe.render(template,{}))
                  d.show();
                }
              }
              });
              }}
      })
      
        //code end
              //
            },
            expression: "customer"
          }
        })
      ],
      1
    )
  };
  var __vue_staticRenderFns__$2 = [];
  __vue_render__$2._withStripped = true;

    /* style */
    var __vue_inject_styles__$2 = undefined;
    /* scoped */
    var __vue_scope_id__$2 = undefined;
    /* module identifier */
    var __vue_module_identifier__$2 = undefined;
    /* functional template */
    var __vue_is_functional_template__$2 = false;
    /* component normalizer */
    function __vue_normalize__$2(
      template, style, script,
      scope, functional, moduleIdentifier,
      createInjector, createInjectorSSR
    ) {
      var component = (typeof script === 'function' ? script.options : script) || {};

      // For security concerns, we use only base name in production mode.
      component.__file = "/home/skss/frappe-bench/apps/posawesome/posawesome/public/js/posapp/components/pos/Customer.vue";

      if (!component.render) {
        component.render = template.render;
        component.staticRenderFns = template.staticRenderFns;
        component._compiled = true;

        if (functional) { component.functional = true; }
      }

      component._scopeId = scope;

      return component
    }
    /* style inject */
    
    /* style inject SSR */
    

    
    var Customer = __vue_normalize__$2(
      { render: __vue_render__$2, staticRenderFns: __vue_staticRenderFns__$2 },
      __vue_inject_styles__$2,
      __vue_script__$2,
      __vue_scope_id__$2,
      __vue_is_functional_template__$2,
      __vue_module_identifier__$2,
      undefined,
      undefined
    );

  //

  var script$3 = {
    data: function data() {
      return {
        pos_profile: '',
        pos_opening_shift: '',
        stock_settings: '',
        invoice_doc: '',
        return_doc: '',
        customer: '',
        customer_info: '',
        discount_amount: 0,
        additional_discount_percentage: 0,
        total_tax: 0,
        items: [],
        posOffers: [],
        posa_offers: [],
        posa_coupons: [],
        allItems: [],
        discount_percentage_offer_name: null,
        invoiceTypes: ['Invoice', 'Order'],
        invoiceType: 'Invoice',
        itemsPerPage: 1000,
        expanded: [],
        singleExpand: true,
        cancel_dialog: false,
        items_headers: [
          {
            text: __('Name'),
            align: 'start',
            sortable: true,
            value: 'item_name',
          },
          { text: __('QTY'), value: 'qty', align: 'center' },
          { text: __('UOM'), value: 'uom', align: 'center' },
          { text: __('Rate'), value: 'rate', align: 'center' },
          { text: __('Amount'), value: 'amount', align: 'center' },
          { text: __('is Offer'), value: 'posa_is_offer', align: 'center' } ],
      };
    },

    components: {
      Customer: Customer,
    },

    computed: {
      total_qty: function total_qty() {
        this.close_payments();
        var qty = 0;
        this.items.forEach(function (item) {
          qty += item.qty;
        });
        return flt(qty).toFixed(2);
      },
      Total: function Total() {
        var sum = 0;
        this.items.forEach(function (item) {
          sum += item.qty * item.rate;
        });
        return flt(sum).toFixed(2);
      },
      subtotal: function subtotal() {
        this.close_payments();
        var sum = 0;
        this.items.forEach(function (item) {
          sum += item.qty * item.rate;
        });
        sum -= flt(this.discount_amount);
        return flt(sum).toFixed(2);
      },
      total_items_discount_amount: function total_items_discount_amount() {
        var sum = 0;
        this.items.forEach(function (item) {
          sum += item.qty * item.discount_amount;
        });
        return flt(sum).toFixed(2);
      },
    },

    methods: {
      remove_item: function remove_item(item) {
        var index = this.items.findIndex(
          function (el) { return el.posa_row_id == item.posa_row_id; }
        );
        if (index >= 0) {
          this.items.splice(index, 1);
        }
        var idx = this.expanded.findIndex(
          function (el) { return el.posa_row_id == item.posa_row_id; }
        );
        if (idx >= 0) {
          this.expanded.splice(idx, 1);
        }
      },

      add_one: function add_one(item) {
        item.qty++;
        if (item.qty == 0) {
          this.remove_item(item);
        }
        this.calc_sotck_gty(item, item.qty);
        this.$forceUpdate();
      },
      subtract_one: function subtract_one(item) {
        item.qty--;
        if (item.qty == 0) {
          this.remove_item(item);
        }
        this.calc_sotck_gty(item, item.qty);
        this.$forceUpdate();
      },

      add_item: function add_item(item) {
        if (!item.uom) {
          item.uom = item.stock_uom;
        }
        var index = this.items.findIndex(
          function (el) { return el.item_code === item.item_code &&
            el.uom === item.uom &&
            !el.posa_is_offer &&
            !el.posa_is_replace; }
        );
        if (index === -1) {
          var new_item = this.get_new_item(item);
          if (item.has_serial_no && item.to_set_serial_no) {
            new_item.serial_no_selected = [];
            new_item.serial_no_selected.push(item.to_set_serial_no);
            item.to_set_serial_no = null;
          }
          this.items.unshift(new_item);
          this.update_item_detail(new_item);
        } else {
          var cur_item = this.items[index];
          this.update_items_details([cur_item]);
          if (item.has_serial_no && item.to_set_serial_no) {
            if (cur_item.serial_no_selected.includes(item.to_set_serial_no)) {
              evntBus.$emit('show_mesage', {
                text: __("This Serial Number {0} has already been added!", [
                  item.to_set_serial_no ]),
                color: 'warning',
              });
              item.to_set_serial_no = null;
              return;
            }
            cur_item.serial_no_selected.push(item.to_set_serial_no);
            item.to_set_serial_no = null;
          }
          if (!cur_item.has_batch_no) {
            cur_item.qty += item.qty || 1;
            this.calc_sotck_gty(cur_item, cur_item.qty);
          } else {
            if (
              cur_item.stock_qty < cur_item.actual_batch_qty ||
              !cur_item.batch_no
            ) {
              cur_item.qty += item.qty || 1;
              this.calc_sotck_gty(cur_item, cur_item.qty);
            } else {
              var new_item$1 = this.get_new_item(cur_item);
              new_item$1.batch_no = '';
              new_item$1.batch_no_expiry_date = '';
              new_item$1.actual_batch_qty = '';
              new_item$1.qty = item.qty || 1;
              this.items.unshift(new_item$1);
            }
          }
          this.set_serial_no(cur_item);
        }
        this.$forceUpdate();
      },

      get_new_item: function get_new_item(item) {
        var new_item = Object.assign({}, item);
        if (!item.qty) {
          item.qty = 1;
        }
        if (!item.posa_is_offer) {
          item.posa_is_offer = 0;
        }
        if (!item.posa_is_replace) {
          item.posa_is_replace = '';
        }
        new_item.stock_qty = item.qty;
        new_item.discount_amount = 0;
        new_item.discount_percentage = 0;
        new_item.discount_amount_per_item = 0;
        new_item.price_list_rate = item.rate;
        new_item.qty = item.qty;
        new_item.uom = item.uom ? item.uom : item.stock_uom;
        new_item.actual_batch_qty = '';
        new_item.conversion_factor = 1;
        new_item.posa_offers = JSON.stringify([]);
        new_item.posa_offer_applied = 0;
        new_item.posa_is_offer = item.posa_is_offer;
        new_item.posa_is_replace = item.posa_is_replace || null;
        new_item.is_free_item = 0;
        new_item.posa_notes = '';
        new_item.posa_delivery_date = '';
        new_item.posa_row_id = this.makeid(20);
        if (
          (!this.pos_profile.posa_auto_set_batch && new_item.has_batch_no) ||
          new_item.has_serial_no
        ) {
          this.expanded.push(new_item);
        }
        return new_item;
      },

      cancel_invoice: function cancel_invoice() {
        var doc = this.get_invoice_doc();
        this.invoiceType = 'Invoice';
        this.invoiceTypes = ['Invoice', 'Order'];
        if (doc.name && this.pos_profile.posa_allow_delete) {
          frappe.call({
            method: 'posawesome.posawesome.api.posapp.delete_invoice',
            args: { invoice: doc.name },
            async: true,
            callback: function (r) {
              if (r.message) {
                evntBus.$emit('show_mesage', {
                  text: r.message,
                  color: 'warning',
                });
              }
            },
          });
        }
        this.items = [];
        this.posa_offers = [];
        evntBus.$emit('set_pos_coupons', []);
        this.posa_coupons = [];
        this.customer = this.pos_profile.customer;
        this.invoice_doc = '';
        this.return_doc = '';
        this.discount_amount = 0;
        this.additional_discount_percentage = 0;
        evntBus.$emit('set_customer_readonly', false);
        this.cancel_dialog = false;
      },

      new_invoice: function new_invoice(data) {
        var this$1 = this;
        if ( data === void 0 ) data = {};

        evntBus.$emit('set_customer_readonly', false);
        this.expanded = [];
        this.posa_offers = [];
        evntBus.$emit('set_pos_coupons', []);
        this.posa_coupons = [];
        this.return_doc = '';
        var doc = this.get_invoice_doc();
        if (doc.name) {
          this.update_invoice(doc);
        } else {
          if (doc.items.length) {
            this.update_invoice(doc);
          }
        }
        if (!data.name && !data.is_return) {
          this.items = [];
          this.customer = this.pos_profile.customer;
          this.invoice_doc = '';
          this.discount_amount = 0;
          this.additional_discount_percentage = 0;
          this.invoiceType = 'Invoice';
          this.invoiceTypes = ['Invoice', 'Order'];
        } else {
          if (data.is_return) {
            evntBus.$emit('set_customer_readonly', true);
            this.invoiceType = 'Return';
            this.invoiceTypes = ['Return'];
          }
          this.invoice_doc = data;
          this.items = data.items;
          this.update_items_details(this.items);
          this.posa_offers = data.posa_offers || [];
          this.items.forEach(function (item) {
            if (!item.posa_row_id) {
              item.posa_row_id = this$1.makeid(20);
            }
            if (item.batch_no) {
              this$1.set_batch_qty(item, item.batch_no);
            }
          });
          this.customer = data.customer;
          this.discount_amount = data.discount_amount;
          this.additional_discount_percentage =
            data.additional_discount_percentage;
          this.items.forEach(function (item) {
            if (item.serial_no) {
              item.serial_no_selected = [];
              var serial_list = item.serial_no.split('\n');
              serial_list.forEach(function (element) {
                if (element.length) {
                  item.serial_no_selected.push(element);
                }
              });
              item.serial_no_selected_count = item.serial_no_selected.length;
            }
          });
        }
      },

      get_invoice_doc: function get_invoice_doc() {
        var doc = {};
        if (this.invoice_doc.name) {
          doc = Object.assign({}, this.invoice_doc);
        }
        //creating sales invoice
        doc.doctype = 'Sales Invoice';
        doc.is_pos = 1;
        doc.ignore_pricing_rule = 1;
        doc.company = doc.company || this.pos_profile.company;
        doc.pos_profile = doc.pos_profile || this.pos_profile.name;
        doc.campaign = doc.campaign || this.pos_profile.campaign;
        doc.currency = doc.currency || this.pos_profile.currency;
        doc.naming_series = doc.naming_series || this.pos_profile.naming_series;
        doc.customer = this.customer;
        doc.items = this.get_invoice_items();
        doc.total = this.subtotal;
        doc.discount_amount = flt(this.discount_amount);
        doc.additional_discount_percentage = flt(
          this.additional_discount_percentage
        );
        doc.posa_pos_opening_shift = this.pos_opening_shift.name;
        opening_shift_id = this.pos_opening_shift.name;
        doc.payments = this.get_payments();
        doc.taxes = [];
        doc.is_return = this.invoice_doc.is_return;
        doc.return_against = this.invoice_doc.return_against;
        doc.posa_offers = this.posa_offers;
        doc.posa_coupons = this.posa_coupons;
        return doc;
      },

      get_invoice_items: function get_invoice_items() {
        var items_list = [];
        this.items.forEach(function (item) {
          var new_item = {
            item_code: item.item_code,
            posa_row_id: item.posa_row_id,
            posa_offers: item.posa_offers,
            posa_offer_applied: item.posa_offer_applied,
            posa_is_offer: item.posa_is_offer,
            posa_is_replace: item.posa_is_replace,
            is_free_item: item.is_free_item,
            qty: item.qty,
            rate: item.rate,
            uom: item.uom,
            amount: item.qty * item.rate,
            conversion_factor: item.conversion_factor,
            serial_no: item.serial_no,
            discount_percentage: item.discount_percentage,
            discount_amount: item.discount_amount,
            batch_no: item.batch_no,
            posa_notes: item.posa_notes,
            posa_delivery_date: item.posa_delivery_date,
            price_list_rate: item.price_list_rate,
            warehouse: item.warehouse
          };
          items_list.push(new_item);
        });
        return items_list;
      },

      get_payments: function get_payments() {
        var payments = [];
        this.pos_profile.payments.forEach(function (payment) {
          payments.push({
            amount: 0,
            mode_of_payment: payment.mode_of_payment,
            default: payment.default,
            account: '',
          });
        });
        return payments;
      },

      update_invoice: function update_invoice(doc) {
        var vm = this;
        frappe.call({
          method: 'posawesome.posawesome.api.posapp.update_invoice',
          args: {
            data: doc,
          },
          async: false,
          callback: function (r) {
            if (r.message) {
              vm.invoice_doc = r.message;
            }
          },
        });
        return this.invoice_doc;
      },

      proces_invoice: function proces_invoice() {
        var doc = this.get_invoice_doc();
        if (doc.name) {
          return this.update_invoice(doc);
        } else {
          return this.update_invoice(doc);
        }
      },

      show_payment: function show_payment() {
        var out = this
        if (!this.customer) {
          evntBus.$emit('show_mesage', {
            text: __("There is no Customer !"),
            color: 'error',
          });
          return;
        }
        if (!this.items.length) {
          evntBus.$emit('show_mesage', {
            text: __("There is no Items !"),
            color: 'error',
          });
          return;
        }
        if (!this.validate()) {
          return;
        }
        frappe.db.get_single_value("Thirvu Retail Settings","allow_display_customer_transaction_history").then(value =>{
          if(value==1){
         // //code start
         frappe.call({
          method:"posawesome.Js_Api.credit_sales.customer_transaction_history",
          args:{
              customer:this.customer,
              items: this.items
              },
          callback: function(r){
                var dialog_trans = new frappe.ui.Dialog({
                title: "Customer transaction history",
                fields:[
                {
                fieldname:'table',
                fieldtype:'HTML',
                label:'Table'
               },
                ],
                primary_action : function(data){
                dialog_trans.hide()
                }
            });
       if(r.message[1]){
         var template = r.message[3]
         dialog_trans.set_df_property('table', 'options', frappe.render(template,{}))
         dialog_trans.show();
       }
            }
    });
          }
        });
      evntBus.$emit('show_payment', 'true');
      var invoice_doc = this.proces_invoice();
      evntBus.$emit('send_invoice_doc_payment', invoice_doc);
         // //code end
      },

      validate: function validate() {
        var this$1 = this;

        var value = true;
        this.items.forEach(function (item) {
          if (this$1.stock_settings.allow_negative_stock != 1) {
            if (
              this$1.invoiceType == 'Invoice' &&
              ((item.is_stock_item && item.stock_qty && !item.actual_qty) ||
                (item.is_stock_item && item.stock_qty > item.actual_qty))
            ) {
              evntBus.$emit('show_mesage', {
                text: __(
                  "The existing quantity '{0}' for item '{1}' is not enough",
                  [item.actual_qty, item.item_name]
                ),
                color: 'error',
              });
              value = false;
            }
          }
          if (
            item.max_discount > 0 &&
            item.discount_percentage > item.max_discount
          ) {
            evntBus.$emit('show_mesage', {
              text: __("Maximum discount for Item {0} is {1}%", [
                item.item_name,
                item.max_discount ]),
              color: 'error',
            });
            value = false;
          }
          if (item.has_serial_no) {
            if (
              !this$1.invoice_doc.is_return &&
              (!item.serial_no_selected ||
                item.stock_qty != item.serial_no_selected.length)
            ) {
              evntBus.$emit('show_mesage', {
                text: __("Selected serial numbers of item {0} is incorrect", [
                  item.item_name ]),
                color: 'error',
              });
              value = false;
            }
          }
          if (item.has_batch_no) {
            if (item.stock_qty > item.actual_batch_qty) {
              evntBus.$emit('show_mesage', {
                text: __(
                  "The existing batch quantity of item {0} is not enough",
                  [item.item_name]
                ),
                color: 'error',
              });
              value = false;
            }
          }
          if (this$1.pos_profile.posa_allow_user_to_edit_additional_discount) {
            var clac_percentage = (this$1.discount_amount / this$1.Total) * 100;
            if (clac_percentage > this$1.pos_profile.posa_max_discount_allowed) {
              evntBus.$emit('show_mesage', {
                text: __("The discount should not be higher than {0}%", [
                  this$1.pos_profile.posa_max_discount_allowed ]),
                color: 'error',
              });
              value = false;
            }
          }
          if (this$1.invoice_doc.is_return) {
            if (this$1.subtotal >= 0) {
              evntBus.$emit('show_mesage', {
                text: __("Return Invoice Total Not Correct"),
                color: 'error',
              });
              value = false;
              return value;
            }
            if (this$1.subtotal * -1 > this$1.return_doc.total) {
              evntBus.$emit('show_mesage', {
                text: __("Return Invoice Total should not be higher than {0}", [
                  this$1.return_doc.total ]),
                color: 'error',
              });
              value = false;
              return value;
            }
            this$1.items.forEach(function (item) {
              var return_item = this$1.return_doc.items.find(
                function (element) { return element.item_code == item.item_code; }
              );

              if (!return_item) {
                evntBus.$emit('show_mesage', {
                  text: __(
                    "The item {0} cannot be returned because it is not in the invoice {1}",
                    [item.item_name, this$1.return_doc.name]
                  ),
                  color: 'error',
                });
                value = false;
                return value;
              } else if (item.qty * -1 > return_item.qty || item.qty >= 0) {
                evntBus.$emit('show_mesage', {
                  text: __("The QTY of the item {0} cannot be greater than {1}", [
                    item.item_name,
                    return_item.qty ]),
                  color: 'error',
                });
                value = false;
                return value;
              }
            });
          }
        });
        return value;
      },

      get_draft_invoices: function get_draft_invoices() {
        frappe.call({
          method: 'posawesome.posawesome.api.posapp.get_draft_invoices',
          args: {
            pos_opening_shift: this.pos_opening_shift.name,
          },
          async: false,
          callback: function (r) {
            if (r.message) {
              evntBus.$emit('open_drafts', r.message);
            }
          },
        });
      },

      open_returns: function open_returns() {
        evntBus.$emit('open_returns', this.pos_profile.company);
      },

      close_payments: function close_payments() {
        evntBus.$emit('show_payment', 'false');
      },

      update_items_details: function update_items_details(items) {
        if (!items.length > 0) {
          return;
        }
        var vm = this;
        if (!vm.pos_profile) { return; }
        frappe.call({
          method: 'posawesome.posawesome.api.posapp.get_items_details',
          async: false,
          args: {
            pos_profile: vm.pos_profile,
            items_data: items,
          },
          callback: function (r) {
            if (r.message) {
              items.forEach(function (item) {
                var updated_item = r.message.find(
                  function (element) { return element.posa_row_id == item.posa_row_id; }
                );
                item.actual_qty = updated_item.actual_qty;
                item.serial_no_data = updated_item.serial_no_data;
                item.batch_no_data = updated_item.batch_no_data;
                item.item_uoms = updated_item.item_uoms;
                item.has_batch_no = updated_item.has_batch_no;
                item.has_serial_no = updated_item.has_serial_no;
              });
            }
          },
        });
      },

      update_item_detail: function update_item_detail(item) {
        var vm = this;
        frappe.call({
          method: 'posawesome.posawesome.api.posapp.get_item_detail',
          args: {
            warehouse: item.warehouse,
            doc: this.get_invoice_doc(),
            price_list: this.pos_profile.price_list,
            item: {
              item_code: item.item_code,
              customer: this.customer,
              doctype: 'Sales Invoice',
              name: 'New Sales Invoice 1',
              company: this.pos_profile.company,
              conversion_rate: 1,
              qty: item.qty,
              price_list_rate: item.price_list_rate,
              child_docname: 'New Sales Invoice Item 1',
              cost_center: this.pos_profile.cost_center,
              currency: this.pos_profile.currency,
              // plc_conversion_rate: 1,
              pos_profile: this.pos_profile.name,
              price_list: this.pos_profile.selling_price_list,
              uom: item.uom,
              tax_category: '',
              transaction_type: 'selling',
              update_stock: this.pos_profile.update_stock,
              price_list: this.get_price_list(),
              has_batch_no: item.has_batch_no,
              serial_no: item.serial_no,
              batch_no: item.batch_no,
              is_stock_item: item.is_stock_item,
            },
          },
          callback: function (r) {
            if (r.message) {
              var data = r.message;
              if (
                item.has_batch_no &&
                vm.pos_profile.posa_auto_set_batch &&
                !item.batch_no &&
                data.batch_no
              ) {
                item.batch_no = data.batch_no;
                vm.set_batch_qty(item, item.batch_no, false);
              }
              if (data.has_pricing_rule) ; else if (
                vm.pos_profile.posa_apply_customer_discount &&
                vm.customer_info.posa_discount > 0 &&
                vm.customer_info.posa_discount <= 100
              ) {
                if (
                  item.posa_is_offer == 0 &&
                  !item.posa_is_replace &&
                  item.posa_offer_applied == 0
                ) {
                  if (item.max_discount > 0) {
                    item.discount_percentage =
                      item.max_discount < vm.customer_info.posa_discount
                        ? item.max_discount
                        : vm.customer_info.posa_discount;
                  } else {
                    item.discount_percentage = vm.customer_info.posa_discount;
                  }
                }
              }
              if (!item.btach_price) {
                if (
                  !item.is_free_item &&
                  !item.posa_is_offer &&
                  !item.posa_is_replace
                ) {
                  item.price_list_rate = data.price_list_rate;
                }
              }
              item.last_purchase_rate = data.last_purchase_rate;
              item.projected_qty = data.projected_qty;
              item.reserved_qty = data.reserved_qty;
              item.conversion_factor = data.conversion_factor;
              item.stock_qty = data.stock_qty;
              item.actual_qty = data.actual_qty;
              item.stock_uom = data.stock_uom;
              (item.has_serial_no = data.has_serial_no),
                (item.has_batch_no = data.has_batch_no),
                vm.calc_item_price(item);
            }
          },
        });
      },

      fetch_customer_details: function fetch_customer_details() {
        var vm = this;
        if (this.customer) {
          frappe.call({
            method: 'posawesome.posawesome.api.posapp.get_customer_info',
            args: {
              customer: vm.customer,
            },
            async: false,
            callback: function (r) {
              var message = r.message;
              if (!r.exc) {
                vm.customer_info = Object.assign({}, message);
              }
              vm.update_price_list();
            },
          });
        }
      },

      get_price_list: function get_price_list() {
        var price_list = this.pos_profile.selling_price_list;
        if (this.customer_info && this.pos_profile) {
          var ref =
            this.customer_info;
          var customer_price_list = ref.customer_price_list;
          var customer_group_price_list = ref.customer_group_price_list;
          var pos_price_list = this.pos_profile.selling_price_list;
          if (customer_price_list && customer_price_list != pos_price_list) {
            price_list = customer_price_list;
          } else if (
            customer_group_price_list &&
            customer_group_price_list != pos_price_list
          ) {
            price_list = customer_group_price_list;
          }
        }
        return price_list;
      },

      update_price_list: function update_price_list() {
        var price_list = this.get_price_list();
        if (price_list == this.pos_profile.selling_price_list) {
          price_list = null;
        }
        evntBus.$emit('update_customer_price_list', price_list);
      },
      update_discount_umount: function update_discount_umount() {
        var value = flt(this.additional_discount_percentage);
        if (value >= -100 && value <= 100) {
          this.discount_amount = (this.Total * value) / 100;
        } else {
          this.additional_discount_percentage = 0;
          this.discount_amount = 0;
        }
      },

      calc_prices: function calc_prices(item, value, $event) {
        if (event.target.id === 'rate') {
          item.discount_percentage = 0;
          if (value < item.price_list_rate) {
            item.discount_amount = (
              flt(item.price_list_rate) - flt(value)
            ).toFixed(2);
          } else if (value < 0) {
            item.rate = item.price_list_rate;
            item.discount_amount = 0;
          } else if (value > item.price_list_rate) {
            item.discount_amount = 0;
          }
        } else if (event.target.id === 'discount_amount') {
          if (value < 0) {
            item.discount_amount = 0;
            item.discount_percentage = 0;
          } else {
            item.rate = flt(item.price_list_rate) - flt(value);
            item.discount_percentage = 0;
          }
        } else if (event.target.id === 'discount_percentage') {
          if (value < 0) {
            item.discount_amount = 0;
            item.discount_percentage = 0;
          } else {
            item.rate = (
              flt(item.price_list_rate) -
              (flt(item.price_list_rate) * flt(value)) / 100
            ).toFixed(2);
            item.discount_amount = (
              flt(item.price_list_rate) - flt(item.rate)
            ).toFixed(2);
          }
        }
      },

      calc_item_price: function calc_item_price(item) {
        if (!item.posa_offer_applied) {
          if (item.price_list_rate) {
            item.rate = item.price_list_rate;
          }
        }
        if (item.discount_percentage) {
          item.rate =
            flt(item.price_list_rate) -
            (flt(item.price_list_rate) * flt(item.discount_percentage)) / 100;
          item.discount_amount = (
            flt(item.price_list_rate) - flt(item.rate)
          ).toFixed(2);
        } else if (item.discount_amount) {
          item.rate = (
            flt(item.price_list_rate) - flt(item.discount_amount)
          ).toFixed(2);
        }
      },

      calc_uom: function calc_uom(item, value) {
        var new_uom = item.item_uoms.find(function (element) { return element.uom == value; });
        item.conversion_factor = new_uom.conversion_factor;
        if (!item.posa_offer_applied) {
          item.discount_amount = 0;
          item.discount_percentage = 0;
        }
        if (item.btach_price) {
          item.price_list_rate = item.btach_price * new_uom.conversion_factor;
        }
        this.update_item_detail(item);
      },

      calc_sotck_gty: function calc_sotck_gty(item, value) {
        item.stock_qty = item.conversion_factor * value;
      },

      set_serial_no: function set_serial_no(item) {
        if (!item.has_serial_no) { return; }
        item.serial_no = '';
        item.serial_no_selected.forEach(function (element) {
          item.serial_no += element + '\n';
        });
        item.serial_no_selected_count = item.serial_no_selected.length;
        if (item.serial_no_selected_count != item.stock_qty) {
          evntBus.$emit('show_mesage', {
            text: __("Selected Serial No QTY is {0} it should be {1}", [
              item.serial_no_selected_count,
              item.stock_qty ]),
            color: 'warning',
          });
        }
      },

      set_batch_qty: function set_batch_qty(item, value, update) {
        if ( update === void 0 ) update = true;

        var batch_no = item.batch_no_data.find(
          function (element) { return element.batch_no == value; }
        );
        item.actual_batch_qty = batch_no.batch_qty;
        item.batch_no_expiry_date = batch_no.expiry_date;
        if (batch_no.btach_price) {
          item.btach_price = batch_no.btach_price;
          item.price_list_rate = batch_no.btach_price;
          item.rate = batch_no.btach_price;
        } else if (update) {
          item.btach_price = null;
          this.update_item_detail(item);
        }
      },

      formtCurrency: function formtCurrency(value) {
        value = parseFloat(value);
        return value.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
      },

      shortOpenPayment: function shortOpenPayment(e) {
        if (e.key === 's' && (e.ctrlKey || e.metaKey)) {
          e.preventDefault();
          this.show_payment();
        }
      },

      shortDeleteFirstItem: function shortDeleteFirstItem(e) {
        if (e.key === 'd' && (e.ctrlKey || e.metaKey)) {
          e.preventDefault();
          this.remove_item(this.items[0]);
        }
      },

      shortOpenFirstItem: function shortOpenFirstItem(e) {
        if (e.key === 'a' && (e.ctrlKey || e.metaKey)) {
          e.preventDefault();
          this.expanded = [];
          this.expanded.push(this.items[0]);
        }
      },

      shortSelectDiscount: function shortSelectDiscount(e) {
        if (e.key === 'z' && (e.ctrlKey || e.metaKey)) {
          e.preventDefault();
          this.$refs.discount.focus();
        }
      },

      makeid: function makeid(length) {
        var result = '';
        var characters = 'abcdefghijklmnopqrstuvwxyz0123456789';
        var charactersLength = characters.length;
        for (var i = 0; i < length; i++) {
          result += characters.charAt(
            Math.floor(Math.random() * charactersLength)
          );
        }
        return result;
      },

      checkOfferIsAppley: function checkOfferIsAppley(item, offer) {
        var this$1 = this;

        var applied = false;
        var item_offers = JSON.parse(item.posa_offers);
        var loop = function () {
          var row_id = list[i];

          var exist_offer = this$1.posa_offers.find(function (el) { return row_id == el.row_id; });
          if (exist_offer && exist_offer.offer_name == offer.name) {
            applied = true;
            return 'break';
          }
        };

        for (var i = 0, list = item_offers; i < list.length; i += 1) {
          var returned = loop();

          if ( returned === 'break' ) break;
        }
        return applied;
      },

      handelOffers: function handelOffers() {
        var this$1 = this;

        var offers = [];
        this.posOffers.forEach(function (offer) {
          if (offer.apply_on === 'Item Code') {
            var itemOffer = this$1.getItemOffer(offer);
            if (itemOffer) {
              offers.push(itemOffer);
            }
          } else if (offer.apply_on === 'Item Group') {
            var groupOffer = this$1.getGroupOffer(offer);
            if (groupOffer) {
              offers.push(groupOffer);
            }
          } else if (offer.apply_on === 'Brand') {
            var brandOffer = this$1.getBrandOffer(offer);
            if (brandOffer) {
              offers.push(brandOffer);
            }
          } else if (offer.apply_on === 'Transaction') {
            var transactionOffer = this$1.getTransactionOffer(offer);
            if (transactionOffer) {
              offers.push(transactionOffer);
            }
          }
        });

        this.setItemGiveOffer(offers);
        this.updatePosOffers(offers);
      },

      setItemGiveOffer: function setItemGiveOffer(offers) {
        var this$1 = this;

        // Set item give offer for replace
        offers.forEach(function (offer) {
          if (
            offer.apply_on == 'Item Code' &&
            offer.apply_type == 'Item Code' &&
            offer.replace_item
          ) {
            offer.give_item = offer.item;
            offer.apply_item_code = offer.item;
          } else if (
            offer.apply_on == 'Item Group' &&
            offer.apply_type == 'Item Group' &&
            offer.replace_cheapest_item
          ) {
            var offerItemCode = this$1.getCheapestItem(offer).item_code;
            offer.give_item = offerItemCode;
            offer.apply_item_code = offerItemCode;
          }
        });
      },

      getCheapestItem: function getCheapestItem(offer) {
        var this$1 = this;

        var itemsRowID;
        if (typeof offer.items === 'string') {
          itemsRowID = JSON.parse(offer.items);
        } else {
          itemsRowID = offer.items;
        }
        var itemsList = [];
        itemsRowID.forEach(function (row_id) {
          itemsList.push(this$1.getItemFromRowID(row_id));
        });
        var result = itemsList.reduce(function (res, obj) {
          return !obj.posa_is_replace &&
            !obj.posa_is_offer &&
            obj.price_list_rate < res.price_list_rate
            ? obj
            : res;
        });
        return result;
      },

      getItemFromRowID: function getItemFromRowID(row_id) {
        var item = this.items.find(function (el) { return el.posa_row_id == row_id; });
        return item;
      },

      checkQtyAnountOffer: function checkQtyAnountOffer(offer, qty, amount) {
        var min_qty = false;
        var max_qty = false;
        var min_amt = false;
        var max_amt = false;
        var applys = [];

        if (offer.min_qty || offer.min_qty == 0) {
          if (qty >= offer.min_qty) {
            min_qty = true;
          }
          applys.push(min_qty);
        }

        if (offer.max_qty > 0) {
          if (qty <= offer.max_qty) {
            max_qty = true;
          }
          applys.push(max_qty);
        }

        if (offer.min_amt > 0) {
          if (amount >= offer.min_amt) {
            min_amt = true;
          }
          applys.push(min_amt);
        }

        if (offer.max_amt > 0) {
          if (amount <= offer.max_amt) {
            max_amt = true;
          }
          applys.push(max_amt);
        }
        var apply = false;
        if (!applys.includes(false)) {
          apply = true;
        }
        var res = {
          apply: apply,
          conditions: { min_qty: min_qty, max_qty: max_qty, min_amt: min_amt, max_amt: max_amt },
        };
        return res;
      },

      checkOfferCoupon: function checkOfferCoupon(offer) {
        if (offer.coupon_based) {
          var coupon = this.posa_coupons.find(
            function (el) { return offer.name == el.pos_offer; }
          );
          if (coupon) {
            offer.coupon = coupon.coupon;
            return true;
          } else {
            return false;
          }
        } else {
          offer.coupon = null;
          return true;
        }
      },

      getItemOffer: function getItemOffer(offer) {
        var this$1 = this;

        var apply_offer = null;
        if (offer.apply_on === 'Item Code') {
          if (this.checkOfferCoupon(offer)) {
            this.items.forEach(function (item) {
              if (!item.posa_is_offer && item.item_code === offer.item) {
                var items = [];
                if (
                  offer.offer === 'Item Price' &&
                  item.posa_offer_applied &&
                  !this$1.checkOfferIsAppley(item, offer)
                ) ; else {
                  var res = this$1.checkQtyAnountOffer(
                    offer,
                    item.stock_qty,
                    item.stock_qty * item.price_list_rate
                  );
                  if (res.apply) {
                    items.push(item.posa_row_id);
                    offer.items = items;
                    apply_offer = offer;
                  }
                }
              }
            });
          }
        }
        return apply_offer;
      },

      getGroupOffer: function getGroupOffer(offer) {
        var this$1 = this;

        var apply_offer = null;
        if (offer.apply_on === 'Item Group') {
          if (this.checkOfferCoupon(offer)) {
            var items = [];
            var total_count = 0;
            var total_amount = 0;
            this.items.forEach(function (item) {
              if (!item.posa_is_offer && item.item_group === offer.item_group) {
                if (
                  offer.offer === 'Item Price' &&
                  item.posa_offer_applied &&
                  !this$1.checkOfferIsAppley(item, offer)
                ) ; else {
                  total_count += item.stock_qty;
                  total_amount += item.stock_qty * item.price_list_rate;
                  items.push(item.posa_row_id);
                }
              }
            });
            if (total_count || total_amount) {
              var res = this.checkQtyAnountOffer(
                offer,
                total_count,
                total_amount
              );
              if (res.apply) {
                offer.items = items;
                apply_offer = offer;
              }
            }
          }
        }
        return apply_offer;
      },

      getBrandOffer: function getBrandOffer(offer) {
        var this$1 = this;

        var apply_offer = null;
        if (offer.apply_on === 'Brand') {
          if (this.checkOfferCoupon(offer)) {
            var items = [];
            var total_count = 0;
            var total_amount = 0;
            this.items.forEach(function (item) {
              if (!item.posa_is_offer && item.brand === offer.brand) {
                if (
                  offer.offer === 'Item Price' &&
                  item.posa_offer_applied &&
                  !this$1.checkOfferIsAppley(item, offer)
                ) ; else {
                  total_count += item.stock_qty;
                  total_amount += item.stock_qty * item.price_list_rate;
                  items.push(item.posa_row_id);
                }
              }
            });
            if (total_count || total_amount) {
              var res = this.checkQtyAnountOffer(
                offer,
                total_count,
                total_amount
              );
              if (res.apply) {
                offer.items = items;
                apply_offer = offer;
              }
            }
          }
        }
        return apply_offer;
      },
      getTransactionOffer: function getTransactionOffer(offer) {
        var apply_offer = null;
        if (offer.apply_on === 'Transaction') {
          if (this.checkOfferCoupon(offer)) {
            var total_qty = 0;
            this.items.forEach(function (item) {
              if (!item.posa_is_offer && !item.posa_is_replace) {
                total_qty += item.stock_qty;
              }
            });
            var items = [];
            var total_count = total_qty;
            var total_amount = this.Total;
            if (total_count || total_amount) {
              var res = this.checkQtyAnountOffer(
                offer,
                total_count,
                total_amount
              );
              if (res.apply) {
                this.items.forEach(function (item) {
                  items.push(item.posa_row_id);
                });
                offer.items = items;
                apply_offer = offer;
              }
            }
          }
        }
        return apply_offer;
      },

      updatePosOffers: function updatePosOffers(offers) {
        evntBus.$emit('update_pos_offers', offers);
      },

      updateInvoiceOffers: function updateInvoiceOffers(offers) {
        var this$1 = this;

        this.posa_offers.forEach(function (invoiceOffer) {
          var existOffer = offers.find(
            function (offer) { return invoiceOffer.row_id == offer.row_id; }
          );
          if (!existOffer) {
            this$1.removeApplyOffer(invoiceOffer);
          }
        });
        offers.forEach(function (offer) {
          var existOffer = this$1.posa_offers.find(
            function (invoiceOffer) { return invoiceOffer.row_id == offer.row_id; }
          );
          if (existOffer) {
            existOffer.items = JSON.stringify(offer.items);
            if (
              existOffer.offer === 'Give Product' &&
              existOffer.give_item &&
              existOffer.give_item != offer.give_item
            ) {
              var item_to_remove = this$1.items.find(
                function (item) { return item.posa_row_id == existOffer.give_item_row_id; }
              );
              if (item_to_remove) {
                var updated_item_offers = offer.items.filter(
                  function (row_id) { return row_id != item_to_remove.posa_row_id; }
                );
                offer.items = updated_item_offers;
                this$1.remove_item(item_to_remove);
                existOffer.give_item_row_id = null;
                existOffer.give_item = null;
              }
              var newItemOffer = this$1.ApplyOnGiveProduct(offer);
              if (offer.replace_cheapest_item) {
                var cheapestItem = this$1.getCheapestItem(offer);
                var oldBaseItem = this$1.items.find(
                  function (el) { return el.posa_row_id == item_to_remove.posa_is_replace; }
                );
                newItemOffer.qty = item_to_remove.qty;
                if (oldBaseItem && !oldBaseItem.posa_is_replace) {
                  oldBaseItem.qty += item_to_remove.qty;
                } else {
                  var restoredItem = this$1.ApplyOnGiveProduct(
                    {
                      given_qty: item_to_remove.qty,
                    },
                    item_to_remove.item_code
                  );
                  restoredItem.posa_is_offer = 0;
                  this$1.items.unshift(restoredItem);
                }
                newItemOffer.posa_is_offer = 0;
                newItemOffer.posa_is_replace = cheapestItem.posa_row_id;
                var diffQty = cheapestItem.qty - newItemOffer.qty;
                if (diffQty <= 0) {
                  newItemOffer.qty += diffQty;
                  this$1.remove_item(cheapestItem);
                  newItemOffer.posa_row_id = cheapestItem.posa_row_id;
                  newItemOffer.posa_is_replace = newItemOffer.posa_row_id;
                } else {
                  cheapestItem.qty = diffQty;
                }
              }
              this$1.items.unshift(newItemOffer);
              existOffer.give_item_row_id = newItemOffer.posa_row_id;
              existOffer.give_item = newItemOffer.item_code;
            } else if (
              existOffer.offer === 'Give Product' &&
              existOffer.give_item &&
              existOffer.give_item == offer.give_item &&
              (offer.replace_item || offer.replace_cheapest_item)
            ) {
              this$1.$nextTick(function () {
                var this$1 = this;

                var offerItem = this.getItemFromRowID(
                  existOffer.give_item_row_id
                );
                var diff = offer.given_qty - offerItem.qty;
                if (diff > 0) {
                  var itemsRowID = JSON.parse(existOffer.items);
                  var itemsList = [];
                  itemsRowID.forEach(function (row_id) {
                    itemsList.push(this$1.getItemFromRowID(row_id));
                  });
                  var existItem = itemsList.find(
                    function (el) { return el.item_code == offerItem.item_code &&
                      el.posa_is_replace != offerItem.posa_row_id; }
                  );
                  if (existItem) {
                    var diffExistQty = existItem.qty - diff;
                    if (diffExistQty > 0) {
                      offerItem.qty += diff;
                      existItem.qty -= diff;
                    } else {
                      offerItem.qty += existItem.qty;
                      this.remove_item(existItem);
                    }
                  }
                }
              });
            } else if (existOffer.offer === 'Item Price') {
              this$1.ApplyOnPrice(offer);
            } else if (existOffer.offer === 'Grand Total') {
              this$1.ApplyOnTotal(offer);
            }
            this$1.addOfferToItems(existOffer);
          } else {
            this$1.applyNewOffer(offer);
          }
        });
      },

      removeApplyOffer: function removeApplyOffer(invoiceOffer) {
        if (invoiceOffer.offer === 'Item Price') {
          this.RemoveOnPrice(invoiceOffer);
          var index = this.posa_offers.findIndex(
            function (el) { return el.row_id === invoiceOffer.row_id; }
          );
          this.posa_offers.splice(index, 1);
        }
        if (invoiceOffer.offer === 'Give Product') {
          var item_to_remove = this.items.find(
            function (item) { return item.posa_row_id == invoiceOffer.give_item_row_id; }
          );
          var index$1 = this.posa_offers.findIndex(
            function (el) { return el.row_id === invoiceOffer.row_id; }
          );
          this.posa_offers.splice(index$1, 1);
          this.remove_item(item_to_remove);
        }
        if (invoiceOffer.offer === 'Grand Total') {
          this.RemoveOnTotal(invoiceOffer);
          var index$2 = this.posa_offers.findIndex(
            function (el) { return el.row_id === invoiceOffer.row_id; }
          );
          this.posa_offers.splice(index$2, 1);
        }
        if (invoiceOffer.offer === 'Loyalty Point') {
          var index$3 = this.posa_offers.findIndex(
            function (el) { return el.row_id === invoiceOffer.row_id; }
          );
          this.posa_offers.splice(index$3, 1);
        }
        this.deleteOfferFromItems(invoiceOffer);
      },

      applyNewOffer: function applyNewOffer(offer) {
        var this$1 = this;

        if (offer.offer === 'Item Price') {
          this.ApplyOnPrice(offer);
        }
        if (offer.offer === 'Give Product') {
          var itemsRowID;
          if (typeof offer.items === 'string') {
            itemsRowID = JSON.parse(offer.items);
          } else {
            itemsRowID = offer.items;
          }
          if (
            offer.apply_on == 'Item Code' &&
            offer.apply_type == 'Item Code' &&
            offer.replace_item
          ) {
            var item = this.ApplyOnGiveProduct(offer, offer.item);
            item.posa_is_replace = itemsRowID[0];
            var baseItem = this.items.find(
              function (el) { return el.posa_row_id == item.posa_is_replace; }
            );
            var diffQty = baseItem.qty - offer.given_qty;
            item.posa_is_offer = 0;
            if (diffQty <= 0) {
              item.qty = baseItem.qty;
              this.remove_item(baseItem);
              item.posa_row_id = item.posa_is_replace;
            } else {
              baseItem.qty = diffQty;
            }
            this.items.unshift(item);
            offer.give_item_row_id = item.posa_row_id;
          } else if (
            offer.apply_on == 'Item Group' &&
            offer.apply_type == 'Item Group' &&
            offer.replace_cheapest_item
          ) {
            var itemsList = [];
            itemsRowID.forEach(function (row_id) {
              itemsList.push(this$1.getItemFromRowID(row_id));
            });
            var baseItem$1 = itemsList.find(
              function (el) { return el.item_code == offer.give_item; }
            );
            var item$1 = this.ApplyOnGiveProduct(offer, offer.give_item);
            item$1.posa_is_offer = 0;
            item$1.posa_is_replace = baseItem$1.posa_row_id;
            var diffQty$1 = baseItem$1.qty - offer.given_qty;
            if (diffQty$1 <= 0) {
              item$1.qty = baseItem$1.qty;
              this.remove_item(baseItem$1);
              item$1.posa_row_id = item$1.posa_is_replace;
            } else {
              baseItem$1.qty = diffQty$1;
            }
            this.items.unshift(item$1);
            offer.give_item_row_id = item$1.posa_row_id;
          } else {
            var item$2 = this.ApplyOnGiveProduct(offer);
            this.items.unshift(item$2);
            if (item$2) {
              offer.give_item_row_id = item$2.posa_row_id;
            }
          }
        }
        if (offer.offer === 'Grand Total') {
          this.ApplyOnTotal(offer);
        }
        if (offer.offer === 'Loyalty Point') {
          evntBus.$emit('show_mesage', {
            text: __('Loyalty Point Offer Applied'),
            color: 'success',
          });
        }

        var newOffer = {
          offer_name: offer.name,
          row_id: offer.row_id,
          apply_on: offer.apply_on,
          offer: offer.offer,
          items: JSON.stringify(offer.items),
          give_item: offer.give_item,
          give_item_row_id: offer.give_item_row_id,
          offer_applied: offer.offer_applied,
          coupon_based: offer.coupon_based,
          coupon: offer.coupon,
        };
        this.posa_offers.push(newOffer);
        this.addOfferToItems(newOffer);
      },

      ApplyOnGiveProduct: function ApplyOnGiveProduct(offer, item_code) {
        if (!item_code) {
          item_code = offer.give_item;
        }
        var items = this.allItems;
        var item = items.find(function (item) { return item.item_code == item_code; });
        if (!item) {
          return;
        }
        var new_item = Object.assign({}, item);
        new_item.qty = offer.given_qty;
        new_item.stock_qty = offer.given_qty;
        new_item.rate = offer.discount_type === 'Rate' ? offer.rate : item.rate;
        new_item.discount_amount =
          offer.discount_type === 'Discount Amount' ? offer.discount_amount : 0;
        new_item.discount_percentage =
          offer.discount_type === 'Discount Percentage'
            ? offer.discount_percentage
            : 0;
        new_item.discount_amount_per_item = 0;
        new_item.uom = item.uom ? item.uom : item.stock_uom;
        new_item.actual_batch_qty = '';
        new_item.conversion_factor = 1;
        new_item.posa_offers = JSON.stringify([]);
        new_item.posa_offer_applied = 0;
        new_item.posa_is_offer = 1;
        new_item.posa_is_replace = null;
        new_item.posa_notes = '';
        new_item.posa_delivery_date = '';
        new_item.is_free_item =
          (offer.discount_type === 'Rate' && !offer.rate) ||
          (offer.discount_type === 'Discount Percentage' &&
            offer.discount_percentage == 0)
            ? 1
            : 0;
        new_item.posa_row_id = this.makeid(20);
        new_item.price_list_rate =
          (offer.discount_type === 'Rate' && !offer.rate) ||
          (offer.discount_type === 'Discount Percentage' &&
            offer.discount_percentage == 0)
            ? 0
            : item.rate;
        if (
          (!this.pos_profile.posa_auto_set_batch && new_item.has_batch_no) ||
          new_item.has_serial_no
        ) {
          this.expanded.push(new_item);
        }
        this.update_item_detail(new_item);
        return new_item;
      },

      ApplyOnPrice: function ApplyOnPrice(offer) {
        var this$1 = this;

        this.items.forEach(function (item) {
          if (offer.items.includes(item.posa_row_id)) {
            var item_offers = JSON.parse(item.posa_offers);
            if (!item_offers.includes(offer.row_id)) {
              if (offer.discount_type === 'Rate') {
                item.rate = offer.rate;
              } else if (offer.discount_type === 'Discount Percentage') {
                item.discount_percentage += offer.discount_percentage;
              } else if (offer.discount_type === 'Discount Amount') {
                item.discount_amount += offer.discount_amount;
              }
              item.posa_offer_applied = 1;
              this$1.calc_item_price(item);
            }
          }
        });
      },

      RemoveOnPrice: function RemoveOnPrice(offer) {
        var this$1 = this;

        this.items.forEach(function (item) {
          var item_offers = JSON.parse(item.posa_offers);
          if (item_offers.includes(offer.row_id)) {
            var originalOffer = this$1.posOffers.find(
              function (el) { return el.name == offer.offer_name; }
            );
            if (originalOffer) {
              if (originalOffer.discount_type === 'Rate') {
                item.rate = item.price_list_rate;
              } else if (originalOffer.discount_type === 'Discount Percentage') {
                item.discount_percentage -= offer.discount_percentage;
                if (!item.discount_percentage) {
                  item.discount_percentage = 0;
                  item.discount_amount = 0;
                  item.rate = item.price_list_rate;
                }
              } else if (originalOffer.discount_type === 'Discount Amount') {
                item.discount_amount -= offer.discount_amount;
              }
              this$1.calc_item_price(item);
            }
          }
        });
      },

      ApplyOnTotal: function ApplyOnTotal(offer) {
        if (!offer.name) {
          offer = this.posOffers.find(function (el) { return el.name == offer.offer_name; });
        }
        if (
          (!this.discount_percentage_offer_name ||
            this.discount_percentage_offer_name == offer.name) &&
          offer.discount_percentage > 0 &&
          offer.discount_percentage <= 100
        ) {
          this.discount_amount = (
            (flt(this.Total) * flt(offer.discount_percentage)) /
            100
          ).toFixed(2);
          this.discount_percentage_offer_name = offer.name;
        }
      },

      RemoveOnTotal: function RemoveOnTotal(offer) {
        if (
          this.discount_percentage_offer_name &&
          this.discount_percentage_offer_name == offer.offer_name
        ) {
          this.discount_amount = 0;
          this.discount_percentage_offer_name = null;
        }
      },

      addOfferToItems: function addOfferToItems(offer) {
        var this$1 = this;

        var offer_items = JSON.parse(offer.items);
        offer_items.forEach(function (el) {
          this$1.items.forEach(function (exist_item) {
            if (exist_item.posa_row_id == el) {
              var item_offers = JSON.parse(exist_item.posa_offers);
              if (!item_offers.includes(offer.row_id)) {
                item_offers.push(offer.row_id);
                if (offer.offer === 'Item Price') {
                  exist_item.posa_offer_applied = 1;
                }
              }
              exist_item.posa_offers = JSON.stringify(item_offers);
            }
          });
        });
      },

      deleteOfferFromItems: function deleteOfferFromItems(offer) {
        var this$1 = this;

        var offer_items = JSON.parse(offer.items);
        offer_items.forEach(function (el) {
          this$1.items.forEach(function (exist_item) {
            if (exist_item.posa_row_id == el) {
              var item_offers = JSON.parse(exist_item.posa_offers);
              var updated_item_offers = item_offers.filter(
                function (row_id) { return row_id != offer.row_id; }
              );
              if (offer.offer === 'Item Price') {
                exist_item.posa_offer_applied = 0;
              }
              exist_item.posa_offers = JSON.stringify(updated_item_offers);
            }
          });
        });
      },

      validate_due_date: function validate_due_date(item) {
        var today = frappe.datetime.now_date();
        var parse_today = Date.parse(today);
        var new_date = Date.parse(item.posa_delivery_date);
        if (new_date < parse_today) {
          setTimeout(function () {
            item.posa_delivery_date = today;
          }, 0);
        }
      },
    },

    created: function created() {
      var this$1 = this;

      evntBus.$on('register_pos_profile', function (data) {
        this$1.pos_profile = data.pos_profile;
        this$1.customer = data.pos_profile.customer;
        this$1.pos_opening_shift = data.pos_opening_shift;
        this$1.stock_settings = data.stock_settings;
      });
      evntBus.$on('add_item', function (item) {
        this$1.add_item(item);
      });
      evntBus.$on('update_customer', function (customer) {
        this$1.customer = customer;
      });
      evntBus.$on('new_invoice', function () {
        this$1.invoice_doc = '';
        this$1.cancel_invoice();
      });
      evntBus.$on('load_invoice', function (data) {
        this$1.new_invoice(data);
        evntBus.$emit('set_pos_coupons', data.posa_coupons);
      });
      evntBus.$on('set_offers', function (data) {
        this$1.posOffers = data;
      });
      evntBus.$on('update_invoice_offers', function (data) {
        this$1.updateInvoiceOffers(data);
      });
      evntBus.$on('update_invoice_coupons', function (data) {
        this$1.posa_coupons = data;
        this$1.handelOffers();
      });
      evntBus.$on('set_all_items', function (data) {
        this$1.allItems = data;
        this$1.items.forEach(function (item) {
          this$1.update_item_detail(item);
        });
      });
      evntBus.$on('load_return_invoice', function (data) {
        this$1.new_invoice(data.invoice_doc);
        this$1.discount_amount = -data.return_doc.discount_amount;
        this$1.additional_discount_percentage =
          -data.return_doc.additional_discount_percentage;
        this$1.return_doc = data.return_doc;
      });
      document.addEventListener('keydown', this.shortOpenPayment.bind(this));
      document.addEventListener('keydown', this.shortDeleteFirstItem.bind(this));
      document.addEventListener('keydown', this.shortOpenFirstItem.bind(this));
      document.addEventListener('keydown', this.shortSelectDiscount.bind(this));
    },
    destroyed: function destroyed() {
      document.removeEventListener('keydown', this.shortOpenPayment);
      document.removeEventListener('keydown', this.shortDeleteFirstItem);
      document.removeEventListener('keydown', this.shortOpenFirstItem);
      document.removeEventListener('keydown', this.shortSelectDiscount);
    },
    watch: {
      customer: function customer() {
        this.close_payments();
        evntBus.$emit('set_customer', this.customer);
        this.fetch_customer_details();
      },
      customer_info: function customer_info() {
        evntBus.$emit('set_customer_info_to_edit', this.customer_info);
      },
      expanded: function expanded(data_value) {
        this.update_items_details(data_value);
        if (data_value.length > 0) {
          this.update_item_detail(data_value[0]);
        }
      },
      discount_percentage_offer_name: function discount_percentage_offer_name() {
        evntBus.$emit('update_discount_percentage_offer_name', {
          value: this.discount_percentage_offer_name,
        });
      },
      items: {
        deep: true,
        handler: function handler(items) {
          this.handelOffers();
          this.$forceUpdate();
        },
      },
      invoiceType: function invoiceType() {
        evntBus.$emit('update_invoice_type', this.invoiceType);
      },
      discount_amount: function discount_amount() {
        if (!this.discount_amount || this.discount_amount == 0) {
          this.additional_discount_percentage = 0;
        } else if (this.pos_profile.posa_use_percentage_discount) {
          this.additional_discount_percentage =
            (this.discount_amount / this.Total) * 100;
        } else {
          this.additional_discount_percentage = 0;
        }
      },
    },
  };

  /* script */
              var __vue_script__$3 = script$3;
              
  /* template */
  var __vue_render__$3 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      [
        _c(
          "v-dialog",
          {
            attrs: { "max-width": "330" },
            model: {
              value: _vm.cancel_dialog,
              callback: function($$v) {
                _vm.cancel_dialog = $$v;
              },
              expression: "cancel_dialog"
            }
          },
          [
            _c(
              "v-card",
              [
                _c("v-card-title", { staticClass: "text-h5" }, [
                  _vm._v(
                    "\n        " +
                      _vm._s(_vm.__("Cancel Current Invoice ?")) +
                      "\n      "
                  )
                ]),
                _vm._v(" "),
                _c(
                  "v-card-actions",
                  [
                    _c("v-spacer"),
                    _vm._v(" "),
                    _c(
                      "v-btn",
                      {
                        attrs: { color: "error" },
                        on: { click: _vm.cancel_invoice }
                      },
                      [
                        _vm._v(
                          "\n          " + _vm._s(_vm.__("Cancel")) + "\n        "
                        )
                      ]
                    ),
                    _vm._v(" "),
                    _c(
                      "v-btn",
                      {
                        attrs: { color: "primary" },
                        on: {
                          click: function($event) {
                            _vm.cancel_dialog = false;
                          }
                        }
                      },
                      [
                        _vm._v(
                          "\n          " + _vm._s(_vm.__("Back")) + "\n        "
                        )
                      ]
                    )
                  ],
                  1
                )
              ],
              1
            )
          ],
          1
        ),
        _vm._v(" "),
        _c(
          "v-card",
          {
            staticClass: "cards my-0 py-0 grey lighten-5",
            staticStyle: { "max-height": "70vh", height: "70vh" }
          },
          [
            _c(
              "v-row",
              { staticClass: "items px-2 py-1", attrs: { align: "center" } },
              [
                _vm.pos_profile.posa_allow_sales_order
                  ? _c(
                      "v-col",
                      { staticClass: "pb-0 mb-2 pr-0", attrs: { cols: "9" } },
                      [_c("Customer")],
                      1
                    )
                  : _vm._e(),
                _vm._v(" "),
                !_vm.pos_profile.posa_allow_sales_order
                  ? _c(
                      "v-col",
                      { staticClass: "pb-0 mb-2", attrs: { cols: "12" } },
                      [_c("Customer")],
                      1
                    )
                  : _vm._e(),
                _vm._v(" "),
                _vm.pos_profile.posa_allow_sales_order
                  ? _c(
                      "v-col",
                      { staticClass: "pb-0 mb-2", attrs: { cols: "3" } },
                      [
                        _c("v-select", {
                          attrs: {
                            dense: "",
                            "hide-details": "",
                            outlined: "",
                            color: "indigo",
                            "background-color": "white",
                            items: _vm.invoiceTypes,
                            label: _vm.frappe._("Type"),
                            disabled: _vm.invoiceType == "Return"
                          },
                          model: {
                            value: _vm.invoiceType,
                            callback: function($$v) {
                              _vm.invoiceType = $$v;
                            },
                            expression: "invoiceType"
                          }
                        })
                      ],
                      1
                    )
                  : _vm._e()
              ],
              1
            ),
            _vm._v(" "),
            _c(
              "div",
              {
                staticClass: "my-0 py-0 overflow-y-auto",
                staticStyle: { "max-height": "60vh" }
              },
              [
                [
                  _c("v-data-table", {
                    staticClass: "elevation-1",
                    attrs: {
                      headers: _vm.items_headers,
                      items: _vm.items,
                      "single-expand": _vm.singleExpand,
                      expanded: _vm.expanded,
                      "show-expand": "",
                      "item-key": "posa_row_id",
                      "items-per-page": _vm.itemsPerPage,
                      "hide-default-footer": ""
                    },
                    on: {
                      "update:expanded": function($event) {
                        _vm.expanded = $event;
                      }
                    },
                    scopedSlots: _vm._u([
                      {
                        key: "item.qty",
                        fn: function(ref) {
                          var item = ref.item;
                          return [_vm._v(_vm._s(_vm.formtCurrency(item.qty)))]
                        }
                      },
                      {
                        key: "item.rate",
                        fn: function(ref) {
                          var item = ref.item;
                          return [_vm._v(_vm._s(_vm.formtCurrency(item.rate)))]
                        }
                      },
                      {
                        key: "item.amount",
                        fn: function(ref) {
                          var item = ref.item;
                          return [
                            _vm._v(
                              _vm._s(_vm.formtCurrency(item.qty * item.rate))
                            )
                          ]
                        }
                      },
                      {
                        key: "item.posa_is_offer",
                        fn: function(ref) {
                          var item = ref.item;
                          return [
                            _c("v-simple-checkbox", {
                              attrs: {
                                value:
                                  !!item.posa_is_offer || !!item.posa_is_replace,
                                disabled: ""
                              }
                            })
                          ]
                        }
                      },
                      {
                        key: "expanded-item",
                        fn: function(ref) {
                          var headers = ref.headers;
                          var item = ref.item;
                          return [
                            _c(
                              "td",
                              {
                                staticClass: "ma-0 pa-0",
                                attrs: { colspan: headers.length }
                              },
                              [
                                _c(
                                  "v-row",
                                  { staticClass: "ma-0 pa-0" },
                                  [
                                    _c(
                                      "v-col",
                                      { attrs: { cols: "1" } },
                                      [
                                        _c(
                                          "v-btn",
                                          {
                                            attrs: {
                                              disabled:
                                                !!item.posa_is_offer ||
                                                !!item.posa_is_replace,
                                              icon: "",
                                              color: "red"
                                            },
                                            on: {
                                              click: function($event) {
                                                $event.stopPropagation();
                                                return _vm.remove_item(item)
                                              }
                                            }
                                          },
                                          [_c("v-icon", [_vm._v("mdi-delete")])],
                                          1
                                        )
                                      ],
                                      1
                                    ),
                                    _vm._v(" "),
                                    _c("v-spacer"),
                                    _vm._v(" "),
                                    _c(
                                      "v-col",
                                      { attrs: { cols: "1" } },
                                      [
                                        _c(
                                          "v-btn",
                                          {
                                            attrs: {
                                              disabled:
                                                !!item.posa_is_offer ||
                                                !!item.posa_is_replace,
                                              icon: "",
                                              color: "indigo lighten-1"
                                            },
                                            on: {
                                              click: function($event) {
                                                $event.stopPropagation();
                                                return _vm.subtract_one(item)
                                              }
                                            }
                                          },
                                          [
                                            _c("v-icon", [
                                              _vm._v("mdi-minus-circle-outline")
                                            ])
                                          ],
                                          1
                                        )
                                      ],
                                      1
                                    ),
                                    _vm._v(" "),
                                    _c(
                                      "v-col",
                                      { attrs: { cols: "1" } },
                                      [
                                        _c(
                                          "v-btn",
                                          {
                                            attrs: {
                                              disabled:
                                                !!item.posa_is_offer ||
                                                !!item.posa_is_replace,
                                              icon: "",
                                              color: "indigo lighten-1"
                                            },
                                            on: {
                                              click: function($event) {
                                                $event.stopPropagation();
                                                return _vm.add_one(item)
                                              }
                                            }
                                          },
                                          [
                                            _c("v-icon", [
                                              _vm._v("mdi-plus-circle-outline")
                                            ])
                                          ],
                                          1
                                        )
                                      ],
                                      1
                                    )
                                  ],
                                  1
                                ),
                                _vm._v(" "),
                                _c(
                                  "v-row",
                                  { staticClass: "ma-0 pa-0" },
                                  [
                                    _c(
                                      "v-col",
                                      { attrs: { cols: "4" } },
                                      [
                                        _c("v-text-field", {
                                          attrs: {
                                            dense: "",
                                            outlined: "",
                                            color: "indigo",
                                            label: _vm.frappe._("Item Code"),
                                            "background-color": "white",
                                            "hide-details": "",
                                            disabled: ""
                                          },
                                          model: {
                                            value: item.item_code,
                                            callback: function($$v) {
                                              _vm.$set(item, "item_code", $$v);
                                            },
                                            expression: "item.item_code"
                                          }
                                        })
                                      ],
                                      1
                                    ),
                                    _vm._v(" "),
                                    _c(
                                      "v-col",
                                      { attrs: { cols: "4" } },
                                      [
                                        _c("v-text-field", {
                                          attrs: {
                                            dense: "",
                                            outlined: "",
                                            color: "indigo",
                                            label: _vm.frappe._("QTY"),
                                            "background-color": "white",
                                            "hide-details": "",
                                            type: "number",
                                            disabled:
                                              !!item.posa_is_offer ||
                                              !!item.posa_is_replace
                                          },
                                          on: {
                                            change: function($event) {
                                              return _vm.calc_sotck_gty(
                                                item,
                                                $event
                                              )
                                            }
                                          },
                                          model: {
                                            value: item.qty,
                                            callback: function($$v) {
                                              _vm.$set(item, "qty", _vm._n($$v));
                                            },
                                            expression: "item.qty"
                                          }
                                        })
                                      ],
                                      1
                                    ),
                                    _vm._v(" "),
                                    _c(
                                      "v-col",
                                      { attrs: { cols: "4" } },
                                      [
                                        _c("v-select", {
                                          attrs: {
                                            dense: "",
                                            "background-color": "white",
                                            label: _vm.frappe._("UOM"),
                                            items: item.item_uoms,
                                            outlined: "",
                                            "item-text": "uom",
                                            "item-value": "uom",
                                            "hide-details": "",
                                            disabled:
                                              !!_vm.invoice_doc.is_return ||
                                              !!item.posa_is_offer ||
                                              !!item.posa_is_replace
                                          },
                                          on: {
                                            change: function($event) {
                                              return _vm.calc_uom(item, $event)
                                            }
                                          },
                                          model: {
                                            value: item.uom,
                                            callback: function($$v) {
                                              _vm.$set(item, "uom", $$v);
                                            },
                                            expression: "item.uom"
                                          }
                                        })
                                      ],
                                      1
                                    ),
                                    _vm._v(" "),
                                    _c(
                                      "v-col",
                                      { attrs: { cols: "4" } },
                                      [
                                        _c("v-text-field", {
                                          attrs: {
                                            dense: "",
                                            outlined: "",
                                            color: "indigo",
                                            label: _vm.frappe._("Rate"),
                                            "background-color": "white",
                                            "hide-details": "",
                                            type: "number",
                                            prefix: _vm.invoice_doc.currency,
                                            id: "rate",
                                            disabled:
                                              !!item.posa_is_offer ||
                                              !!item.posa_is_replace ||
                                              !!item.posa_offer_applied ||
                                              !_vm.pos_profile
                                                .posa_allow_user_to_edit_rate ||
                                              !!_vm.invoice_doc.is_return
                                                ? true
                                                : false
                                          },
                                          on: {
                                            change: function($event) {
                                              return _vm.calc_prices(item, $event)
                                            }
                                          },
                                          model: {
                                            value: item.rate,
                                            callback: function($$v) {
                                              _vm.$set(item, "rate", _vm._n($$v));
                                            },
                                            expression: "item.rate"
                                          }
                                        })
                                      ],
                                      1
                                    ),
                                    _vm._v(" "),
                                    _c(
                                      "v-col",
                                      { attrs: { cols: "4" } },
                                      [
                                        _c("v-text-field", {
                                          attrs: {
                                            dense: "",
                                            outlined: "",
                                            color: "indigo",
                                            label: _vm.frappe._(
                                              "Discount Percentage"
                                            ),
                                            "background-color": "white",
                                            "hide-details": "",
                                            type: "number",
                                            id: "discount_percentage",
                                            disabled:
                                              !!item.posa_is_offer ||
                                              !!item.posa_is_replace ||
                                              item.posa_offer_applied ||
                                              !_vm.pos_profile
                                                .posa_allow_user_to_edit_item_discount ||
                                              !!_vm.invoice_doc.is_return
                                                ? true
                                                : false
                                          },
                                          on: {
                                            change: function($event) {
                                              return _vm.calc_prices(item, $event)
                                            }
                                          },
                                          model: {
                                            value: item.discount_percentage,
                                            callback: function($$v) {
                                              _vm.$set(
                                                item,
                                                "discount_percentage",
                                                _vm._n($$v)
                                              );
                                            },
                                            expression: "item.discount_percentage"
                                          }
                                        })
                                      ],
                                      1
                                    ),
                                    _vm._v(" "),
                                    _c(
                                      "v-col",
                                      { attrs: { cols: "4" } },
                                      [
                                        _c("v-text-field", {
                                          attrs: {
                                            dense: "",
                                            outlined: "",
                                            color: "indigo",
                                            label: _vm.frappe._(
                                              "Discount Amount"
                                            ),
                                            "background-color": "white",
                                            "hide-details": "",
                                            type: "number",
                                            prefix: _vm.invoice_doc.currency,
                                            id: "discount_amount",
                                            disabled:
                                              !!item.posa_is_offer ||
                                              !!item.posa_is_replace ||
                                              !!item.posa_offer_applied ||
                                              !_vm.pos_profile
                                                .posa_allow_user_to_edit_item_discount ||
                                              !!_vm.invoice_doc.is_return
                                                ? true
                                                : false
                                          },
                                          on: {
                                            change: function($event) {
                                              return _vm.calc_prices(item, $event)
                                            }
                                          },
                                          model: {
                                            value: item.discount_amount,
                                            callback: function($$v) {
                                              _vm.$set(
                                                item,
                                                "discount_amount",
                                                _vm._n($$v)
                                              );
                                            },
                                            expression: "item.discount_amount"
                                          }
                                        })
                                      ],
                                      1
                                    ),
                                    _vm._v(" "),
                                    _c(
                                      "v-col",
                                      { attrs: { cols: "4" } },
                                      [
                                        _c("v-text-field", {
                                          attrs: {
                                            dense: "",
                                            outlined: "",
                                            color: "indigo",
                                            label: _vm.frappe._(
                                              "Price list Rate"
                                            ),
                                            "background-color": "white",
                                            "hide-details": "",
                                            type: "number",
                                            disabled: "",
                                            prefix: _vm.invoice_doc.currency
                                          },
                                          model: {
                                            value: item.price_list_rate,
                                            callback: function($$v) {
                                              _vm.$set(
                                                item,
                                                "price_list_rate",
                                                $$v
                                              );
                                            },
                                            expression: "item.price_list_rate"
                                          }
                                        })
                                      ],
                                      1
                                    ),
                                    _vm._v(" "),
                                    _c(
                                      "v-col",
                                      { attrs: { cols: "4" } },
                                      [
                                        _c("v-text-field", {
                                          attrs: {
                                            dense: "",
                                            outlined: "",
                                            color: "indigo",
                                            label: _vm.frappe._("Available QTY"),
                                            "background-color": "white",
                                            "hide-details": "",
                                            type: "number",
                                            disabled: ""
                                          },
                                          model: {
                                            value: item.actual_qty,
                                            callback: function($$v) {
                                              _vm.$set(item, "actual_qty", $$v);
                                            },
                                            expression: "item.actual_qty"
                                          }
                                        })
                                      ],
                                      1
                                    ),
                                    _vm._v(" "),
                                    _c(
                                      "v-col",
                                      { attrs: { cols: "4" } },
                                      [
                                        _c("v-text-field", {
                                          attrs: {
                                            dense: "",
                                            outlined: "",
                                            color: "indigo",
                                            label: _vm.frappe._("Group"),
                                            "background-color": "white",
                                            "hide-details": "",
                                            disabled: ""
                                          },
                                          model: {
                                            value: item.item_group,
                                            callback: function($$v) {
                                              _vm.$set(item, "item_group", $$v);
                                            },
                                            expression: "item.item_group"
                                          }
                                        })
                                      ],
                                      1
                                    ),
                                    _vm._v(" "),
                                    _c(
                                      "v-col",
                                      { attrs: { cols: "4" } },
                                      [
                                        _c("v-text-field", {
                                          attrs: {
                                            dense: "",
                                            outlined: "",
                                            color: "indigo",
                                            label: _vm.frappe._("Stock QTY"),
                                            "background-color": "white",
                                            "hide-details": "",
                                            type: "number",
                                            disabled: ""
                                          },
                                          model: {
                                            value: item.stock_qty,
                                            callback: function($$v) {
                                              _vm.$set(item, "stock_qty", $$v);
                                            },
                                            expression: "item.stock_qty"
                                          }
                                        })
                                      ],
                                      1
                                    ),
                                    _vm._v(" "),
                                    _c(
                                      "v-col",
                                      { attrs: { cols: "4" } },
                                      [
                                        _c("v-text-field", {
                                          attrs: {
                                            dense: "",
                                            outlined: "",
                                            color: "indigo",
                                            label: _vm.frappe._("Stock UOM"),
                                            "background-color": "white",
                                            "hide-details": "",
                                            disabled: ""
                                          },
                                          model: {
                                            value: item.stock_uom,
                                            callback: function($$v) {
                                              _vm.$set(item, "stock_uom", $$v);
                                            },
                                            expression: "item.stock_uom"
                                          }
                                        })
                                      ],
                                      1
                                    ),

                                    _vm._v(" "),
                                    _c(
                                      "v-col",
                                      { attrs: { cols: "4" } },
                                      [
                                        _c("v-text-field", {
                                          attrs: {
                                            dense: "",
                                            outlined: "",
                                            color: "indigo",
                                            label: _vm.frappe._("Warehouse"),
                                            "background-color": "white",
                                            "hide-details": "",
                                            disabled: ""
                                          },
                                          model: {
                                            value: item.warehouse,
                                            callback: function($$v) {
                                              _vm.$set(item, "warehouse", $$v);
                                            },
                                            expression: "item.warehouse"
                                          }
                                        })
                                      ],
                                      1
                                    ),

                                    _vm._v(" "),
                                    item.posa_offer_applied
                                      ? _c(
                                          "v-col",
                                          {
                                            attrs: { align: "center", cols: "4" }
                                          },
                                          [
                                            _c("v-checkbox", {
                                              staticClass: "shrink mr-2 mt-0",
                                              attrs: {
                                                dense: "",
                                                label: _vm.frappe._(
                                                  "Offer Applied"
                                                ),
                                                readonly: "",
                                                "hide-details": ""
                                              },
                                              model: {
                                                value: item.posa_offer_applied,
                                                callback: function($$v) {
                                                  _vm.$set(
                                                    item,
                                                    "posa_offer_applied",
                                                    $$v
                                                  );
                                                },
                                                expression:
                                                  "item.posa_offer_applied"
                                              }
                                            })
                                          ],
                                          1
                                        )
                                      : _vm._e(),
                                    _vm._v(" "),
                                    item.has_serial_no == 1 || item.serial_no
                                      ? _c(
                                          "v-col",
                                          { attrs: { cols: "4" } },
                                          [
                                            _c("v-text-field", {
                                              attrs: {
                                                dense: "",
                                                outlined: "",
                                                color: "indigo",
                                                label: _vm.frappe._(
                                                  "Serial No QTY"
                                                ),
                                                "background-color": "white",
                                                "hide-details": "",
                                                type: "number",
                                                disabled: ""
                                              },
                                              model: {
                                                value:
                                                  item.serial_no_selected_count,
                                                callback: function($$v) {
                                                  _vm.$set(
                                                    item,
                                                    "serial_no_selected_count",
                                                    $$v
                                                  );
                                                },
                                                expression:
                                                  "item.serial_no_selected_count"
                                              }
                                            })
                                          ],
                                          1
                                        )
                                      : _vm._e(),
                                    _vm._v(" "),
                                    item.has_serial_no == 1 || item.serial_no
                                      ? _c(
                                          "v-col",
                                          { attrs: { cols: "12" } },
                                          [
                                            _c("v-autocomplete", {
                                              attrs: {
                                                items: item.serial_no_data,
                                                "item-text": "serial_no",
                                                outlined: "",
                                                dense: "",
                                                chips: "",
                                                color: "indigo",
                                                "small-chips": "",
                                                label: _vm.frappe._("Serial No"),
                                                multiple: ""
                                              },
                                              on: {
                                                change: function($event) {
                                                  return _vm.set_serial_no(item)
                                                }
                                              },
                                              model: {
                                                value: item.serial_no_selected,
                                                callback: function($$v) {
                                                  _vm.$set(
                                                    item,
                                                    "serial_no_selected",
                                                    $$v
                                                  );
                                                },
                                                expression:
                                                  "item.serial_no_selected"
                                              }
                                            })
                                          ],
                                          1
                                        )
                                      : _vm._e(),
                                    _vm._v(" "),
                                    item.has_batch_no == 1 || item.batch_no
                                      ? _c(
                                          "v-col",
                                          { attrs: { cols: "4" } },
                                          [
                                            _c("v-text-field", {
                                              attrs: {
                                                dense: "",
                                                outlined: "",
                                                color: "indigo",
                                                label: _vm.frappe._(
                                                  "Batch No Available QTY"
                                                ),
                                                "background-color": "white",
                                                "hide-details": "",
                                                type: "number",
                                                disabled: ""
                                              },
                                              model: {
                                                value: item.actual_batch_qty,
                                                callback: function($$v) {
                                                  _vm.$set(
                                                    item,
                                                    "actual_batch_qty",
                                                    $$v
                                                  );
                                                },
                                                expression:
                                                  "item.actual_batch_qty"
                                              }
                                            })
                                          ],
                                          1
                                        )
                                      : _vm._e(),
                                    _vm._v(" "),
                                    item.has_batch_no == 1 || item.batch_no
                                      ? _c(
                                          "v-col",
                                          { attrs: { cols: "4" } },
                                          [
                                            _c("v-text-field", {
                                              attrs: {
                                                dense: "",
                                                outlined: "",
                                                color: "indigo",
                                                label: _vm.frappe._(
                                                  "Batch No Expiry Date"
                                                ),
                                                "background-color": "white",
                                                "hide-details": "",
                                                disabled: ""
                                              },
                                              model: {
                                                value: item.batch_no_expiry_date,
                                                callback: function($$v) {
                                                  _vm.$set(
                                                    item,
                                                    "batch_no_expiry_date",
                                                    $$v
                                                  );
                                                },
                                                expression:
                                                  "item.batch_no_expiry_date"
                                              }
                                            })
                                          ],
                                          1
                                        )
                                      : _vm._e(),
                                    _vm._v(" "),
                                    item.has_batch_no == 1 || item.batch_no
                                      ? _c(
                                          "v-col",
                                          { attrs: { cols: "8" } },
                                          [
                                            _c("v-autocomplete", {
                                              attrs: {
                                                items: item.batch_no_data,
                                                "item-text": "batch_no",
                                                outlined: "",
                                                dense: "",
                                                color: "indigo",
                                                label: _vm.frappe._("Batch No")
                                              },
                                              on: {
                                                change: function($event) {
                                                  return _vm.set_batch_qty(
                                                    item,
                                                    $event
                                                  )
                                                }
                                              },
                                              scopedSlots: _vm._u(
                                                [
                                                  {
                                                    key: "item",
                                                    fn: function(data) {
                                                      return [
                                                        [
                                                          _c(
                                                            "v-list-item-content",
                                                            [
                                                              _c(
                                                                "v-list-item-title",
                                                                {
                                                                  domProps: {
                                                                    innerHTML: _vm._s(
                                                                      data.item
                                                                        .batch_no
                                                                    )
                                                                  }
                                                                }
                                                              ),
                                                              _vm._v(" "),
                                                              _c(
                                                                "v-list-item-subtitle",
                                                                {
                                                                  domProps: {
                                                                    innerHTML: _vm._s(
                                                                      "Available QTY  '" +
                                                                        data.item
                                                                          .batch_qty +
                                                                        "' - Expiry Date " +
                                                                        data.item
                                                                          .expiry_date
                                                                    )
                                                                  }
                                                                }
                                                              )
                                                            ],
                                                            1
                                                          )
                                                        ]
                                                      ]
                                                    }
                                                  }
                                                ],
                                                null,
                                                true
                                              ),
                                              model: {
                                                value: item.batch_no,
                                                callback: function($$v) {
                                                  _vm.$set(item, "batch_no", $$v);
                                                },
                                                expression: "item.batch_no"
                                              }
                                            })
                                          ],
                                          1
                                        )
                                      : _vm._e(),
                                    _vm._v(" "),
                                    _vm.pos_profile.posa_allow_sales_order &&
                                    _vm.invoiceType == "Order"
                                      ? _c(
                                          "v-col",
                                          { attrs: { cols: "4" } },
                                          [
                                            _c(
                                              "v-menu",
                                              {
                                                ref: "item_delivery_date",
                                                attrs: {
                                                  "close-on-content-click": false,
                                                  "return-value":
                                                    item.posa_delivery_date,
                                                  transition: "scale-transition",
                                                  dense: ""
                                                },
                                                on: {
                                                  "update:returnValue": function(
                                                    $event
                                                  ) {
                                                    return _vm.$set(
                                                      item,
                                                      "posa_delivery_date",
                                                      $event
                                                    )
                                                  },
                                                  "update:return-value": function(
                                                    $event
                                                  ) {
                                                    return _vm.$set(
                                                      item,
                                                      "posa_delivery_date",
                                                      $event
                                                    )
                                                  }
                                                },
                                                scopedSlots: _vm._u(
                                                  [
                                                    {
                                                      key: "activator",
                                                      fn: function(ref) {
                                                        var on = ref.on;
                                                        var attrs = ref.attrs;
                                                        return [
                                                          _c(
                                                            "v-text-field",
                                                            _vm._g(
                                                              _vm._b(
                                                                {
                                                                  attrs: {
                                                                    label: _vm.frappe._(
                                                                      "Delivery Date"
                                                                    ),
                                                                    readonly: "",
                                                                    outlined: "",
                                                                    dense: "",
                                                                    clearable: "",
                                                                    color:
                                                                      "indigo",
                                                                    "hide-details":
                                                                      ""
                                                                  },
                                                                  model: {
                                                                    value:
                                                                      item.posa_delivery_date,
                                                                    callback: function(
                                                                      $$v
                                                                    ) {
                                                                      _vm.$set(
                                                                        item,
                                                                        "posa_delivery_date",
                                                                        $$v
                                                                      );
                                                                    },
                                                                    expression:
                                                                      "item.posa_delivery_date"
                                                                  }
                                                                },
                                                                "v-text-field",
                                                                attrs,
                                                                false
                                                              ),
                                                              on
                                                            )
                                                          )
                                                        ]
                                                      }
                                                    }
                                                  ],
                                                  null,
                                                  true
                                                ),
                                                model: {
                                                  value: item.item_delivery_date,
                                                  callback: function($$v) {
                                                    _vm.$set(
                                                      item,
                                                      "item_delivery_date",
                                                      $$v
                                                    );
                                                  },
                                                  expression:
                                                    "item.item_delivery_date"
                                                }
                                              },
                                              [
                                                _vm._v(" "),
                                                _c(
                                                  "v-date-picker",
                                                  {
                                                    attrs: {
                                                      "no-title": "",
                                                      scrollable: "",
                                                      color: "indigo",
                                                      min: _vm.frappe.datetime.now_date()
                                                    },
                                                    model: {
                                                      value:
                                                        item.posa_delivery_date,
                                                      callback: function($$v) {
                                                        _vm.$set(
                                                          item,
                                                          "posa_delivery_date",
                                                          $$v
                                                        );
                                                      },
                                                      expression:
                                                        "item.posa_delivery_date"
                                                    }
                                                  },
                                                  [
                                                    _c("v-spacer"),
                                                    _vm._v(" "),
                                                    _c(
                                                      "v-btn",
                                                      {
                                                        attrs: {
                                                          text: "",
                                                          color: "primary"
                                                        },
                                                        on: {
                                                          click: function(
                                                            $event
                                                          ) {
                                                            item.item_delivery_date = false;
                                                          }
                                                        }
                                                      },
                                                      [
                                                        _vm._v(
                                                          "\n                        Cancel\n                      "
                                                        )
                                                      ]
                                                    ),
                                                    _vm._v(" "),
                                                    _c(
                                                      "v-btn",
                                                      {
                                                        attrs: {
                                                          text: "",
                                                          color: "primary"
                                                        },
                                                        on: {
                                                          click: function(
                                                            $event
                                                          ) {
  [
                                                              _vm.$refs.item_delivery_date.save(
                                                                item.posa_delivery_date
                                                              ),
                                                              _vm.validate_due_date(
                                                                item
                                                              )
                                                            ];
                                                          }
                                                        }
                                                      },
                                                      [
                                                        _vm._v(
                                                          "\n                        OK\n                      "
                                                        )
                                                      ]
                                                    )
                                                  ],
                                                  1
                                                )
                                              ],
                                              1
                                            )
                                          ],
                                          1
                                        )
                                      : _vm._e(),
                                    _vm._v(" "),
                                    _vm.pos_profile.posa_display_additional_notes
                                      ? _c(
                                          "v-col",
                                          { attrs: { cols: "8" } },
                                          [
                                            _c("v-textarea", {
                                              staticClass: "pa-0",
                                              attrs: {
                                                outlined: "",
                                                dense: "",
                                                clearable: "",
                                                color: "indigo",
                                                "auto-grow": "",
                                                rows: "1",
                                                label: _vm.frappe._(
                                                  "Additional Notes"
                                                ),
                                                value: item.posa_notes
                                              },
                                              model: {
                                                value: item.posa_notes,
                                                callback: function($$v) {
                                                  _vm.$set(
                                                    item,
                                                    "posa_notes",
                                                    $$v
                                                  );
                                                },
                                                expression: "item.posa_notes"
                                              }
                                            })
                                          ],
                                          1
                                        )
                                      : _vm._e()
                                  ],
                                  1
                                )
                              ],
                              1
                            )
                          ]
                        }
                      }
                    ])
                  })
                ]
              ],
              2
            )
          ],
          1
        ),
        _vm._v(" "),
        _c(
          "v-card",
          { staticClass: "cards mb-0 mt-3 py-0 grey lighten-5" },
          [
            _c(
              "v-row",
              { attrs: { "no-gutters": "" } },
              [
                _c(
                  "v-col",
                  { attrs: { cols: "7" } },
                  [
                    _c(
                      "v-row",
                      {
                        staticClass: "pa-1 pt-9 pr-1",
                        attrs: { "no-gutters": "" }
                      },
                      [
                        _c(
                          "v-col",
                          { staticClass: "pa-1", attrs: { cols: "6" } },
                          [
                            _c("v-text-field", {
                              attrs: {
                                value: _vm.formtCurrency(_vm.total_qty),
                                label: _vm.frappe._("Total Qty"),
                                outlined: "",
                                dense: "",
                                readonly: "",
                                "hide-details": ""
                              }
                            })
                          ],
                          1
                        ),
                        _vm._v(" "),
                        !_vm.pos_profile.posa_use_percentage_discount
                          ? _c(
                              "v-col",
                              { staticClass: "pa-1", attrs: { cols: "6" } },
                              [
                                _c("v-text-field", {
                                  ref: "discount",
                                  attrs: {
                                    label: _vm.frappe._("Additional Discount"),
                                    outlined: "",
                                    dense: "",
                                    "hide-details": "",
                                    type: "number",
                                    prefix: _vm.pos_profile.currency,
                                    disabled:
                                      !_vm.pos_profile
                                        .posa_allow_user_to_edit_additional_discount ||
                                      _vm.discount_percentage_offer_name
                                        ? true
                                        : false
                                  },
                                  model: {
                                    value: _vm.discount_amount,
                                    callback: function($$v) {
                                      _vm.discount_amount = $$v;
                                    },
                                    expression: "discount_amount"
                                  }
                                })
                              ],
                              1
                            )
                          : _vm._e(),
                        _vm._v(" "),
                        _vm.pos_profile.posa_use_percentage_discount
                          ? _c(
                              "v-col",
                              { staticClass: "pa-1", attrs: { cols: "6" } },
                              [
                                _c("v-text-field", {
                                  ref: "percentage_discount",
                                  attrs: {
                                    label: _vm.frappe._("Additional Discount %"),
                                    outlined: "",
                                    dense: "",
                                    "hide-details": "",
                                    type: "number",
                                    disabled:
                                      !_vm.pos_profile
                                        .posa_allow_user_to_edit_additional_discount ||
                                      _vm.discount_percentage_offer_name
                                        ? true
                                        : false
                                  },
                                  on: { change: _vm.update_discount_umount },
                                  model: {
                                    value: _vm.additional_discount_percentage,
                                    callback: function($$v) {
                                      _vm.additional_discount_percentage = $$v;
                                    },
                                    expression: "additional_discount_percentage"
                                  }
                                })
                              ],
                              1
                            )
                          : _vm._e(),
                        _vm._v(" "),
                        _c(
                          "v-col",
                          { staticClass: "pa-1 mt-2", attrs: { cols: "6" } },
                          [
                            _c("v-text-field", {
                              attrs: {
                                value: _vm.formtCurrency(
                                  _vm.total_items_discount_amount
                                ),
                                label: _vm.frappe._("Items Discounts"),
                                outlined: "",
                                dense: "",
                                readonly: "",
                                "hide-details": "",
                                prefix: _vm.pos_profile.currency
                              }
                            })
                          ],
                          1
                        ),
                        _vm._v(" "),
                        _c(
                          "v-col",
                          { staticClass: "pa-1 mt-2", attrs: { cols: "6" } },
                          [
                            _c("v-text-field", {
                              staticClass: "text--red",
                              attrs: {
                                value: _vm.formtCurrency(_vm.subtotal),
                                label: _vm.frappe._("Total"),
                                outlined: "",
                                dense: "",
                                readonly: "",
                                "hide-details": "",
                                prefix: _vm.pos_profile.currency
                              }
                            })
                          ],
                          1
                        )
                      ],
                      1
                    )
                  ],
                  1
                ),
                _vm._v(" "),
                _c(
                  "v-col",
                  { attrs: { cols: "5" } },
                  [
                    _c(
                      "v-row",
                      {
                        staticClass: "pa-1 pt-2 pl-0",
                        attrs: { "no-gutters": "" }
                      },
                      [
                        _c(
                          "v-col",
                          { staticClass: "pa-1", attrs: { cols: "6" } },
                          [
                            _c(
                              "v-btn",
                              {
                                staticClass: "pa-0",
                                attrs: { block: "", color: "warning", dark: "" },
                                on: { click: _vm.get_draft_invoices }
                              },
                              [_vm._v(_vm._s(_vm.__("Hold")))]
                            )
                          ],
                          1
                        ),
                        _vm._v(" "),
                        _c(
                          "v-col",
                          { staticClass: "pa-1", attrs: { cols: "6" } },
                          [
                            _c(
                              "v-btn",
                              {
                                staticClass: "pa-0",
                                class: {
                                  "disable-events": !_vm.pos_profile
                                    .posa_allow_return
                                },
                                attrs: { block: "", color: "info", dark: "" },
                                on: { click: _vm.open_returns }
                              },
                              [_vm._v(_vm._s(_vm.__("Return")))]
                            )
                          ],
                          1
                        ),
                        _vm._v(" "),
                        _c(
                          "v-col",
                          { staticClass: "pa-1", attrs: { cols: "6" } },
                          [
                            _c(
                              "v-btn",
                              {
                                staticClass: "pa-0",
                                attrs: { block: "", color: "error", dark: "" },
                                on: {
                                  click: function($event) {
                                    _vm.cancel_dialog = true;
                                  }
                                }
                              },
                              [_vm._v(_vm._s(_vm.__("Cancel")))]
                            )
                          ],
                          1
                        ),
                        _vm._v(" "),
                        _c(
                          "v-col",
                          { staticClass: "pa-1", attrs: { cols: "6" } },
                          [
                            _c(
                              "v-btn",
                              {
                                staticClass: "pa-0",
                                attrs: { block: "", color: "success", dark: "" },
                                on: { click: _vm.new_invoice }
                              },
                              [_vm._v(_vm._s(_vm.__("New")))]
                            )
                          ],
                          1
                        ),
                        _vm._v(" "),
                        _c(
                          "v-col",
                          { staticClass: "pa-1", attrs: { cols: "12" } },
                          [
                            _c(
                              "v-btn",
                              {
                                staticClass: "pa-0",
                                attrs: { block: "", color: "primary", dark: "" },
                                on: { click: 
                                  _vm.show_payment }
                              },
                              [_vm._v(_vm._s(_vm.__("PAY")))]
                            )
                          ],
                          1
                        )
                      ],
                      1
                    )
                  ],
                  1
                )
              ],
              1
            )
          ],
          1
        )
      ],
      1
    )
  };
  var __vue_staticRenderFns__$3 = [];
  __vue_render__$3._withStripped = true;

     /* style */
    var __vue_inject_styles__$3 = function (inject) {
      if (!inject) { return }
      inject("data-v-3f876d0a_0", { source: "\n.border_line_bottom[data-v-3f876d0a] {\n  border-bottom: 1px solid lightgray;\n}\n.disable-events[data-v-3f876d0a] {\n  pointer-events: none;\n}\n", map: {"version":3,"sources":["/home/skss/frappe-bench/apps/posawesome/posawesome/public/js/posapp/components/pos/Invoice.vue"],"names":[],"mappings":";AA0yEA;EACA,kCAAA;AACA;AACA;EACA,oBAAA;AACA","file":"Invoice.vue","sourcesContent":["<template>\n  <div>\n    <v-dialog v-model=\"cancel_dialog\" max-width=\"330\">\n      <v-card>\n        <v-card-title class=\"text-h5\">\n          {{ __('Cancel Current Invoice ?') }}\n        </v-card-title>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"error\" @click=\"cancel_invoice\">\n            {{ __('Cancel') }}\n          </v-btn>\n          <v-btn color=\"primary\" @click=\"cancel_dialog = false\">\n            {{ __('Back') }}\n          </v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n    <v-card\n      style=\"max-height: 70vh; height: 70vh\"\n      class=\"cards my-0 py-0 grey lighten-5\"\n    >\n      <v-row align=\"center\" class=\"items px-2 py-1\">\n        <v-col\n          v-if=\"pos_profile.posa_allow_sales_order\"\n          cols=\"9\"\n          class=\"pb-0 mb-2 pr-0\"\n        >\n          <Customer></Customer>\n        </v-col>\n        <v-col\n          v-if=\"!pos_profile.posa_allow_sales_order\"\n          cols=\"12\"\n          class=\"pb-0 mb-2\"\n        >\n          <Customer></Customer>\n        </v-col>\n        <v-col\n          v-if=\"pos_profile.posa_allow_sales_order\"\n          cols=\"3\"\n          class=\"pb-0 mb-2\"\n        >\n          <v-select\n            dense\n            hide-details\n            outlined\n            color=\"indigo\"\n            background-color=\"white\"\n            :items=\"invoiceTypes\"\n            :label=\"frappe._('Type')\"\n            v-model=\"invoiceType\"\n            :disabled=\"invoiceType == 'Return'\"\n          ></v-select>\n        </v-col>\n      </v-row>\n\n      <div class=\"my-0 py-0 overflow-y-auto\" style=\"max-height: 60vh\">\n        <template @mouseover=\"style = 'cursor: pointer'\">\n          <v-data-table\n            :headers=\"items_headers\"\n            :items=\"items\"\n            :single-expand=\"singleExpand\"\n            :expanded.sync=\"expanded\"\n            show-expand\n            item-key=\"posa_row_id\"\n            class=\"elevation-1\"\n            :items-per-page=\"itemsPerPage\"\n            hide-default-footer\n          >\n            <template v-slot:item.qty=\"{ item }\">{{\n              formtCurrency(item.qty)\n            }}</template>\n            <template v-slot:item.rate=\"{ item }\">{{\n              formtCurrency(item.rate)\n            }}</template>\n            <template v-slot:item.amount=\"{ item }\">{{\n              formtCurrency(item.qty * item.rate)\n            }}</template>\n            <template v-slot:item.posa_is_offer=\"{ item }\">\n              <v-simple-checkbox\n                :value=\"!!item.posa_is_offer || !!item.posa_is_replace\"\n                disabled\n              ></v-simple-checkbox>\n            </template>\n\n            <template v-slot:expanded-item=\"{ headers, item }\">\n              <td :colspan=\"headers.length\" class=\"ma-0 pa-0\">\n                <v-row class=\"ma-0 pa-0\">\n                  <v-col cols=\"1\">\n                    <v-btn\n                      :disabled=\"!!item.posa_is_offer || !!item.posa_is_replace\"\n                      icon\n                      color=\"red\"\n                      @click.stop=\"remove_item(item)\"\n                    >\n                      <v-icon>mdi-delete</v-icon>\n                    </v-btn>\n                  </v-col>\n                  <v-spacer></v-spacer>\n                  <v-col cols=\"1\">\n                    <v-btn\n                      :disabled=\"!!item.posa_is_offer || !!item.posa_is_replace\"\n                      icon\n                      color=\"indigo lighten-1\"\n                      @click.stop=\"subtract_one(item)\"\n                    >\n                      <v-icon>mdi-minus-circle-outline</v-icon>\n                    </v-btn>\n                  </v-col>\n                  <v-col cols=\"1\">\n                    <v-btn\n                      :disabled=\"!!item.posa_is_offer || !!item.posa_is_replace\"\n                      icon\n                      color=\"indigo lighten-1\"\n                      @click.stop=\"add_one(item)\"\n                    >\n                      <v-icon>mdi-plus-circle-outline</v-icon>\n                    </v-btn>\n                  </v-col>\n                </v-row>\n                <v-row class=\"ma-0 pa-0\">\n                  <v-col cols=\"4\">\n                    <v-text-field\n                      dense\n                      outlined\n                      color=\"indigo\"\n                      :label=\"frappe._('Item Code')\"\n                      background-color=\"white\"\n                      hide-details\n                      v-model=\"item.item_code\"\n                      disabled\n                    ></v-text-field>\n                  </v-col>\n                  <v-col cols=\"4\">\n                    <v-text-field\n                      dense\n                      outlined\n                      color=\"indigo\"\n                      :label=\"frappe._('QTY')\"\n                      background-color=\"white\"\n                      hide-details\n                      v-model.number=\"item.qty\"\n                      type=\"number\"\n                      @change=\"calc_sotck_gty(item, $event)\"\n                      :disabled=\"!!item.posa_is_offer || !!item.posa_is_replace\"\n                    ></v-text-field>\n                  </v-col>\n                  <v-col cols=\"4\">\n                    <v-select\n                      dense\n                      background-color=\"white\"\n                      :label=\"frappe._('UOM')\"\n                      v-model=\"item.uom\"\n                      :items=\"item.item_uoms\"\n                      outlined\n                      item-text=\"uom\"\n                      item-value=\"uom\"\n                      hide-details\n                      @change=\"calc_uom(item, $event)\"\n                      :disabled=\"\n                        !!invoice_doc.is_return ||\n                        !!item.posa_is_offer ||\n                        !!item.posa_is_replace\n                      \"\n                    >\n                    </v-select>\n                  </v-col>\n                  <v-col cols=\"4\">\n                    <v-text-field\n                      dense\n                      outlined\n                      color=\"indigo\"\n                      :label=\"frappe._('Rate')\"\n                      background-color=\"white\"\n                      hide-details\n                      v-model.number=\"item.rate\"\n                      type=\"number\"\n                      :prefix=\"invoice_doc.currency\"\n                      @change=\"calc_prices(item, $event)\"\n                      id=\"rate\"\n                      :disabled=\"\n                        !!item.posa_is_offer ||\n                        !!item.posa_is_replace ||\n                        !!item.posa_offer_applied ||\n                        !pos_profile.posa_allow_user_to_edit_rate ||\n                        !!invoice_doc.is_return\n                          ? true\n                          : false\n                      \"\n                    ></v-text-field>\n                  </v-col>\n                  <v-col cols=\"4\">\n                    <v-text-field\n                      dense\n                      outlined\n                      color=\"indigo\"\n                      :label=\"frappe._('Discount Percentage')\"\n                      background-color=\"white\"\n                      hide-details\n                      v-model.number=\"item.discount_percentage\"\n                      type=\"number\"\n                      @change=\"calc_prices(item, $event)\"\n                      id=\"discount_percentage\"\n                      :disabled=\"\n                        !!item.posa_is_offer ||\n                        !!item.posa_is_replace ||\n                        item.posa_offer_applied ||\n                        !pos_profile.posa_allow_user_to_edit_item_discount ||\n                        !!invoice_doc.is_return\n                          ? true\n                          : false\n                      \"\n                    ></v-text-field>\n                  </v-col>\n                  <v-col cols=\"4\">\n                    <v-text-field\n                      dense\n                      outlined\n                      color=\"indigo\"\n                      :label=\"frappe._('Discount Amount')\"\n                      background-color=\"white\"\n                      hide-details\n                      v-model.number=\"item.discount_amount\"\n                      type=\"number\"\n                      :prefix=\"invoice_doc.currency\"\n                      @change=\"calc_prices(item, $event)\"\n                      id=\"discount_amount\"\n                      :disabled=\"\n                        !!item.posa_is_offer ||\n                        !!item.posa_is_replace ||\n                        !!item.posa_offer_applied ||\n                        !pos_profile.posa_allow_user_to_edit_item_discount ||\n                        !!invoice_doc.is_return\n                          ? true\n                          : false\n                      \"\n                    ></v-text-field>\n                  </v-col>\n                  <v-col cols=\"4\">\n                    <v-text-field\n                      dense\n                      outlined\n                      color=\"indigo\"\n                      :label=\"frappe._('Price list Rate')\"\n                      background-color=\"white\"\n                      hide-details\n                      v-model=\"item.price_list_rate\"\n                      type=\"number\"\n                      disabled\n                      :prefix=\"invoice_doc.currency\"\n                    ></v-text-field>\n                  </v-col>\n                  <v-col cols=\"4\">\n                    <v-text-field\n                      dense\n                      outlined\n                      color=\"indigo\"\n                      :label=\"frappe._('Available QTY')\"\n                      background-color=\"white\"\n                      hide-details\n                      v-model=\"item.actual_qty\"\n                      type=\"number\"\n                      disabled\n                    ></v-text-field>\n                  </v-col>\n                  <v-col cols=\"4\">\n                    <v-text-field\n                      dense\n                      outlined\n                      color=\"indigo\"\n                      :label=\"frappe._('Group')\"\n                      background-color=\"white\"\n                      hide-details\n                      v-model=\"item.item_group\"\n                      disabled\n                    ></v-text-field>\n                  </v-col>\n                  <v-col cols=\"4\">\n                    <v-text-field\n                      dense\n                      outlined\n                      color=\"indigo\"\n                      :label=\"frappe._('Stock QTY')\"\n                      background-color=\"white\"\n                      hide-details\n                      v-model=\"item.stock_qty\"\n                      type=\"number\"\n                      disabled\n                    ></v-text-field>\n                  </v-col>\n                  <v-col cols=\"4\">\n                    <v-text-field\n                      dense\n                      outlined\n                      color=\"indigo\"\n                      :label=\"frappe._('Stock UOM')\"\n                      background-color=\"white\"\n                      hide-details\n                      v-model=\"item.stock_uom\"\n                      disabled\n                    ></v-text-field>\n                  </v-col>\n                  <v-col align=\"center\" cols=\"4\" v-if=\"item.posa_offer_applied\">\n                    <v-checkbox\n                      dense\n                      :label=\"frappe._('Offer Applied')\"\n                      v-model=\"item.posa_offer_applied\"\n                      readonly\n                      hide-details\n                      class=\"shrink mr-2 mt-0\"\n                    ></v-checkbox>\n                  </v-col>\n                  <v-col\n                    cols=\"4\"\n                    v-if=\"item.has_serial_no == 1 || item.serial_no\"\n                  >\n                    <v-text-field\n                      dense\n                      outlined\n                      color=\"indigo\"\n                      :label=\"frappe._('Serial No QTY')\"\n                      background-color=\"white\"\n                      hide-details\n                      v-model=\"item.serial_no_selected_count\"\n                      type=\"number\"\n                      disabled\n                    ></v-text-field>\n                  </v-col>\n                  <v-col\n                    cols=\"12\"\n                    v-if=\"item.has_serial_no == 1 || item.serial_no\"\n                  >\n                    <v-autocomplete\n                      v-model=\"item.serial_no_selected\"\n                      :items=\"item.serial_no_data\"\n                      item-text=\"serial_no\"\n                      outlined\n                      dense\n                      chips\n                      color=\"indigo\"\n                      small-chips\n                      :label=\"frappe._('Serial No')\"\n                      multiple\n                      @change=\"set_serial_no(item)\"\n                    ></v-autocomplete>\n                  </v-col>\n                  <v-col\n                    cols=\"4\"\n                    v-if=\"item.has_batch_no == 1 || item.batch_no\"\n                  >\n                    <v-text-field\n                      dense\n                      outlined\n                      color=\"indigo\"\n                      :label=\"frappe._('Batch No Available QTY')\"\n                      background-color=\"white\"\n                      hide-details\n                      v-model=\"item.actual_batch_qty\"\n                      type=\"number\"\n                      disabled\n                    ></v-text-field>\n                  </v-col>\n                  <v-col\n                    cols=\"4\"\n                    v-if=\"item.has_batch_no == 1 || item.batch_no\"\n                  >\n                    <v-text-field\n                      dense\n                      outlined\n                      color=\"indigo\"\n                      :label=\"frappe._('Batch No Expiry Date')\"\n                      background-color=\"white\"\n                      hide-details\n                      v-model=\"item.batch_no_expiry_date\"\n                      disabled\n                    ></v-text-field>\n                  </v-col>\n                  <v-col\n                    cols=\"8\"\n                    v-if=\"item.has_batch_no == 1 || item.batch_no\"\n                  >\n                    <v-autocomplete\n                      v-model=\"item.batch_no\"\n                      :items=\"item.batch_no_data\"\n                      item-text=\"batch_no\"\n                      outlined\n                      dense\n                      color=\"indigo\"\n                      :label=\"frappe._('Batch No')\"\n                      @change=\"set_batch_qty(item, $event)\"\n                    >\n                      <template v-slot:item=\"data\">\n                        <template>\n                          <v-list-item-content>\n                            <v-list-item-title\n                              v-html=\"data.item.batch_no\"\n                            ></v-list-item-title>\n                            <v-list-item-subtitle\n                              v-html=\"\n                                `Available QTY  '${data.item.batch_qty}' - Expiry Date ${data.item.expiry_date}`\n                              \"\n                            ></v-list-item-subtitle>\n                          </v-list-item-content>\n                        </template>\n                      </template>\n                    </v-autocomplete>\n                  </v-col>\n                  <v-col\n                    cols=\"4\"\n                    v-if=\"\n                      pos_profile.posa_allow_sales_order &&\n                      invoiceType == 'Order'\n                    \"\n                  >\n                    <v-menu\n                      ref=\"item_delivery_date\"\n                      v-model=\"item.item_delivery_date\"\n                      :close-on-content-click=\"false\"\n                      :return-value.sync=\"item.posa_delivery_date\"\n                      transition=\"scale-transition\"\n                      dense\n                    >\n                      <template v-slot:activator=\"{ on, attrs }\">\n                        <v-text-field\n                          v-model=\"item.posa_delivery_date\"\n                          :label=\"frappe._('Delivery Date')\"\n                          readonly\n                          outlined\n                          dense\n                          clearable\n                          color=\"indigo\"\n                          hide-details\n                          v-bind=\"attrs\"\n                          v-on=\"on\"\n                        ></v-text-field>\n                      </template>\n                      <v-date-picker\n                        v-model=\"item.posa_delivery_date\"\n                        no-title\n                        scrollable\n                        color=\"indigo\"\n                        :min=\"frappe.datetime.now_date()\"\n                      >\n                        <v-spacer></v-spacer>\n                        <v-btn\n                          text\n                          color=\"primary\"\n                          @click=\"item.item_delivery_date = false\"\n                        >\n                          Cancel\n                        </v-btn>\n                        <v-btn\n                          text\n                          color=\"primary\"\n                          @click=\"\n                            [\n                              $refs.item_delivery_date.save(\n                                item.posa_delivery_date\n                              ),\n                              validate_due_date(item),\n                            ]\n                          \"\n                        >\n                          OK\n                        </v-btn>\n                      </v-date-picker>\n                    </v-menu>\n                  </v-col>\n                  <v-col\n                    cols=\"8\"\n                    v-if=\"pos_profile.posa_display_additional_notes\"\n                  >\n                    <v-textarea\n                      class=\"pa-0\"\n                      outlined\n                      dense\n                      clearable\n                      color=\"indigo\"\n                      auto-grow\n                      rows=\"1\"\n                      :label=\"frappe._('Additional Notes')\"\n                      v-model=\"item.posa_notes\"\n                      :value=\"item.posa_notes\"\n                    ></v-textarea>\n                  </v-col>\n                </v-row>\n              </td>\n            </template>\n          </v-data-table>\n        </template>\n      </div>\n    </v-card>\n    <v-card class=\"cards mb-0 mt-3 py-0 grey lighten-5\">\n      <v-row no-gutters>\n        <v-col cols=\"7\">\n          <v-row no-gutters class=\"pa-1 pt-9 pr-1\">\n            <v-col cols=\"6\" class=\"pa-1\">\n              <v-text-field\n                :value=\"formtCurrency(total_qty)\"\n                :label=\"frappe._('Total Qty')\"\n                outlined\n                dense\n                readonly\n                hide-details\n              ></v-text-field>\n            </v-col>\n            <v-col\n              v-if=\"!pos_profile.posa_use_percentage_discount\"\n              cols=\"6\"\n              class=\"pa-1\"\n            >\n              <v-text-field\n                v-model=\"discount_amount\"\n                :label=\"frappe._('Additional Discount')\"\n                ref=\"discount\"\n                outlined\n                dense\n                hide-details\n                type=\"number\"\n                :prefix=\"pos_profile.currency\"\n                :disabled=\"\n                  !pos_profile.posa_allow_user_to_edit_additional_discount ||\n                  discount_percentage_offer_name\n                    ? true\n                    : false\n                \"\n              ></v-text-field>\n            </v-col>\n            <v-col\n              v-if=\"pos_profile.posa_use_percentage_discount\"\n              cols=\"6\"\n              class=\"pa-1\"\n            >\n              <v-text-field\n                v-model=\"additional_discount_percentage\"\n                :label=\"frappe._('Additional Discount %')\"\n                ref=\"percentage_discount\"\n                outlined\n                dense\n                hide-details\n                type=\"number\"\n                :disabled=\"\n                  !pos_profile.posa_allow_user_to_edit_additional_discount ||\n                  discount_percentage_offer_name\n                    ? true\n                    : false\n                \"\n                @change=\"update_discount_umount\"\n              ></v-text-field>\n            </v-col>\n            <v-col cols=\"6\" class=\"pa-1 mt-2\">\n              <v-text-field\n                :value=\"formtCurrency(total_items_discount_amount)\"\n                :label=\"frappe._('Items Discounts')\"\n                outlined\n                dense\n                readonly\n                hide-details\n                :prefix=\"pos_profile.currency\"\n              ></v-text-field>\n            </v-col>\n\n            <v-col cols=\"6\" class=\"pa-1 mt-2\">\n              <v-text-field\n                :value=\"formtCurrency(subtotal)\"\n                :label=\"frappe._('Total')\"\n                outlined\n                dense\n                readonly\n                hide-details\n                class=\"text--red\"\n                :prefix=\"pos_profile.currency\"\n              ></v-text-field>\n            </v-col>\n          </v-row>\n        </v-col>\n        <v-col cols=\"5\">\n          <v-row no-gutters class=\"pa-1 pt-2 pl-0\">\n            <v-col cols=\"6\" class=\"pa-1\">\n              <v-btn\n                block\n                class=\"pa-0\"\n                color=\"warning\"\n                dark\n                @click=\"get_draft_invoices\"\n                >{{ __('Hold') }}</v-btn\n              >\n            </v-col>\n            <v-col cols=\"6\" class=\"pa-1\">\n              <v-btn\n                block\n                class=\"pa-0\"\n                :class=\"{ 'disable-events': !pos_profile.posa_allow_return }\"\n                color=\"info\"\n                dark\n                @click=\"open_returns\"\n                >{{ __('Return') }}</v-btn\n              >\n            </v-col>\n            <v-col cols=\"6\" class=\"pa-1\">\n              <v-btn\n                block\n                class=\"pa-0\"\n                color=\"error\"\n                dark\n                @click=\"cancel_dialog = true\"\n                >{{ __('Cancel') }}</v-btn\n              >\n            </v-col>\n            <v-col cols=\"6\" class=\"pa-1\">\n              <v-btn\n                block\n                class=\"pa-0\"\n                color=\"success\"\n                dark\n                @click=\"new_invoice\"\n                >{{ __('New') }}</v-btn\n              >\n            </v-col>\n            <v-col cols=\"12\" class=\"pa-1\">\n              <v-btn\n                block\n                class=\"pa-0\"\n                color=\"primary\"\n                @click=\"show_payment\"\n                dark\n                >{{ __('PAY') }}</v-btn\n              >\n            </v-col>\n          </v-row>\n        </v-col>\n      </v-row>\n    </v-card>\n  </div>\n</template>\n\n<script>\nimport { evntBus } from '../../bus';\nimport Customer from './Customer.vue';\n\nexport default {\n  data() {\n    return {\n      pos_profile: '',\n      pos_opening_shift: '',\n      stock_settings: '',\n      invoice_doc: '',\n      return_doc: '',\n      customer: '',\n      customer_info: '',\n      discount_amount: 0,\n      additional_discount_percentage: 0,\n      total_tax: 0,\n      items: [],\n      posOffers: [],\n      posa_offers: [],\n      posa_coupons: [],\n      allItems: [],\n      discount_percentage_offer_name: null,\n      invoiceTypes: ['Invoice', 'Order'],\n      invoiceType: 'Invoice',\n      itemsPerPage: 1000,\n      expanded: [],\n      singleExpand: true,\n      cancel_dialog: false,\n      items_headers: [\n        {\n          text: __('Name'),\n          align: 'start',\n          sortable: true,\n          value: 'item_name',\n        },\n        { text: __('QTY'), value: 'qty', align: 'center' },\n        { text: __('UOM'), value: 'uom', align: 'center' },\n        { text: __('Rate'), value: 'rate', align: 'center' },\n        { text: __('Amount'), value: 'amount', align: 'center' },\n        { text: __('is Offer'), value: 'posa_is_offer', align: 'center' },\n      ],\n    };\n  },\n\n  components: {\n    Customer,\n  },\n\n  computed: {\n    total_qty() {\n      this.close_payments();\n      let qty = 0;\n      this.items.forEach((item) => {\n        qty += item.qty;\n      });\n      return flt(qty).toFixed(2);\n    },\n    Total() {\n      let sum = 0;\n      this.items.forEach((item) => {\n        sum += item.qty * item.rate;\n      });\n      return flt(sum).toFixed(2);\n    },\n    subtotal() {\n      this.close_payments();\n      let sum = 0;\n      this.items.forEach((item) => {\n        sum += item.qty * item.rate;\n      });\n      sum -= flt(this.discount_amount);\n      return flt(sum).toFixed(2);\n    },\n    total_items_discount_amount() {\n      let sum = 0;\n      this.items.forEach((item) => {\n        sum += item.qty * item.discount_amount;\n      });\n      return flt(sum).toFixed(2);\n    },\n  },\n\n  methods: {\n    remove_item(item) {\n      const index = this.items.findIndex(\n        (el) => el.posa_row_id == item.posa_row_id\n      );\n      if (index >= 0) {\n        this.items.splice(index, 1);\n      }\n      const idx = this.expanded.findIndex(\n        (el) => el.posa_row_id == item.posa_row_id\n      );\n      if (idx >= 0) {\n        this.expanded.splice(idx, 1);\n      }\n    },\n\n    add_one(item) {\n      item.qty++;\n      if (item.qty == 0) {\n        this.remove_item(item);\n      }\n      this.calc_sotck_gty(item, item.qty);\n      this.$forceUpdate();\n    },\n    subtract_one(item) {\n      item.qty--;\n      if (item.qty == 0) {\n        this.remove_item(item);\n      }\n      this.calc_sotck_gty(item, item.qty);\n      this.$forceUpdate();\n    },\n\n    add_item(item) {\n      if (!item.uom) {\n        item.uom = item.stock_uom;\n      }\n      const index = this.items.findIndex(\n        (el) =>\n          el.item_code === item.item_code &&\n          el.uom === item.uom &&\n          !el.posa_is_offer &&\n          !el.posa_is_replace\n      );\n      if (index === -1) {\n        const new_item = this.get_new_item(item);\n        if (item.has_serial_no && item.to_set_serial_no) {\n          new_item.serial_no_selected = [];\n          new_item.serial_no_selected.push(item.to_set_serial_no);\n          item.to_set_serial_no = null;\n        }\n        this.items.unshift(new_item);\n        this.update_item_detail(new_item);\n      } else {\n        const cur_item = this.items[index];\n        this.update_items_details([cur_item]);\n        if (item.has_serial_no && item.to_set_serial_no) {\n          if (cur_item.serial_no_selected.includes(item.to_set_serial_no)) {\n            evntBus.$emit('show_mesage', {\n              text: __(`This Serial Number {0} has already been added!`, [\n                item.to_set_serial_no,\n              ]),\n              color: 'warning',\n            });\n            item.to_set_serial_no = null;\n            return;\n          }\n          cur_item.serial_no_selected.push(item.to_set_serial_no);\n          item.to_set_serial_no = null;\n        }\n        if (!cur_item.has_batch_no) {\n          cur_item.qty += item.qty || 1;\n          this.calc_sotck_gty(cur_item, cur_item.qty);\n        } else {\n          if (\n            cur_item.stock_qty < cur_item.actual_batch_qty ||\n            !cur_item.batch_no\n          ) {\n            cur_item.qty += item.qty || 1;\n            this.calc_sotck_gty(cur_item, cur_item.qty);\n          } else {\n            const new_item = this.get_new_item(cur_item);\n            new_item.batch_no = '';\n            new_item.batch_no_expiry_date = '';\n            new_item.actual_batch_qty = '';\n            new_item.qty = item.qty || 1;\n            this.items.unshift(new_item);\n          }\n        }\n        this.set_serial_no(cur_item);\n      }\n      this.$forceUpdate();\n    },\n\n    get_new_item(item) {\n      const new_item = { ...item };\n      if (!item.qty) {\n        item.qty = 1;\n      }\n      if (!item.posa_is_offer) {\n        item.posa_is_offer = 0;\n      }\n      if (!item.posa_is_replace) {\n        item.posa_is_replace = '';\n      }\n      new_item.stock_qty = item.qty;\n      new_item.discount_amount = 0;\n      new_item.discount_percentage = 0;\n      new_item.discount_amount_per_item = 0;\n      new_item.price_list_rate = item.rate;\n      new_item.qty = item.qty;\n      new_item.uom = item.uom ? item.uom : item.stock_uom;\n      new_item.actual_batch_qty = '';\n      new_item.conversion_factor = 1;\n      new_item.posa_offers = JSON.stringify([]);\n      new_item.posa_offer_applied = 0;\n      new_item.posa_is_offer = item.posa_is_offer;\n      new_item.posa_is_replace = item.posa_is_replace || null;\n      new_item.is_free_item = 0;\n      new_item.posa_notes = '';\n      new_item.posa_delivery_date = '';\n      new_item.posa_row_id = this.makeid(20);\n      if (\n        (!this.pos_profile.posa_auto_set_batch && new_item.has_batch_no) ||\n        new_item.has_serial_no\n      ) {\n        this.expanded.push(new_item);\n      }\n      return new_item;\n    },\n\n    cancel_invoice() {\n      const doc = this.get_invoice_doc();\n      this.invoiceType = 'Invoice';\n      this.invoiceTypes = ['Invoice', 'Order'];\n      if (doc.name && this.pos_profile.posa_allow_delete) {\n        frappe.call({\n          method: 'posawesome.posawesome.api.posapp.delete_invoice',\n          args: { invoice: doc.name },\n          async: true,\n          callback: function (r) {\n            if (r.message) {\n              evntBus.$emit('show_mesage', {\n                text: r.message,\n                color: 'warning',\n              });\n            }\n          },\n        });\n      }\n      this.items = [];\n      this.posa_offers = [];\n      evntBus.$emit('set_pos_coupons', []);\n      this.posa_coupons = [];\n      this.customer = this.pos_profile.customer;\n      this.invoice_doc = '';\n      this.return_doc = '';\n      this.discount_amount = 0;\n      this.additional_discount_percentage = 0;\n      evntBus.$emit('set_customer_readonly', false);\n      this.cancel_dialog = false;\n    },\n\n    new_invoice(data = {}) {\n      evntBus.$emit('set_customer_readonly', false);\n      this.expanded = [];\n      this.posa_offers = [];\n      evntBus.$emit('set_pos_coupons', []);\n      this.posa_coupons = [];\n      this.return_doc = '';\n      const doc = this.get_invoice_doc();\n      if (doc.name) {\n        this.update_invoice(doc);\n      } else {\n        if (doc.items.length) {\n          this.update_invoice(doc);\n        }\n      }\n      if (!data.name && !data.is_return) {\n        this.items = [];\n        this.customer = this.pos_profile.customer;\n        this.invoice_doc = '';\n        this.discount_amount = 0;\n        this.additional_discount_percentage = 0;\n        this.invoiceType = 'Invoice';\n        this.invoiceTypes = ['Invoice', 'Order'];\n      } else {\n        if (data.is_return) {\n          evntBus.$emit('set_customer_readonly', true);\n          this.invoiceType = 'Return';\n          this.invoiceTypes = ['Return'];\n        }\n        this.invoice_doc = data;\n        this.items = data.items;\n        this.update_items_details(this.items);\n        this.posa_offers = data.posa_offers || [];\n        this.items.forEach((item) => {\n          if (!item.posa_row_id) {\n            item.posa_row_id = this.makeid(20);\n          }\n          if (item.batch_no) {\n            this.set_batch_qty(item, item.batch_no);\n          }\n        });\n        this.customer = data.customer;\n        this.discount_amount = data.discount_amount;\n        this.additional_discount_percentage =\n          data.additional_discount_percentage;\n        this.items.forEach((item) => {\n          if (item.serial_no) {\n            item.serial_no_selected = [];\n            const serial_list = item.serial_no.split('\\n');\n            serial_list.forEach((element) => {\n              if (element.length) {\n                item.serial_no_selected.push(element);\n              }\n            });\n            item.serial_no_selected_count = item.serial_no_selected.length;\n          }\n        });\n      }\n    },\n\n    get_invoice_doc() {\n      let doc = {};\n      if (this.invoice_doc.name) {\n        doc = { ...this.invoice_doc };\n      }\n      doc.doctype = 'Sales Invoice';\n      doc.is_pos = 1;\n      doc.ignore_pricing_rule = 1;\n      doc.company = doc.company || this.pos_profile.company;\n      doc.pos_profile = doc.pos_profile || this.pos_profile.name;\n      doc.campaign = doc.campaign || this.pos_profile.campaign;\n      doc.currency = doc.currency || this.pos_profile.currency;\n      doc.naming_series = doc.naming_series || this.pos_profile.naming_series;\n      doc.customer = this.customer;\n      doc.items = this.get_invoice_items();\n      doc.total = this.subtotal;\n      doc.discount_amount = flt(this.discount_amount);\n      doc.additional_discount_percentage = flt(\n        this.additional_discount_percentage\n      );\n      doc.posa_pos_opening_shift = this.pos_opening_shift.name;\n      doc.payments = this.get_payments();\n      doc.taxes = [];\n      doc.is_return = this.invoice_doc.is_return;\n      doc.return_against = this.invoice_doc.return_against;\n      doc.posa_offers = this.posa_offers;\n      doc.posa_coupons = this.posa_coupons;\n      return doc;\n    },\n\n    get_invoice_items() {\n      const items_list = [];\n      this.items.forEach((item) => {\n        const new_item = {\n          item_code: item.item_code,\n          posa_row_id: item.posa_row_id,\n          posa_offers: item.posa_offers,\n          posa_offer_applied: item.posa_offer_applied,\n          posa_is_offer: item.posa_is_offer,\n          posa_is_replace: item.posa_is_replace,\n          is_free_item: item.is_free_item,\n          qty: item.qty,\n          rate: item.rate,\n          uom: item.uom,\n          amount: item.qty * item.rate,\n          conversion_factor: item.conversion_factor,\n          serial_no: item.serial_no,\n          discount_percentage: item.discount_percentage,\n          discount_amount: item.discount_amount,\n          batch_no: item.batch_no,\n          posa_notes: item.posa_notes,\n          posa_delivery_date: item.posa_delivery_date,\n          price_list_rate: item.price_list_rate,\n        };\n        items_list.push(new_item);\n      });\n\n      return items_list;\n    },\n\n    get_payments() {\n      const payments = [];\n      this.pos_profile.payments.forEach((payment) => {\n        payments.push({\n          amount: 0,\n          mode_of_payment: payment.mode_of_payment,\n          default: payment.default,\n          account: '',\n        });\n      });\n      return payments;\n    },\n\n    update_invoice(doc) {\n      const vm = this;\n      frappe.call({\n        method: 'posawesome.posawesome.api.posapp.update_invoice',\n        args: {\n          data: doc,\n        },\n        async: false,\n        callback: function (r) {\n          if (r.message) {\n            vm.invoice_doc = r.message;\n          }\n        },\n      });\n      return this.invoice_doc;\n    },\n\n    proces_invoice() {\n      const doc = this.get_invoice_doc();\n      if (doc.name) {\n        return this.update_invoice(doc);\n      } else {\n        return this.update_invoice(doc);\n      }\n    },\n\n    show_payment() {\n      if (!this.customer) {\n        evntBus.$emit('show_mesage', {\n          text: __(`There is no Customer !`),\n          color: 'error',\n        });\n        return;\n      }\n      if (!this.items.length) {\n        evntBus.$emit('show_mesage', {\n          text: __(`There is no Items !`),\n          color: 'error',\n        });\n        return;\n      }\n      if (!this.validate()) {\n        return;\n      }\n      evntBus.$emit('show_payment', 'true');\n      const invoice_doc = this.proces_invoice();\n      evntBus.$emit('send_invoice_doc_payment', invoice_doc);\n    },\n\n    validate() {\n      let value = true;\n      this.items.forEach((item) => {\n        if (this.stock_settings.allow_negative_stock != 1) {\n          if (\n            this.invoiceType == 'Invoice' &&\n            ((item.is_stock_item && item.stock_qty && !item.actual_qty) ||\n              (item.is_stock_item && item.stock_qty > item.actual_qty))\n          ) {\n            evntBus.$emit('show_mesage', {\n              text: __(\n                `The existing quantity '{0}' for item '{1}' is not enough`,\n                [item.actual_qty, item.item_name]\n              ),\n              color: 'error',\n            });\n            value = false;\n          }\n        }\n        if (\n          item.max_discount > 0 &&\n          item.discount_percentage > item.max_discount\n        ) {\n          evntBus.$emit('show_mesage', {\n            text: __(`Maximum discount for Item {0} is {1}%`, [\n              item.item_name,\n              item.max_discount,\n            ]),\n            color: 'error',\n          });\n          value = false;\n        }\n        if (item.has_serial_no) {\n          if (\n            !this.invoice_doc.is_return &&\n            (!item.serial_no_selected ||\n              item.stock_qty != item.serial_no_selected.length)\n          ) {\n            evntBus.$emit('show_mesage', {\n              text: __(`Selected serial numbers of item {0} is incorrect`, [\n                item.item_name,\n              ]),\n              color: 'error',\n            });\n            value = false;\n          }\n        }\n        if (item.has_batch_no) {\n          if (item.stock_qty > item.actual_batch_qty) {\n            evntBus.$emit('show_mesage', {\n              text: __(\n                `The existing batch quantity of item {0} is not enough`,\n                [item.item_name]\n              ),\n              color: 'error',\n            });\n            value = false;\n          }\n        }\n        if (this.pos_profile.posa_allow_user_to_edit_additional_discount) {\n          const clac_percentage = (this.discount_amount / this.Total) * 100;\n          if (clac_percentage > this.pos_profile.posa_max_discount_allowed) {\n            evntBus.$emit('show_mesage', {\n              text: __(`The discount should not be higher than {0}%`, [\n                this.pos_profile.posa_max_discount_allowed,\n              ]),\n              color: 'error',\n            });\n            value = false;\n          }\n        }\n        if (this.invoice_doc.is_return) {\n          if (this.subtotal >= 0) {\n            evntBus.$emit('show_mesage', {\n              text: __(`Return Invoice Total Not Correct`),\n              color: 'error',\n            });\n            value = false;\n            return value;\n          }\n          if (this.subtotal * -1 > this.return_doc.total) {\n            evntBus.$emit('show_mesage', {\n              text: __(`Return Invoice Total should not be higher than {0}`, [\n                this.return_doc.total,\n              ]),\n              color: 'error',\n            });\n            value = false;\n            return value;\n          }\n          this.items.forEach((item) => {\n            const return_item = this.return_doc.items.find(\n              (element) => element.item_code == item.item_code\n            );\n\n            if (!return_item) {\n              evntBus.$emit('show_mesage', {\n                text: __(\n                  `The item {0} cannot be returned because it is not in the invoice {1}`,\n                  [item.item_name, this.return_doc.name]\n                ),\n                color: 'error',\n              });\n              value = false;\n              return value;\n            } else if (item.qty * -1 > return_item.qty || item.qty >= 0) {\n              evntBus.$emit('show_mesage', {\n                text: __(`The QTY of the item {0} cannot be greater than {1}`, [\n                  item.item_name,\n                  return_item.qty,\n                ]),\n                color: 'error',\n              });\n              value = false;\n              return value;\n            }\n          });\n        }\n      });\n      return value;\n    },\n\n    get_draft_invoices() {\n      const vm = this;\n      frappe.call({\n        method: 'posawesome.posawesome.api.posapp.get_draft_invoices',\n        args: {\n          pos_opening_shift: this.pos_opening_shift.name,\n        },\n        async: false,\n        callback: function (r) {\n          if (r.message) {\n            evntBus.$emit('open_drafts', r.message);\n          }\n        },\n      });\n    },\n\n    open_returns() {\n      evntBus.$emit('open_returns', this.pos_profile.company);\n    },\n\n    close_payments() {\n      evntBus.$emit('show_payment', 'false');\n    },\n\n    update_items_details(items) {\n      if (!items.length > 0) {\n        return;\n      }\n      const vm = this;\n      if (!vm.pos_profile) return;\n      frappe.call({\n        method: 'posawesome.posawesome.api.posapp.get_items_details',\n        async: false,\n        args: {\n          pos_profile: vm.pos_profile,\n          items_data: items,\n        },\n        callback: function (r) {\n          if (r.message) {\n            items.forEach((item) => {\n              const updated_item = r.message.find(\n                (element) => element.posa_row_id == item.posa_row_id\n              );\n              item.actual_qty = updated_item.actual_qty;\n              item.serial_no_data = updated_item.serial_no_data;\n              item.batch_no_data = updated_item.batch_no_data;\n              item.item_uoms = updated_item.item_uoms;\n              item.has_batch_no = updated_item.has_batch_no;\n              item.has_serial_no = updated_item.has_serial_no;\n            });\n          }\n        },\n      });\n    },\n\n    update_item_detail(item) {\n      const vm = this;\n      frappe.call({\n        method: 'posawesome.posawesome.api.posapp.get_item_detail',\n        args: {\n          warehouse: this.pos_profile.warehouse,\n          doc: this.get_invoice_doc(),\n          price_list: this.pos_profile.price_list,\n          item: {\n            item_code: item.item_code,\n            customer: this.customer,\n            doctype: 'Sales Invoice',\n            name: 'New Sales Invoice 1',\n            company: this.pos_profile.company,\n            conversion_rate: 1,\n            qty: item.qty,\n            price_list_rate: item.price_list_rate,\n            child_docname: 'New Sales Invoice Item 1',\n            cost_center: this.pos_profile.cost_center,\n            currency: this.pos_profile.currency,\n            // plc_conversion_rate: 1,\n            pos_profile: this.pos_profile.name,\n            price_list: this.pos_profile.selling_price_list,\n            uom: item.uom,\n            tax_category: '',\n            transaction_type: 'selling',\n            update_stock: this.pos_profile.update_stock,\n            price_list: this.get_price_list(),\n            has_batch_no: item.has_batch_no,\n            serial_no: item.serial_no,\n            batch_no: item.batch_no,\n            is_stock_item: item.is_stock_item,\n          },\n        },\n        callback: function (r) {\n          if (r.message) {\n            const data = r.message;\n            if (\n              item.has_batch_no &&\n              vm.pos_profile.posa_auto_set_batch &&\n              !item.batch_no &&\n              data.batch_no\n            ) {\n              item.batch_no = data.batch_no;\n              vm.set_batch_qty(item, item.batch_no, false);\n            }\n            if (data.has_pricing_rule) {\n            } else if (\n              vm.pos_profile.posa_apply_customer_discount &&\n              vm.customer_info.posa_discount > 0 &&\n              vm.customer_info.posa_discount <= 100\n            ) {\n              if (\n                item.posa_is_offer == 0 &&\n                !item.posa_is_replace &&\n                item.posa_offer_applied == 0\n              ) {\n                if (item.max_discount > 0) {\n                  item.discount_percentage =\n                    item.max_discount < vm.customer_info.posa_discount\n                      ? item.max_discount\n                      : vm.customer_info.posa_discount;\n                } else {\n                  item.discount_percentage = vm.customer_info.posa_discount;\n                }\n              }\n            }\n            if (!item.btach_price) {\n              if (\n                !item.is_free_item &&\n                !item.posa_is_offer &&\n                !item.posa_is_replace\n              ) {\n                item.price_list_rate = data.price_list_rate;\n              }\n            }\n            item.last_purchase_rate = data.last_purchase_rate;\n            item.projected_qty = data.projected_qty;\n            item.reserved_qty = data.reserved_qty;\n            item.conversion_factor = data.conversion_factor;\n            item.stock_qty = data.stock_qty;\n            item.actual_qty = data.actual_qty;\n            item.stock_uom = data.stock_uom;\n            (item.has_serial_no = data.has_serial_no),\n              (item.has_batch_no = data.has_batch_no),\n              vm.calc_item_price(item);\n          }\n        },\n      });\n    },\n\n    fetch_customer_details() {\n      const vm = this;\n      if (this.customer) {\n        frappe.call({\n          method: 'posawesome.posawesome.api.posapp.get_customer_info',\n          args: {\n            customer: vm.customer,\n          },\n          async: false,\n          callback: (r) => {\n            const message = r.message;\n            if (!r.exc) {\n              vm.customer_info = {\n                ...message,\n              };\n            }\n            vm.update_price_list();\n          },\n        });\n      }\n    },\n\n    get_price_list() {\n      let price_list = this.pos_profile.selling_price_list;\n      if (this.customer_info && this.pos_profile) {\n        const { customer_price_list, customer_group_price_list } =\n          this.customer_info;\n        const pos_price_list = this.pos_profile.selling_price_list;\n        if (customer_price_list && customer_price_list != pos_price_list) {\n          price_list = customer_price_list;\n        } else if (\n          customer_group_price_list &&\n          customer_group_price_list != pos_price_list\n        ) {\n          price_list = customer_group_price_list;\n        }\n      }\n      return price_list;\n    },\n\n    update_price_list() {\n      let price_list = this.get_price_list();\n      if (price_list == this.pos_profile.selling_price_list) {\n        price_list = null;\n      }\n      evntBus.$emit('update_customer_price_list', price_list);\n    },\n    update_discount_umount() {\n      const value = flt(this.additional_discount_percentage);\n      if (value >= -100 && value <= 100) {\n        this.discount_amount = (this.Total * value) / 100;\n      } else {\n        this.additional_discount_percentage = 0;\n        this.discount_amount = 0;\n      }\n    },\n\n    calc_prices(item, value, $event) {\n      if (event.target.id === 'rate') {\n        item.discount_percentage = 0;\n        if (value < item.price_list_rate) {\n          item.discount_amount = (\n            flt(item.price_list_rate) - flt(value)\n          ).toFixed(2);\n        } else if (value < 0) {\n          item.rate = item.price_list_rate;\n          item.discount_amount = 0;\n        } else if (value > item.price_list_rate) {\n          item.discount_amount = 0;\n        }\n      } else if (event.target.id === 'discount_amount') {\n        if (value < 0) {\n          item.discount_amount = 0;\n          item.discount_percentage = 0;\n        } else {\n          item.rate = flt(item.price_list_rate) - flt(value);\n          item.discount_percentage = 0;\n        }\n      } else if (event.target.id === 'discount_percentage') {\n        if (value < 0) {\n          item.discount_amount = 0;\n          item.discount_percentage = 0;\n        } else {\n          item.rate = (\n            flt(item.price_list_rate) -\n            (flt(item.price_list_rate) * flt(value)) / 100\n          ).toFixed(2);\n          item.discount_amount = (\n            flt(item.price_list_rate) - flt(item.rate)\n          ).toFixed(2);\n        }\n      }\n    },\n\n    calc_item_price(item) {\n      if (!item.posa_offer_applied) {\n        if (item.price_list_rate) {\n          item.rate = item.price_list_rate;\n        }\n      }\n      if (item.discount_percentage) {\n        item.rate =\n          flt(item.price_list_rate) -\n          (flt(item.price_list_rate) * flt(item.discount_percentage)) / 100;\n        item.discount_amount = (\n          flt(item.price_list_rate) - flt(item.rate)\n        ).toFixed(2);\n      } else if (item.discount_amount) {\n        item.rate = (\n          flt(item.price_list_rate) - flt(item.discount_amount)\n        ).toFixed(2);\n      }\n    },\n\n    calc_uom(item, value) {\n      const new_uom = item.item_uoms.find((element) => element.uom == value);\n      item.conversion_factor = new_uom.conversion_factor;\n      if (!item.posa_offer_applied) {\n        item.discount_amount = 0;\n        item.discount_percentage = 0;\n      }\n      if (item.btach_price) {\n        item.price_list_rate = item.btach_price * new_uom.conversion_factor;\n      }\n      this.update_item_detail(item);\n    },\n\n    calc_sotck_gty(item, value) {\n      item.stock_qty = item.conversion_factor * value;\n    },\n\n    set_serial_no(item) {\n      if (!item.has_serial_no) return;\n      item.serial_no = '';\n      item.serial_no_selected.forEach((element) => {\n        item.serial_no += element + '\\n';\n      });\n      item.serial_no_selected_count = item.serial_no_selected.length;\n      if (item.serial_no_selected_count != item.stock_qty) {\n        evntBus.$emit('show_mesage', {\n          text: __(`Selected Serial No QTY is {0} it should be {1}`, [\n            item.serial_no_selected_count,\n            item.stock_qty,\n          ]),\n          color: 'warning',\n        });\n      }\n    },\n\n    set_batch_qty(item, value, update = true) {\n      const batch_no = item.batch_no_data.find(\n        (element) => element.batch_no == value\n      );\n      item.actual_batch_qty = batch_no.batch_qty;\n      item.batch_no_expiry_date = batch_no.expiry_date;\n      if (batch_no.btach_price) {\n        item.btach_price = batch_no.btach_price;\n        item.price_list_rate = batch_no.btach_price;\n        item.rate = batch_no.btach_price;\n      } else if (update) {\n        item.btach_price = null;\n        this.update_item_detail(item);\n      }\n    },\n\n    formtCurrency(value) {\n      value = parseFloat(value);\n      return value.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n    },\n\n    shortOpenPayment(e) {\n      if (e.key === 's' && (e.ctrlKey || e.metaKey)) {\n        e.preventDefault();\n        this.show_payment();\n      }\n    },\n\n    shortDeleteFirstItem(e) {\n      if (e.key === 'd' && (e.ctrlKey || e.metaKey)) {\n        e.preventDefault();\n        this.remove_item(this.items[0]);\n      }\n    },\n\n    shortOpenFirstItem(e) {\n      if (e.key === 'a' && (e.ctrlKey || e.metaKey)) {\n        e.preventDefault();\n        this.expanded = [];\n        this.expanded.push(this.items[0]);\n      }\n    },\n\n    shortSelectDiscount(e) {\n      if (e.key === 'z' && (e.ctrlKey || e.metaKey)) {\n        e.preventDefault();\n        this.$refs.discount.focus();\n      }\n    },\n\n    makeid(length) {\n      let result = '';\n      const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\n      const charactersLength = characters.length;\n      for (var i = 0; i < length; i++) {\n        result += characters.charAt(\n          Math.floor(Math.random() * charactersLength)\n        );\n      }\n      return result;\n    },\n\n    checkOfferIsAppley(item, offer) {\n      let applied = false;\n      const item_offers = JSON.parse(item.posa_offers);\n      for (const row_id of item_offers) {\n        const exist_offer = this.posa_offers.find((el) => row_id == el.row_id);\n        if (exist_offer && exist_offer.offer_name == offer.name) {\n          applied = true;\n          break;\n        }\n      }\n      return applied;\n    },\n\n    handelOffers() {\n      const offers = [];\n      this.posOffers.forEach((offer) => {\n        if (offer.apply_on === 'Item Code') {\n          const itemOffer = this.getItemOffer(offer);\n          if (itemOffer) {\n            offers.push(itemOffer);\n          }\n        } else if (offer.apply_on === 'Item Group') {\n          const groupOffer = this.getGroupOffer(offer);\n          if (groupOffer) {\n            offers.push(groupOffer);\n          }\n        } else if (offer.apply_on === 'Brand') {\n          const brandOffer = this.getBrandOffer(offer);\n          if (brandOffer) {\n            offers.push(brandOffer);\n          }\n        } else if (offer.apply_on === 'Transaction') {\n          const transactionOffer = this.getTransactionOffer(offer);\n          if (transactionOffer) {\n            offers.push(transactionOffer);\n          }\n        }\n      });\n\n      this.setItemGiveOffer(offers);\n      this.updatePosOffers(offers);\n    },\n\n    setItemGiveOffer(offers) {\n      // Set item give offer for replace\n      offers.forEach((offer) => {\n        if (\n          offer.apply_on == 'Item Code' &&\n          offer.apply_type == 'Item Code' &&\n          offer.replace_item\n        ) {\n          offer.give_item = offer.item;\n          offer.apply_item_code = offer.item;\n        } else if (\n          offer.apply_on == 'Item Group' &&\n          offer.apply_type == 'Item Group' &&\n          offer.replace_cheapest_item\n        ) {\n          const offerItemCode = this.getCheapestItem(offer).item_code;\n          offer.give_item = offerItemCode;\n          offer.apply_item_code = offerItemCode;\n        }\n      });\n    },\n\n    getCheapestItem(offer) {\n      let itemsRowID;\n      if (typeof offer.items === 'string') {\n        itemsRowID = JSON.parse(offer.items);\n      } else {\n        itemsRowID = offer.items;\n      }\n      const itemsList = [];\n      itemsRowID.forEach((row_id) => {\n        itemsList.push(this.getItemFromRowID(row_id));\n      });\n      const result = itemsList.reduce(function (res, obj) {\n        return !obj.posa_is_replace &&\n          !obj.posa_is_offer &&\n          obj.price_list_rate < res.price_list_rate\n          ? obj\n          : res;\n      });\n      return result;\n    },\n\n    getItemFromRowID(row_id) {\n      const item = this.items.find((el) => el.posa_row_id == row_id);\n      return item;\n    },\n\n    checkQtyAnountOffer(offer, qty, amount) {\n      let min_qty = false;\n      let max_qty = false;\n      let min_amt = false;\n      let max_amt = false;\n      const applys = [];\n\n      if (offer.min_qty || offer.min_qty == 0) {\n        if (qty >= offer.min_qty) {\n          min_qty = true;\n        }\n        applys.push(min_qty);\n      }\n\n      if (offer.max_qty > 0) {\n        if (qty <= offer.max_qty) {\n          max_qty = true;\n        }\n        applys.push(max_qty);\n      }\n\n      if (offer.min_amt > 0) {\n        if (amount >= offer.min_amt) {\n          min_amt = true;\n        }\n        applys.push(min_amt);\n      }\n\n      if (offer.max_amt > 0) {\n        if (amount <= offer.max_amt) {\n          max_amt = true;\n        }\n        applys.push(max_amt);\n      }\n      let apply = false;\n      if (!applys.includes(false)) {\n        apply = true;\n      }\n      const res = {\n        apply: apply,\n        conditions: { min_qty, max_qty, min_amt, max_amt },\n      };\n      return res;\n    },\n\n    checkOfferCoupon(offer) {\n      if (offer.coupon_based) {\n        const coupon = this.posa_coupons.find(\n          (el) => offer.name == el.pos_offer\n        );\n        if (coupon) {\n          offer.coupon = coupon.coupon;\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        offer.coupon = null;\n        return true;\n      }\n    },\n\n    getItemOffer(offer) {\n      let apply_offer = null;\n      if (offer.apply_on === 'Item Code') {\n        if (this.checkOfferCoupon(offer)) {\n          this.items.forEach((item) => {\n            if (!item.posa_is_offer && item.item_code === offer.item) {\n              const items = [];\n              if (\n                offer.offer === 'Item Price' &&\n                item.posa_offer_applied &&\n                !this.checkOfferIsAppley(item, offer)\n              ) {\n              } else {\n                const res = this.checkQtyAnountOffer(\n                  offer,\n                  item.stock_qty,\n                  item.stock_qty * item.price_list_rate\n                );\n                if (res.apply) {\n                  items.push(item.posa_row_id);\n                  offer.items = items;\n                  apply_offer = offer;\n                }\n              }\n            }\n          });\n        }\n      }\n      return apply_offer;\n    },\n\n    getGroupOffer(offer) {\n      let apply_offer = null;\n      if (offer.apply_on === 'Item Group') {\n        if (this.checkOfferCoupon(offer)) {\n          const items = [];\n          let total_count = 0;\n          let total_amount = 0;\n          this.items.forEach((item) => {\n            if (!item.posa_is_offer && item.item_group === offer.item_group) {\n              if (\n                offer.offer === 'Item Price' &&\n                item.posa_offer_applied &&\n                !this.checkOfferIsAppley(item, offer)\n              ) {\n              } else {\n                total_count += item.stock_qty;\n                total_amount += item.stock_qty * item.price_list_rate;\n                items.push(item.posa_row_id);\n              }\n            }\n          });\n          if (total_count || total_amount) {\n            const res = this.checkQtyAnountOffer(\n              offer,\n              total_count,\n              total_amount\n            );\n            if (res.apply) {\n              offer.items = items;\n              apply_offer = offer;\n            }\n          }\n        }\n      }\n      return apply_offer;\n    },\n\n    getBrandOffer(offer) {\n      let apply_offer = null;\n      if (offer.apply_on === 'Brand') {\n        if (this.checkOfferCoupon(offer)) {\n          const items = [];\n          let total_count = 0;\n          let total_amount = 0;\n          this.items.forEach((item) => {\n            if (!item.posa_is_offer && item.brand === offer.brand) {\n              if (\n                offer.offer === 'Item Price' &&\n                item.posa_offer_applied &&\n                !this.checkOfferIsAppley(item, offer)\n              ) {\n              } else {\n                total_count += item.stock_qty;\n                total_amount += item.stock_qty * item.price_list_rate;\n                items.push(item.posa_row_id);\n              }\n            }\n          });\n          if (total_count || total_amount) {\n            const res = this.checkQtyAnountOffer(\n              offer,\n              total_count,\n              total_amount\n            );\n            if (res.apply) {\n              offer.items = items;\n              apply_offer = offer;\n            }\n          }\n        }\n      }\n      return apply_offer;\n    },\n    getTransactionOffer(offer) {\n      let apply_offer = null;\n      if (offer.apply_on === 'Transaction') {\n        if (this.checkOfferCoupon(offer)) {\n          let total_qty = 0;\n          this.items.forEach((item) => {\n            if (!item.posa_is_offer && !item.posa_is_replace) {\n              total_qty += item.stock_qty;\n            }\n          });\n          const items = [];\n          const total_count = total_qty;\n          const total_amount = this.Total;\n          if (total_count || total_amount) {\n            const res = this.checkQtyAnountOffer(\n              offer,\n              total_count,\n              total_amount\n            );\n            if (res.apply) {\n              this.items.forEach((item) => {\n                items.push(item.posa_row_id);\n              });\n              offer.items = items;\n              apply_offer = offer;\n            }\n          }\n        }\n      }\n      return apply_offer;\n    },\n\n    updatePosOffers(offers) {\n      evntBus.$emit('update_pos_offers', offers);\n    },\n\n    updateInvoiceOffers(offers) {\n      this.posa_offers.forEach((invoiceOffer) => {\n        const existOffer = offers.find(\n          (offer) => invoiceOffer.row_id == offer.row_id\n        );\n        if (!existOffer) {\n          this.removeApplyOffer(invoiceOffer);\n        }\n      });\n      offers.forEach((offer) => {\n        const existOffer = this.posa_offers.find(\n          (invoiceOffer) => invoiceOffer.row_id == offer.row_id\n        );\n        if (existOffer) {\n          existOffer.items = JSON.stringify(offer.items);\n          if (\n            existOffer.offer === 'Give Product' &&\n            existOffer.give_item &&\n            existOffer.give_item != offer.give_item\n          ) {\n            const item_to_remove = this.items.find(\n              (item) => item.posa_row_id == existOffer.give_item_row_id\n            );\n            if (item_to_remove) {\n              const updated_item_offers = offer.items.filter(\n                (row_id) => row_id != item_to_remove.posa_row_id\n              );\n              offer.items = updated_item_offers;\n              this.remove_item(item_to_remove);\n              existOffer.give_item_row_id = null;\n              existOffer.give_item = null;\n            }\n            const newItemOffer = this.ApplyOnGiveProduct(offer);\n            if (offer.replace_cheapest_item) {\n              const cheapestItem = this.getCheapestItem(offer);\n              const oldBaseItem = this.items.find(\n                (el) => el.posa_row_id == item_to_remove.posa_is_replace\n              );\n              newItemOffer.qty = item_to_remove.qty;\n              if (oldBaseItem && !oldBaseItem.posa_is_replace) {\n                oldBaseItem.qty += item_to_remove.qty;\n              } else {\n                const restoredItem = this.ApplyOnGiveProduct(\n                  {\n                    given_qty: item_to_remove.qty,\n                  },\n                  item_to_remove.item_code\n                );\n                restoredItem.posa_is_offer = 0;\n                this.items.unshift(restoredItem);\n              }\n              newItemOffer.posa_is_offer = 0;\n              newItemOffer.posa_is_replace = cheapestItem.posa_row_id;\n              const diffQty = cheapestItem.qty - newItemOffer.qty;\n              if (diffQty <= 0) {\n                newItemOffer.qty += diffQty;\n                this.remove_item(cheapestItem);\n                newItemOffer.posa_row_id = cheapestItem.posa_row_id;\n                newItemOffer.posa_is_replace = newItemOffer.posa_row_id;\n              } else {\n                cheapestItem.qty = diffQty;\n              }\n            }\n            this.items.unshift(newItemOffer);\n            existOffer.give_item_row_id = newItemOffer.posa_row_id;\n            existOffer.give_item = newItemOffer.item_code;\n          } else if (\n            existOffer.offer === 'Give Product' &&\n            existOffer.give_item &&\n            existOffer.give_item == offer.give_item &&\n            (offer.replace_item || offer.replace_cheapest_item)\n          ) {\n            this.$nextTick(function () {\n              const offerItem = this.getItemFromRowID(\n                existOffer.give_item_row_id\n              );\n              const diff = offer.given_qty - offerItem.qty;\n              if (diff > 0) {\n                const itemsRowID = JSON.parse(existOffer.items);\n                const itemsList = [];\n                itemsRowID.forEach((row_id) => {\n                  itemsList.push(this.getItemFromRowID(row_id));\n                });\n                const existItem = itemsList.find(\n                  (el) =>\n                    el.item_code == offerItem.item_code &&\n                    el.posa_is_replace != offerItem.posa_row_id\n                );\n                if (existItem) {\n                  const diffExistQty = existItem.qty - diff;\n                  if (diffExistQty > 0) {\n                    offerItem.qty += diff;\n                    existItem.qty -= diff;\n                  } else {\n                    offerItem.qty += existItem.qty;\n                    this.remove_item(existItem);\n                  }\n                }\n              }\n            });\n          } else if (existOffer.offer === 'Item Price') {\n            this.ApplyOnPrice(offer);\n          } else if (existOffer.offer === 'Grand Total') {\n            this.ApplyOnTotal(offer);\n          }\n          this.addOfferToItems(existOffer);\n        } else {\n          this.applyNewOffer(offer);\n        }\n      });\n    },\n\n    removeApplyOffer(invoiceOffer) {\n      if (invoiceOffer.offer === 'Item Price') {\n        this.RemoveOnPrice(invoiceOffer);\n        const index = this.posa_offers.findIndex(\n          (el) => el.row_id === invoiceOffer.row_id\n        );\n        this.posa_offers.splice(index, 1);\n      }\n      if (invoiceOffer.offer === 'Give Product') {\n        const item_to_remove = this.items.find(\n          (item) => item.posa_row_id == invoiceOffer.give_item_row_id\n        );\n        const index = this.posa_offers.findIndex(\n          (el) => el.row_id === invoiceOffer.row_id\n        );\n        this.posa_offers.splice(index, 1);\n        this.remove_item(item_to_remove);\n      }\n      if (invoiceOffer.offer === 'Grand Total') {\n        this.RemoveOnTotal(invoiceOffer);\n        const index = this.posa_offers.findIndex(\n          (el) => el.row_id === invoiceOffer.row_id\n        );\n        this.posa_offers.splice(index, 1);\n      }\n      if (invoiceOffer.offer === 'Loyalty Point') {\n        const index = this.posa_offers.findIndex(\n          (el) => el.row_id === invoiceOffer.row_id\n        );\n        this.posa_offers.splice(index, 1);\n      }\n      this.deleteOfferFromItems(invoiceOffer);\n    },\n\n    applyNewOffer(offer) {\n      if (offer.offer === 'Item Price') {\n        this.ApplyOnPrice(offer);\n      }\n      if (offer.offer === 'Give Product') {\n        let itemsRowID;\n        if (typeof offer.items === 'string') {\n          itemsRowID = JSON.parse(offer.items);\n        } else {\n          itemsRowID = offer.items;\n        }\n        if (\n          offer.apply_on == 'Item Code' &&\n          offer.apply_type == 'Item Code' &&\n          offer.replace_item\n        ) {\n          const item = this.ApplyOnGiveProduct(offer, offer.item);\n          item.posa_is_replace = itemsRowID[0];\n          const baseItem = this.items.find(\n            (el) => el.posa_row_id == item.posa_is_replace\n          );\n          const diffQty = baseItem.qty - offer.given_qty;\n          item.posa_is_offer = 0;\n          if (diffQty <= 0) {\n            item.qty = baseItem.qty;\n            this.remove_item(baseItem);\n            item.posa_row_id = item.posa_is_replace;\n          } else {\n            baseItem.qty = diffQty;\n          }\n          this.items.unshift(item);\n          offer.give_item_row_id = item.posa_row_id;\n        } else if (\n          offer.apply_on == 'Item Group' &&\n          offer.apply_type == 'Item Group' &&\n          offer.replace_cheapest_item\n        ) {\n          const itemsList = [];\n          itemsRowID.forEach((row_id) => {\n            itemsList.push(this.getItemFromRowID(row_id));\n          });\n          const baseItem = itemsList.find(\n            (el) => el.item_code == offer.give_item\n          );\n          const item = this.ApplyOnGiveProduct(offer, offer.give_item);\n          item.posa_is_offer = 0;\n          item.posa_is_replace = baseItem.posa_row_id;\n          const diffQty = baseItem.qty - offer.given_qty;\n          if (diffQty <= 0) {\n            item.qty = baseItem.qty;\n            this.remove_item(baseItem);\n            item.posa_row_id = item.posa_is_replace;\n          } else {\n            baseItem.qty = diffQty;\n          }\n          this.items.unshift(item);\n          offer.give_item_row_id = item.posa_row_id;\n        } else {\n          const item = this.ApplyOnGiveProduct(offer);\n          this.items.unshift(item);\n          if (item) {\n            offer.give_item_row_id = item.posa_row_id;\n          }\n        }\n      }\n      if (offer.offer === 'Grand Total') {\n        this.ApplyOnTotal(offer);\n      }\n      if (offer.offer === 'Loyalty Point') {\n        evntBus.$emit('show_mesage', {\n          text: __('Loyalty Point Offer Applied'),\n          color: 'success',\n        });\n      }\n\n      const newOffer = {\n        offer_name: offer.name,\n        row_id: offer.row_id,\n        apply_on: offer.apply_on,\n        offer: offer.offer,\n        items: JSON.stringify(offer.items),\n        give_item: offer.give_item,\n        give_item_row_id: offer.give_item_row_id,\n        offer_applied: offer.offer_applied,\n        coupon_based: offer.coupon_based,\n        coupon: offer.coupon,\n      };\n      this.posa_offers.push(newOffer);\n      this.addOfferToItems(newOffer);\n    },\n\n    ApplyOnGiveProduct(offer, item_code) {\n      if (!item_code) {\n        item_code = offer.give_item;\n      }\n      const items = this.allItems;\n      const item = items.find((item) => item.item_code == item_code);\n      if (!item) {\n        return;\n      }\n      const new_item = { ...item };\n      new_item.qty = offer.given_qty;\n      new_item.stock_qty = offer.given_qty;\n      new_item.rate = offer.discount_type === 'Rate' ? offer.rate : item.rate;\n      new_item.discount_amount =\n        offer.discount_type === 'Discount Amount' ? offer.discount_amount : 0;\n      new_item.discount_percentage =\n        offer.discount_type === 'Discount Percentage'\n          ? offer.discount_percentage\n          : 0;\n      new_item.discount_amount_per_item = 0;\n      new_item.uom = item.uom ? item.uom : item.stock_uom;\n      new_item.actual_batch_qty = '';\n      new_item.conversion_factor = 1;\n      new_item.posa_offers = JSON.stringify([]);\n      new_item.posa_offer_applied = 0;\n      new_item.posa_is_offer = 1;\n      new_item.posa_is_replace = null;\n      new_item.posa_notes = '';\n      new_item.posa_delivery_date = '';\n      new_item.is_free_item =\n        (offer.discount_type === 'Rate' && !offer.rate) ||\n        (offer.discount_type === 'Discount Percentage' &&\n          offer.discount_percentage == 0)\n          ? 1\n          : 0;\n      new_item.posa_row_id = this.makeid(20);\n      new_item.price_list_rate =\n        (offer.discount_type === 'Rate' && !offer.rate) ||\n        (offer.discount_type === 'Discount Percentage' &&\n          offer.discount_percentage == 0)\n          ? 0\n          : item.rate;\n      if (\n        (!this.pos_profile.posa_auto_set_batch && new_item.has_batch_no) ||\n        new_item.has_serial_no\n      ) {\n        this.expanded.push(new_item);\n      }\n      this.update_item_detail(new_item);\n      return new_item;\n    },\n\n    ApplyOnPrice(offer) {\n      this.items.forEach((item) => {\n        if (offer.items.includes(item.posa_row_id)) {\n          const item_offers = JSON.parse(item.posa_offers);\n          if (!item_offers.includes(offer.row_id)) {\n            if (offer.discount_type === 'Rate') {\n              item.rate = offer.rate;\n            } else if (offer.discount_type === 'Discount Percentage') {\n              item.discount_percentage += offer.discount_percentage;\n            } else if (offer.discount_type === 'Discount Amount') {\n              item.discount_amount += offer.discount_amount;\n            }\n            item.posa_offer_applied = 1;\n            this.calc_item_price(item);\n          }\n        }\n      });\n    },\n\n    RemoveOnPrice(offer) {\n      this.items.forEach((item) => {\n        const item_offers = JSON.parse(item.posa_offers);\n        if (item_offers.includes(offer.row_id)) {\n          const originalOffer = this.posOffers.find(\n            (el) => el.name == offer.offer_name\n          );\n          if (originalOffer) {\n            if (originalOffer.discount_type === 'Rate') {\n              item.rate = item.price_list_rate;\n            } else if (originalOffer.discount_type === 'Discount Percentage') {\n              item.discount_percentage -= offer.discount_percentage;\n              if (!item.discount_percentage) {\n                item.discount_percentage = 0;\n                item.discount_amount = 0;\n                item.rate = item.price_list_rate;\n              }\n            } else if (originalOffer.discount_type === 'Discount Amount') {\n              item.discount_amount -= offer.discount_amount;\n            }\n            this.calc_item_price(item);\n          }\n        }\n      });\n    },\n\n    ApplyOnTotal(offer) {\n      if (!offer.name) {\n        offer = this.posOffers.find((el) => el.name == offer.offer_name);\n      }\n      if (\n        (!this.discount_percentage_offer_name ||\n          this.discount_percentage_offer_name == offer.name) &&\n        offer.discount_percentage > 0 &&\n        offer.discount_percentage <= 100\n      ) {\n        this.discount_amount = (\n          (flt(this.Total) * flt(offer.discount_percentage)) /\n          100\n        ).toFixed(2);\n        this.discount_percentage_offer_name = offer.name;\n      }\n    },\n\n    RemoveOnTotal(offer) {\n      if (\n        this.discount_percentage_offer_name &&\n        this.discount_percentage_offer_name == offer.offer_name\n      ) {\n        this.discount_amount = 0;\n        this.discount_percentage_offer_name = null;\n      }\n    },\n\n    addOfferToItems(offer) {\n      const offer_items = JSON.parse(offer.items);\n      offer_items.forEach((el) => {\n        this.items.forEach((exist_item) => {\n          if (exist_item.posa_row_id == el) {\n            const item_offers = JSON.parse(exist_item.posa_offers);\n            if (!item_offers.includes(offer.row_id)) {\n              item_offers.push(offer.row_id);\n              if (offer.offer === 'Item Price') {\n                exist_item.posa_offer_applied = 1;\n              }\n            }\n            exist_item.posa_offers = JSON.stringify(item_offers);\n          }\n        });\n      });\n    },\n\n    deleteOfferFromItems(offer) {\n      const offer_items = JSON.parse(offer.items);\n      offer_items.forEach((el) => {\n        this.items.forEach((exist_item) => {\n          if (exist_item.posa_row_id == el) {\n            const item_offers = JSON.parse(exist_item.posa_offers);\n            const updated_item_offers = item_offers.filter(\n              (row_id) => row_id != offer.row_id\n            );\n            if (offer.offer === 'Item Price') {\n              exist_item.posa_offer_applied = 0;\n            }\n            exist_item.posa_offers = JSON.stringify(updated_item_offers);\n          }\n        });\n      });\n    },\n\n    validate_due_date(item) {\n      const today = frappe.datetime.now_date();\n      const parse_today = Date.parse(today);\n      const new_date = Date.parse(item.posa_delivery_date);\n      if (new_date < parse_today) {\n        setTimeout(() => {\n          item.posa_delivery_date = today;\n        }, 0);\n      }\n    },\n  },\n\n  created() {\n    evntBus.$on('register_pos_profile', (data) => {\n      this.pos_profile = data.pos_profile;\n      this.customer = data.pos_profile.customer;\n      this.pos_opening_shift = data.pos_opening_shift;\n      this.stock_settings = data.stock_settings;\n    });\n    evntBus.$on('add_item', (item) => {\n      this.add_item(item);\n    });\n    evntBus.$on('update_customer', (customer) => {\n      this.customer = customer;\n    });\n    evntBus.$on('new_invoice', () => {\n      this.invoice_doc = '';\n      this.cancel_invoice();\n    });\n    evntBus.$on('load_invoice', (data) => {\n      this.new_invoice(data);\n      evntBus.$emit('set_pos_coupons', data.posa_coupons);\n    });\n    evntBus.$on('set_offers', (data) => {\n      this.posOffers = data;\n    });\n    evntBus.$on('update_invoice_offers', (data) => {\n      this.updateInvoiceOffers(data);\n    });\n    evntBus.$on('update_invoice_coupons', (data) => {\n      this.posa_coupons = data;\n      this.handelOffers();\n    });\n    evntBus.$on('set_all_items', (data) => {\n      this.allItems = data;\n      this.items.forEach((item) => {\n        this.update_item_detail(item);\n      });\n    });\n    evntBus.$on('load_return_invoice', (data) => {\n      this.new_invoice(data.invoice_doc);\n      this.discount_amount = -data.return_doc.discount_amount;\n      this.additional_discount_percentage =\n        -data.return_doc.additional_discount_percentage;\n      this.return_doc = data.return_doc;\n    });\n    document.addEventListener('keydown', this.shortOpenPayment.bind(this));\n    document.addEventListener('keydown', this.shortDeleteFirstItem.bind(this));\n    document.addEventListener('keydown', this.shortOpenFirstItem.bind(this));\n    document.addEventListener('keydown', this.shortSelectDiscount.bind(this));\n  },\n  destroyed() {\n    document.removeEventListener('keydown', this.shortOpenPayment);\n    document.removeEventListener('keydown', this.shortDeleteFirstItem);\n    document.removeEventListener('keydown', this.shortOpenFirstItem);\n    document.removeEventListener('keydown', this.shortSelectDiscount);\n  },\n  watch: {\n    customer() {\n      this.close_payments();\n      evntBus.$emit('set_customer', this.customer);\n      this.fetch_customer_details();\n    },\n    customer_info() {\n      evntBus.$emit('set_customer_info_to_edit', this.customer_info);\n    },\n    expanded(data_value) {\n      this.update_items_details(data_value);\n      if (data_value.length > 0) {\n        this.update_item_detail(data_value[0]);\n      }\n    },\n    discount_percentage_offer_name() {\n      evntBus.$emit('update_discount_percentage_offer_name', {\n        value: this.discount_percentage_offer_name,\n      });\n    },\n    items: {\n      deep: true,\n      handler(items) {\n        this.handelOffers();\n        this.$forceUpdate();\n      },\n    },\n    invoiceType() {\n      evntBus.$emit('update_invoice_type', this.invoiceType);\n    },\n    discount_amount() {\n      if (!this.discount_amount || this.discount_amount == 0) {\n        this.additional_discount_percentage = 0;\n      } else if (this.pos_profile.posa_use_percentage_discount) {\n        this.additional_discount_percentage =\n          (this.discount_amount / this.Total) * 100;\n      } else {\n        this.additional_discount_percentage = 0;\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.border_line_bottom {\n  border-bottom: 1px solid lightgray;\n}\n.disable-events {\n  pointer-events: none;\n}\n</style>"]}, media: undefined });

    };
    /* scoped */
    var __vue_scope_id__$3 = "data-v-3f876d0a";
    /* module identifier */
    var __vue_module_identifier__$3 = undefined;
    /* functional template */
    var __vue_is_functional_template__$3 = false;
    /* component normalizer */
    function __vue_normalize__$3(
      template, style, script,
      scope, functional, moduleIdentifier,
      createInjector, createInjectorSSR
    ) {
      var component = (typeof script === 'function' ? script.options : script) || {};

      // For security concerns, we use only base name in production mode.
      component.__file = "/home/skss/frappe-bench/apps/posawesome/posawesome/public/js/posapp/components/pos/Invoice.vue";

      if (!component.render) {
        component.render = template.render;
        component.staticRenderFns = template.staticRenderFns;
        component._compiled = true;

        if (functional) { component.functional = true; }
      }

      component._scopeId = scope;

      {
        var hook;
        if (style) {
          hook = function(context) {
            style.call(this, createInjector(context));
          };
        }

        if (hook !== undefined) {
          if (component.functional) {
            // register for functional component in vue file
            var originalRender = component.render;
            component.render = function renderWithStyleInjection(h, context) {
              hook.call(context);
              return originalRender(h, context)
            };
          } else {
            // inject component registration as beforeCreate hook
            var existing = component.beforeCreate;
            component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
          }
        }
      }

      return component
    }
    /* style inject */
    function __vue_create_injector__$2() {
      var head = document.head || document.getElementsByTagName('head')[0];
      var styles = __vue_create_injector__$2.styles || (__vue_create_injector__$2.styles = {});
      var isOldIE =
        typeof navigator !== 'undefined' &&
        /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

      return function addStyle(id, css) {
        if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

        var group = isOldIE ? css.media || 'default' : id;
        var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

        if (!style.ids.includes(id)) {
          var code = css.source;
          var index = style.ids.length;

          style.ids.push(id);

          if (isOldIE) {
            style.element = style.element || document.querySelector('style[data-group=' + group + ']');
          }

          if (!style.element) {
            var el = style.element = document.createElement('style');
            el.type = 'text/css';

            if (css.media) { el.setAttribute('media', css.media); }
            if (isOldIE) {
              el.setAttribute('data-group', group);
              el.setAttribute('data-next-index', '0');
            }

            head.appendChild(el);
          }

          if (isOldIE) {
            index = parseInt(style.element.getAttribute('data-next-index'));
            style.element.setAttribute('data-next-index', index + 1);
          }

          if (style.element.styleSheet) {
            style.parts.push(code);
            style.element.styleSheet.cssText = style.parts
              .filter(Boolean)
              .join('\n');
          } else {
            var textNode = document.createTextNode(code);
            var nodes = style.element.childNodes;
            if (nodes[index]) { style.element.removeChild(nodes[index]); }
            if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
            else { style.element.appendChild(textNode); }
          }
        }
      }
    }
    /* style inject SSR */
    

    
    var Invoice = __vue_normalize__$3(
      { render: __vue_render__$3, staticRenderFns: __vue_staticRenderFns__$3 },
      __vue_inject_styles__$3,
      __vue_script__$3,
      __vue_scope_id__$3,
      __vue_is_functional_template__$3,
      __vue_module_identifier__$3,
      __vue_create_injector__$2,
      undefined
    );

  //
  var script$4 = {
    props: ['dialog'],
    data: function () { return ({
      dialog_data: {},
      companys: [],
      company: '',
      pos_profiles_data: [],
      pos_profiles: [],
      pos_profile: '',
      payments_method_data: [],
      payments_methods: [],
      payments_methods_headers: [
        {
          text: __('Mode of Payment'),
          align: 'start',
          sortable: false,
          value: 'mode_of_payment',
        },
        {
          text: __('Opening Amount'),
          value: 'amount',
          align: 'center',
          sortable: false,
        } ],
      itemsPerPage: 100,
      max25chars: function (v) { return v.length <= 12 || 'Input too long!'; }, // TODO : should validate as number
      pagination: {},
      snack: false, // TODO : need to remove
      snackColor: '', // TODO : need to remove
      snackText: '', // TODO : need to remove
    }); },
    watch: {
      company: function company(val) {
        var this$1 = this;

        this.pos_profiles = [];
        this.pos_profiles_data.forEach(function (element) {
          if (element.company === val) {
            this$1.pos_profiles.push(element.name);
          }
          if (this$1.pos_profiles.length) {
            this$1.pos_profile = this$1.pos_profiles[0];
          } else {
            this$1.pos_profile = '';
          }
        });
      },
      pos_profile: function pos_profile(val) {
        var this$1 = this;

        this.payments_methods = [];
        this.payments_method_data.forEach(function (element) {
          if (element.parent === val) {
            this$1.payments_methods.push({
              mode_of_payment: element.mode_of_payment,
              amount: 0,
            });
          }
        });
      },
    },
    methods: {
      close_opening_dialog: function close_opening_dialog() {
        evntBus.$emit('close_opening_dialog');
      },
      get_opening_dialog_data: function get_opening_dialog_data() {
        var vm = this;
        frappe.call({
          method: 'posawesome.posawesome.api.posapp.get_opening_dialog_data',
          args: {},
          callback: function (r) {
            if (r.message) {
              r.message.companys.forEach(function (element) {
                vm.companys.push(element.name);
              });
              vm.company = vm.companys[0];
              vm.pos_profiles_data = r.message.pos_profiles_data;
              vm.payments_method_data = r.message.payments_method;
            }
          },
        });
      },
      submit_dialog: function submit_dialog() {
        if (!this.payments_methods.length || !this.company || !this.pos_profile) {
          return;
        }
        var vm = this;
        return frappe
          .call('posawesome.posawesome.api.posapp.create_opening_voucher', {
            pos_profile: this.pos_profile,
            company: this.company,
            balance_details: this.payments_methods,
          })
          .then(function (r) {
            if (r.message) {
              evntBus.$emit('register_pos_data', r.message);
              evntBus.$emit('set_company', r.message.company);
              vm.close_opening_dialog();
            }
          });
      },
      formtCurrency: function formtCurrency(value) {
        value = parseFloat(value);
        return value.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
      },
    },
    created: function () {
      this.$nextTick(function () {
        this.get_opening_dialog_data();
      });
    },
  };

  /* script */
              var __vue_script__$4 = script$4;
              
  /* template */
  var __vue_render__$4 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "v-row",
      { attrs: { justify: "center" } },
      [
        _c(
          "v-dialog",
          {
            attrs: { persistent: "", "max-width": "600px" },
            model: {
              value: _vm.dialog,
              callback: function($$v) {
                _vm.dialog = $$v;
              },
              expression: "dialog"
            }
          },
          [
            _c(
              "v-card",
              [
                _c("v-card-title", [
                  _c("span", { staticClass: "headline indigo--text" }, [
                    _vm._v(_vm._s(_vm.__("Thirvu Retail Opening Shift")))
                  ])
                ]),
                _vm._v(" "),
                _c(
                  "v-card-text",
                  [
                    _c(
                      "v-container",
                      [
                        _c(
                          "v-row",
                          [
                            _c(
                              "v-col",
                              { attrs: { cols: "12" } },
                              [
                                _c("v-autocomplete", {
                                  attrs: {
                                    items: _vm.companys,
                                    label: _vm.frappe._("Company"),
                                    required: ""
                                  },
                                  model: {
                                    value: _vm.company,
                                    callback: function($$v) {
                                      _vm.company = $$v;
                                    },
                                    expression: "company"
                                  }
                                })
                              ],
                              1
                            ),
                            _vm._v(" "),
                            _c(
                              "v-col",
                              { attrs: { cols: "12" } },
                              [
                                _c("v-autocomplete", {
                                  attrs: {
                                    items: _vm.pos_profiles,
                                    label: _vm.frappe._("POS Profile"),
                                    required: ""
                                  },
                                  model: {
                                    value: _vm.pos_profile,
                                    callback: function($$v) {
                                      _vm.pos_profile = $$v;
                                    },
                                    expression: "pos_profile"
                                  }
                                })
                              ],
                              1
                            ),
                            _vm._v(" "),
                            _c(
                              "v-col",
                              { attrs: { cols: "12" } },
                              [
                                [
                                  _c("v-data-table", {
                                    staticClass: "elevation-1",
                                    attrs: {
                                      headers: _vm.payments_methods_headers,
                                      items: _vm.payments_methods,
                                      "item-key": "mode_of_payment",
                                      "items-per-page": _vm.itemsPerPage,
                                      "hide-default-footer": ""
                                    },
                                    scopedSlots: _vm._u([
                                      {
                                        key: "item.amount",
                                        fn: function(props) {
                                          return [
                                            _c(
                                              "v-edit-dialog",
                                              {
                                                attrs: {
                                                  "return-value":
                                                    props.item.amount
                                                },
                                                on: {
                                                  "update:returnValue": function(
                                                    $event
                                                  ) {
                                                    return _vm.$set(
                                                      props.item,
                                                      "amount",
                                                      $event
                                                    )
                                                  },
                                                  "update:return-value": function(
                                                    $event
                                                  ) {
                                                    return _vm.$set(
                                                      props.item,
                                                      "amount",
                                                      $event
                                                    )
                                                  }
                                                },
                                                scopedSlots: _vm._u(
                                                  [
                                                    {
                                                      key: "input",
                                                      fn: function() {
                                                        return [
                                                          _c("v-text-field", {
                                                            attrs: {
                                                              rules: [
                                                                _vm.max25chars
                                                              ],
                                                              label: _vm.frappe._(
                                                                "Edit"
                                                              ),
                                                              "single-line": "",
                                                              counter: "",
                                                              type: "number"
                                                            },
                                                            model: {
                                                              value:
                                                                props.item.amount,
                                                              callback: function(
                                                                $$v
                                                              ) {
                                                                _vm.$set(
                                                                  props.item,
                                                                  "amount",
                                                                  $$v
                                                                );
                                                              },
                                                              expression:
                                                                "props.item.amount"
                                                            }
                                                          })
                                                        ]
                                                      },
                                                      proxy: true
                                                    }
                                                  ],
                                                  null,
                                                  true
                                                )
                                              },
                                              [
                                                _vm._v(
                                                  "\n                      " +
                                                    _vm._s(
                                                      _vm.formtCurrency(
                                                        props.item.amount
                                                      )
                                                    ) +
                                                    "\n                      "
                                                )
                                              ]
                                            )
                                          ]
                                        }
                                      }
                                    ])
                                  })
                                ]
                              ],
                              2
                            )
                          ],
                          1
                        )
                      ],
                      1
                    )
                  ],
                  1
                ),
                _vm._v(" "),
                _c(
                  "v-card-actions",
                  [
                    _c("v-spacer"),
                    _vm._v(" "),
                    _c(
                      "v-btn",
                      {
                        attrs: { color: "primary", dark: "" },
                        on: { click: _vm.submit_dialog }
                      },
                      [_vm._v("Submit")]
                    )
                  ],
                  1
                )
              ],
              1
            )
          ],
          1
        )
      ],
      1
    )
  };
  var __vue_staticRenderFns__$4 = [];
  __vue_render__$4._withStripped = true;

    /* style */
    var __vue_inject_styles__$4 = undefined;
    /* scoped */
    var __vue_scope_id__$4 = undefined;
    /* module identifier */
    var __vue_module_identifier__$4 = undefined;
    /* functional template */
    var __vue_is_functional_template__$4 = false;
    /* component normalizer */
    function __vue_normalize__$4(
      template, style, script,
      scope, functional, moduleIdentifier,
      createInjector, createInjectorSSR
    ) {
      var component = (typeof script === 'function' ? script.options : script) || {};

      // For security concerns, we use only base name in production mode.
      component.__file = "/home/skss/frappe-bench/apps/posawesome/posawesome/public/js/posapp/components/pos/OpeningDialog.vue";

      if (!component.render) {
        component.render = template.render;
        component.staticRenderFns = template.staticRenderFns;
        component._compiled = true;

        if (functional) { component.functional = true; }
      }

      component._scopeId = scope;

      return component
    }
    /* style inject */
    
    /* style inject SSR */
    

    
    var OpeningDialog = __vue_normalize__$4(
      { render: __vue_render__$4, staticRenderFns: __vue_staticRenderFns__$4 },
      __vue_inject_styles__$4,
      __vue_script__$4,
      __vue_scope_id__$4,
      __vue_is_functional_template__$4,
      __vue_module_identifier__$4,
      undefined,
      undefined
    );

  //
  var script$5 = {
    data: function () { return ({
      loading: false,
      pos_profile: '',
      invoice_doc: '',
      loyalty_amount: 0,
      is_credit_sale: 0,
      is_write_off_change: 0,
      date_menu: false,
      po_date_menu: false,
      addresses: [],
      paid_change: 0,
      order_delivery_date: false,
      paid_change_rules: [],
      is_return: false,
      is_cashback: true,
      redeem_customer_credit: false,
      customer_credit_dict: [],
      phone_dialog: false,
      invoiceType: 'Invoice',
      pos_settings: '',
      customer_info: '',
      mpesa_modes: [],
    }); },

    methods: {
      back_to_invoice: function back_to_invoice() {
        evntBus.$emit('show_payment', 'false');
        evntBus.$emit('set_customer_readonly', false);
      },
      submit: function submit() {
        if (!this.invoice_doc.is_return && this.total_payments < 0) {
          evntBus.$emit('show_mesage', {
            text: "Payments not correct",
            color: 'error',
          });
          frappe.utils.play_sound('error');
          return;
        }

        if (
          !this.pos_profile.posa_allow_partial_payment &&
          this.total_payments < this.invoice_doc.grand_total
        ) {
          evntBus.$emit('show_mesage', {
            text: "The amount paid is not complete",
            color: 'error',
          });
          frappe.utils.play_sound('error');
          return;
        }

        if (
          this.pos_profile.posa_allow_partial_payment &&
          !this.pos_profile.posa_allow_credit_sale &&
          this.total_payments == 0
        ) {
          evntBus.$emit('show_mesage', {
            text: "Please enter the amount paid",
            color: 'error',
          });
          frappe.utils.play_sound('error');
          return;
        }

        if (!this.paid_change) { this.paid_change = 0; }

        if (this.paid_change > -this.diff_payment) {
          evntBus.$emit('show_mesage', {
            text: "Paid change can not be greater than total change!",
            color: 'error',
          });
          frappe.utils.play_sound('error');
          return;
        }

        var total_change = flt(flt(this.paid_change) + flt(-this.credit_change));

        if (this.is_cashback && total_change != -this.diff_payment) {
          evntBus.$emit('show_mesage', {
            text: "Error in change calculations!",
            color: 'error',
          });
          frappe.utils.play_sound('error');
          return;
        }

        var credit_calc_check = this.customer_credit_dict.filter(function (row) {
          if (row.credit_to_redeem)
            { return row.credit_to_redeem > row.total_credit; }
          else { return false; }
        });

        if (credit_calc_check.length > 0) {
          evntBus.$emit('show_mesage', {
            text: "redeamed credit can not greater than its total.",
            color: 'error',
          });
          frappe.utils.play_sound('error');
          return;
        }

        if (
          !this.invoice_doc.is_return &&
          this.redeemed_customer_credit > this.invoice_doc.grand_total
        ) {
          evntBus.$emit('show_mesage', {
            text: "can not redeam customer credit more than invoice total",
            color: 'error',
          });
          frappe.utils.play_sound('error');
          return;
        }
        this.submit_invoice();
        this.customer_credit_dict = [];
        this.redeem_customer_credit = false;
        this.is_cashback = true;

        evntBus.$emit('new_invoice', 'false');
        this.back_to_invoice();
        
        
      },
      submit_invoice: function submit_invoice() {
        var data = {};
        data['total_change'] = -this.diff_payment;
        data['paid_change'] = this.paid_change;
        data['credit_change'] = -this.credit_change;
        data['redeemed_customer_credit'] = this.redeemed_customer_credit;
        data['customer_credit_dict'] = this.customer_credit_dict;
        data['is_cashback'] = this.is_cashback;
        var vm = this;
        frappe.call({
          method: 'posawesome.posawesome.api.posapp.submit_invoice',
          args: {
            data: data,
            invoice: this.invoice_doc,
          },
          async: true,
          callback: function (r) {
            if (r.message) {
              vm.load_print_page();
              evntBus.$emit('set_last_invoice', vm.invoice_doc.name);
              evntBus.$emit('show_mesage', {
                text: ("Invoice " + (r.message.name) + " is Submited"),
                color: 'success',
              });
              frappe.utils.play_sound('submit');
              this.addresses = [];
            }
          },
        });
      },
      set_full_amount: function set_full_amount(idx) {
        var this$1 = this;

        this.invoice_doc.payments.forEach(function (payment) {
          payment.amount = payment.idx == idx ? this$1.invoice_doc.grand_total : 0;
        });
      },
      set_rest_amount: function set_rest_amount(idx) {
        var this$1 = this;

        this.invoice_doc.payments.forEach(function (payment) {
          if (
            payment.idx == idx &&
            payment.amount == 0 &&
            this$1.diff_payment > 0
          ) {
            payment.amount = this$1.diff_payment;
          }
        });
      },
      clear_all_amounts: function clear_all_amounts() {
        this.invoice_doc.payments.forEach(function (payment) {
          payment.amount = 0;
        });
      },
      load_print_page: function load_print_page() {
        var print_format =
          this.pos_profile.print_format_for_online ||
          this.pos_profile.print_format;
        var letter_head = this.pos_profile.letter_head || 0;
        var url =
          frappe.urllib.get_base_url() +
          '/printview?doctype=Sales%20Invoice&name=' +
          this.invoice_doc.name +
          '&trigger_print=1' +
          '&format=' +
          print_format +
          '&no_letterhead=' +
          letter_head;
        var printWindow = window.open(url, 'Print');
        printWindow.addEventListener(
          'load',
          function () {
            printWindow.print();
            // printWindow.close();
            // NOTE : uncomoent this to auto closing printing window
          },
          true
        );
      },
      validate_due_date: function validate_due_date() {
        var this$1 = this;

        var today = frappe.datetime.now_date();
        var parse_today = Date.parse(today);
        var new_date = Date.parse(this.invoice_doc.due_date);
        if (new_date < parse_today) {
          setTimeout(function () {
            this$1.invoice_doc.due_date = today;
          }, 0);
        }
      },
      formtCurrency: function formtCurrency(value) {
        value = parseFloat(value);
        return value.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
      },
      shortPay: function shortPay(e) {
        if (e.key === 'x' && (e.ctrlKey || e.metaKey)) {
          e.preventDefault();
          this.submit();
        }
      },
      set_paid_change: function set_paid_change() {
        if (!this.paid_change) { this.paid_change = 0; }

        this.paid_change_rules = [];
        var change = -this.diff_payment;
        if (this.paid_change > change) {
          this.paid_change_rules = [
            'Paid change can not be greater than total change!' ];
          this.credit_change = 0;
        }
      },
      get_available_credit: function get_available_credit(e) {
        var this$1 = this;

        this.clear_all_amounts();
        if (e) {
          frappe
            .call('posawesome.posawesome.api.posapp.get_available_credit', {
              customer: this.invoice_doc.customer,
              company: this.pos_profile.company,
            })
            .then(function (r) {
              var data = r.message;
              if (data.length) {
                this$1.customer_credit_dict = data;
              } else {
                this$1.customer_credit_dict = [];
              }
            });
        } else {
          this.customer_credit_dict = [];
        }
      },
      get_addresses: function get_addresses() {
        var vm = this;
        if (!vm.invoice_doc) {
          return;
        }
        frappe.call({
          method: 'posawesome.posawesome.api.posapp.get_customer_addresses',
          args: { customer: vm.invoice_doc.customer },
          async: true,
          callback: function (r) {
            if (!r.exc) {
              vm.addresses = r.message;
            } else {
              vm.addresses = [];
            }
          },
        });
      },
      addressFilter: function addressFilter(item, queryText, itemText) {
        var textOne = item.address_title
          ? item.address_title.toLowerCase()
          : '';
        var textTwo = item.address_line1
          ? item.address_line1.toLowerCase()
          : '';
        var textThree = item.address_line2
          ? item.address_line2.toLowerCase()
          : '';
        var textFour = item.city ? item.city.toLowerCase() : '';
        var textFifth = item.name.toLowerCase();
        var searchText = queryText.toLowerCase();
        return (
          textOne.indexOf(searchText) > -1 ||
          textTwo.indexOf(searchText) > -1 ||
          textThree.indexOf(searchText) > -1 ||
          textFour.indexOf(searchText) > -1 ||
          textFifth.indexOf(searchText) > -1
        );
      },
      new_address: function new_address() {
        evntBus.$emit('open_new_address', this.invoice_doc.customer);
      },
      request_payment: function request_payment() {
        this.phone_dialog = false;
        var vm = this;
        if (!this.invoice_doc.contact_mobile) {
          evntBus.$emit('show_mesage', {
            text: __("Pleas Set Customer Mobile Number"),
            color: 'error',
          });
          evntBus.$emit('open_edit_customer');
          this.back_to_invoice();
          return;
        }
        evntBus.$emit('freeze', {
          title: __("Waiting for payment... "),
        });

        var formData = this.invoice_doc;
        formData['total_change'] = -this.diff_payment;
        formData['paid_change'] = this.paid_change;
        formData['credit_change'] = -this.credit_change;
        formData['redeemed_customer_credit'] = this.redeemed_customer_credit;
        formData['customer_credit_dict'] = this.customer_credit_dict;
        formData['is_cashback'] = this.is_cashback;

        frappe
          .call({
            method: 'posawesome.posawesome.api.posapp.update_invoice',
            args: {
              data: formData,
            },
            async: false,
            callback: function (r) {
              if (r.message) {
                vm.invoice_doc = r.message;
              }
            },
          })
          .then(function () {
            frappe
              .call({
                method: 'posawesome.posawesome.api.posapp.create_payment_request',
                args: {
                  doc: vm.invoice_doc,
                },
              })
              .fail(function () {
                evntBus.$emit('unfreeze');
                evntBus.$emit('show_mesage', {
                  text: __("Payment request failed"),
                  color: 'error',
                });
              })
              .then(function (ref) {
                var message = ref.message;

                var payment_request_name = message.name;
                setTimeout(function () {
                  frappe.db
                    .get_value('Payment Request', payment_request_name, [
                      'status',
                      'grand_total' ])
                    .then(function (ref) {
                      var message = ref.message;

                      if (message.status != 'Paid') {
                        evntBus.$emit('unfreeze');
                        evntBus.$emit('show_mesage', {
                          text: __(
                            "Payment Request took too long to respond. Please try requesting for payment again"
                          ),
                          color: 'error',
                        });
                      } else {
                        evntBus.$emit('unfreeze');
                        evntBus.$emit('show_mesage', {
                          text: __('Payment of {0} received successfully.', [
                            format_currency(
                              message.grand_total,
                              vm.invoice_doc.currency,
                              0
                            ) ]),
                          color: 'success',
                        });
                        frappe.db
                          .get_doc('Sales Invoice', vm.invoice_doc.name)
                          .then(function (doc) {
                            vm.invoice_doc = doc;
                            vm.submit();
                          });
                      }
                    });
                }, 30000);
              });
          });
      },
      get_mpesa_modes: function get_mpesa_modes() {
        var vm = this;
        frappe.call({
          method: 'posawesome.posawesome.api.m_pesa.get_mpesa_mode_of_payment',
          args: { company: vm.pos_profile.company },
          async: true,
          callback: function (r) {
            if (!r.exc) {
              vm.mpesa_modes = r.message;
            } else {
              vm.mpesa_modes = [];
            }
          },
        });
      },
      is_mpesa_c2b_payment: function is_mpesa_c2b_payment(payment) {
        if (
          this.mpesa_modes.includes(payment.mode_of_payment) &&
          payment.type == 'Bank'
        ) {
          payment.amount = 0;
          return true;
        } else {
          return false;
        }
      },
      mpesa_c2b_dialg: function mpesa_c2b_dialg(payment) {
        var data = {
          company: this.pos_profile.company,
          mode_of_payment: payment.mode_of_payment,
          customer: this.invoice_doc.customer,
        };
        evntBus.$emit('open_mpesa_payments', data);
      },
      set_mpesa_payment: function set_mpesa_payment(payment) {
        this.pos_profile.use_customer_credit = 1;
        this.redeem_customer_credit = true;
        var advance = {
          type: 'Advance',
          credit_origin: payment.name,
          total_credit: payment.unallocated_amount,
          credit_to_redeem: payment.unallocated_amount,
        };
        this.clear_all_amounts();
        this.customer_credit_dict.push(advance);
      },
    },

    computed: {
      total_payments: function total_payments() {
        var total = parseFloat(this.invoice_doc.loyalty_amount);
        if (this.invoice_doc && this.invoice_doc.payments) {
          this.invoice_doc.payments.forEach(function (payment) {
            total += parseFloat(payment.amount);
          });
        }

        total += parseFloat(this.redeemed_customer_credit);

        if (!this.is_cashback) { total = 0; }

        return total.toFixed(2);
      },
      diff_payment: function diff_payment() {
        var diff_payment = (
          this.invoice_doc.grand_total - this.total_payments
        ).toFixed(2);
        this.paid_change = -diff_payment;
        return diff_payment;
      },
      credit_change: function credit_change() {
        var change = -this.diff_payment;
        if (this.paid_change > change) { return 0; }
        return (this.paid_change - change).toFixed(2);
      },
      diff_lable: function diff_lable() {
        var lable = this.diff_payment < 0 ? 'Change' : 'To Be Paid';
        return lable;
      },
      available_pioints_amount: function available_pioints_amount() {
        var amount = 0;
        if (this.customer_info.loyalty_points) {
          amount =
            this.customer_info.loyalty_points *
            this.customer_info.conversion_factor;
        }
        return amount;
      },
      available_customer_credit: function available_customer_credit() {
        var total = 0;
        this.customer_credit_dict.map(function (row) {
          total += row.total_credit;
        });

        return total;
      },
      redeemed_customer_credit: function redeemed_customer_credit() {
        var total = 0;
        this.customer_credit_dict.map(function (row) {
          if (row.credit_to_redeem) { total += parseFloat(row.credit_to_redeem); }
          else { row.credit_to_redeem = 0; }
        });

        return total;
      },
      vaildatPayment: function vaildatPayment() {
        if (this.pos_profile.posa_allow_sales_order) {
          if (
            this.invoiceType == 'Order' &&
            !this.invoice_doc.posa_delivery_date
          ) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      },
      request_payment_field: function request_payment_field() {
        var res = false;
        if (!this.pos_settings || this.pos_settings.invoice_fields.length == 0) {
          res = false;
        } else {
          this.pos_settings.invoice_fields.forEach(function (el) {
            if (
              el.fieldtype == 'Button' &&
              el.fieldname == 'request_for_payment'
            ) {
              res = true;
            }
          });
        }
        return res;
      },
    },

    created: function () {
      var this$1 = this;

      this.$nextTick(function () {
        var this$1 = this;

        evntBus.$on('send_invoice_doc_payment', function (invoice_doc) {
          this$1.invoice_doc = invoice_doc;
          var default_payment = this$1.invoice_doc.payments.find(
            function (payment) { return payment.default == 1; }
          );
          this$1.is_credit_sale = 0;
          this$1.is_write_off_change = 0;
          if (default_payment) {
            default_payment.amount = invoice_doc.grand_total.toFixed(2);
          }
          this$1.loyalty_amount = 0;
          this$1.get_addresses();
        });
        evntBus.$on('register_pos_profile', function (data) {
          this$1.pos_profile = data.pos_profile;
          this$1.get_mpesa_modes();
        });
        evntBus.$on('add_the_new_address', function (data) {
          this$1.addresses.push(data);
          this$1.$forceUpdate();
        });
        evntBus.$on('update_invoice_type', function (data) {
          this$1.invoiceType = data;
          if (this$1.invoice_doc && data != 'Order') {
            this$1.invoice_doc.posa_delivery_date = null;
            this$1.invoice_doc.posa_notes = null;
            this$1.invoice_doc.shipping_address_name = null;
          }
        });
      });
      evntBus.$on('update_customer', function (customer) {
        if (this$1.customer != customer) {
          this$1.customer_credit_dict = [];
          this$1.redeem_customer_credit = false;
          this$1.is_cashback = true;
        }
      });
      evntBus.$on('set_pos_settings', function (data) {
        this$1.pos_settings = data;
      });
      evntBus.$on('set_customer_info_to_edit', function (data) {
        this$1.customer_info = data;
      });
      evntBus.$on('set_mpesa_payment', function (data) {
        this$1.set_mpesa_payment(data);
      });
      document.addEventListener('keydown', this.shortPay.bind(this));
    },

    destroyed: function destroyed() {
      document.removeEventListener('keydown', this.shortPay);
    },

    watch: {
      loyalty_amount: function loyalty_amount(value) {
        if (value > this.available_pioints_amount) {
          this.invoice_doc.loyalty_amount = 0;
          this.invoice_doc.redeem_loyalty_points = 0;
          this.invoice_doc.loyalty_points = 0;
          evntBus.$emit('show_mesage', {
            text: ("Loyalty Amount can not be more then " + (this.available_pioints_amount)),
            color: 'error',
          });
        } else {
          this.invoice_doc.loyalty_amount = flt(this.loyalty_amount);
          this.invoice_doc.redeem_loyalty_points = 1;
          this.invoice_doc.loyalty_points =
            flt(this.loyalty_amount) * this.customer_info.conversion_factor;
        }
      },
      is_credit_sale: function is_credit_sale(value) {
        if (value == 1) {
          this.invoice_doc.payments.forEach(function (payment) {
            payment.amount = 0;
            payment.base_amount = 0;
          });
        }
      },
      is_write_off_change: function is_write_off_change(value) {
        if (value == 1) {
          this.invoice_doc.write_off_amount = this.diff_payment;
          this.invoice_doc.write_off_outstanding_amount_automatically = 1;
        } else {
          this.invoice_doc.write_off_amount = 0;
          this.invoice_doc.write_off_outstanding_amount_automatically = 0;
        }
      },
      redeemed_customer_credit: function redeemed_customer_credit(value) {
        if (value > this.available_customer_credit) {
          evntBus.$emit('show_mesage', {
            text: ("You can redeem customer credit upto " + (this.available_customer_credit)),
            color: 'error',
          });
        }
      },
    },
  };

  /* script */
              var __vue_script__$5 = script$5;
              
  /* template */
  var __vue_render__$5 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      [
        _c(
          "v-card",
          {
            staticClass: "selection mx-auto grey lighten-5 pa-1",
            staticStyle: { "max-height": "76vh", height: "76vh" }
          },
          [
            _c("v-progress-linear", {
              attrs: {
                active: _vm.loading,
                indeterminate: _vm.loading,
                absolute: "",
                top: "",
                color: "deep-purple accent-4"
              }
            }),
            _vm._v(" "),
            _c(
              "div",
              {
                staticClass: "overflow-y-auto px-2 pt-2",
                staticStyle: { "max-height": "75vh" }
              },
              [
                _vm.invoice_doc
                  ? _c(
                      "v-row",
                      { staticClass: "px-1 py-0" },
                      [
                        _c(
                          "v-col",
                          { attrs: { cols: "7" } },
                          [
                            _c("v-text-field", {
                              attrs: {
                                outlined: "",
                                color: "indigo",
                                label: _vm.frappe._("Paid Amount"),
                                "background-color": "white",
                                "hide-details": "",
                                value: _vm.formtCurrency(_vm.total_payments),
                                readonly: "",
                                prefix: _vm.invoice_doc.currency,
                                dense: ""
                              }
                            })
                          ],
                          1
                        ),
                        _vm._v(" "),
                        _c(
                          "v-col",
                          { attrs: { cols: "5" } },
                          [
                            _c("v-text-field", {
                              attrs: {
                                outlined: "",
                                color: "indigo",
                                label: _vm.frappe._(_vm.diff_lable),
                                "background-color": "white",
                                "hide-details": "",
                                value: _vm.formtCurrency(_vm.diff_payment),
                                disabled: "",
                                prefix: _vm.invoice_doc.currency,
                                dense: ""
                              }
                            })
                          ],
                          1
                        ),
                        _vm._v(" "),
                        _vm.diff_payment < 0 && !_vm.invoice_doc.is_return
                          ? _c(
                              "v-col",
                              { attrs: { cols: "7" } },
                              [
                                _c("v-text-field", {
                                  attrs: {
                                    outlined: "",
                                    color: "indigo",
                                    label: _vm.frappe._("Paid Change"),
                                    "background-color": "white",
                                    prefix: _vm.invoice_doc.currency,
                                    rules: _vm.paid_change_rules,
                                    dense: "",
                                    type: "number"
                                  },
                                  on: {
                                    input: function($event) {
                                      return _vm.set_paid_change()
                                    }
                                  },
                                  model: {
                                    value: _vm.paid_change,
                                    callback: function($$v) {
                                      _vm.paid_change = $$v;
                                    },
                                    expression: "paid_change"
                                  }
                                })
                              ],
                              1
                            )
                          : _vm._e(),
                        _vm._v(" "),
                        _vm.diff_payment < 0 && !_vm.invoice_doc.is_return
                          ? _c(
                              "v-col",
                              { attrs: { cols: "5" } },
                              [
                                _c("v-text-field", {
                                  attrs: {
                                    outlined: "",
                                    color: "indigo",
                                    label: _vm.frappe._("Credit Change"),
                                    "background-color": "white",
                                    "hide-details": "",
                                    value: _vm.formtCurrency(_vm.credit_change),
                                    disabled: "",
                                    prefix: _vm.invoice_doc.currency,
                                    dense: ""
                                  }
                                })
                              ],
                              1
                            )
                          : _vm._e()
                      ],
                      1
                    )
                  : _vm._e(),
                _vm._v(" "),
                _c("v-divider"),
                _vm._v(" "),
                _vm.is_cashback
                  ? _c(
                      "div",
                      _vm._l(_vm.invoice_doc.payments, function(payment) {
                        return _c(
                          "v-row",
                          { key: payment.name, staticClass: "pyments px-1 py-0" },
                          [
                            !_vm.is_mpesa_c2b_payment(payment)
                              ? _c(
                                  "v-col",
                                  { attrs: { cols: "6" } },
                                  [
                                    _c("v-text-field", {
                                      attrs: {
                                        dense: "",
                                        outlined: "",
                                        color: "indigo",
                                        label: _vm.frappe._(
                                          payment.mode_of_payment
                                        ),
                                        "background-color": "white",
                                        "hide-details": "",
                                        type: "number",
                                        prefix: _vm.invoice_doc.currency,
                                        readonly: _vm.invoice_doc.is_return
                                          ? true
                                          : false
                                      },
                                      on: {
                                        focus: function($event) {
                                          return _vm.set_rest_amount(payment.idx)
                                        }
                                      },
                                      model: {
                                        value: payment.amount,
                                        callback: function($$v) {
                                          _vm.$set(payment, "amount", $$v);
                                        },
                                        expression: "payment.amount"
                                      }
                                    })
                                  ],
                                  1
                                )
                              : _vm._e(),
                            _vm._v(" "),
                            !_vm.is_mpesa_c2b_payment(payment)
                              ? _c(
                                  "v-col",
                                  {
                                    attrs: {
                                      cols: (payment.type != "Phone" ||
                                            payment.amount == 0 ||
                                            !_vm.request_payment_field) &&
                                          !_vm.is_mpesa_c2b_payment(payment)
                                    }
                                  },
                                  [
                                    _c(
                                      "v-btn",
                                      {
                                        attrs: {
                                          block: "",
                                          color: "primary",
                                          dark: ""
                                        },
                                        on: {
                                          click: function($event) {
                                            return _vm.set_full_amount(
                                              payment.idx
                                            )
                                          }
                                        }
                                      },
                                      [_vm._v(_vm._s(payment.mode_of_payment))]
                                    )
                                  ],
                                  1
                                )
                              : _vm._e(),
                            _vm._v(" "),
                            _vm.is_mpesa_c2b_payment(payment)
                              ? _c(
                                  "v-col",
                                  { staticClass: "pl-3", attrs: { cols: 12 } },
                                  [
                                    _c(
                                      "v-btn",
                                      {
                                        attrs: {
                                          block: "",
                                          color: "success",
                                          dark: ""
                                        },
                                        on: {
                                          click: function($event) {
                                            return _vm.mpesa_c2b_dialg(payment)
                                          }
                                        }
                                      },
                                      [
                                        _vm._v(
                                          "\n              " +
                                            _vm._s(
                                              _vm.__(
                                                "Get Payments " +
                                                  payment.mode_of_payment
                                              )
                                            ) +
                                            "\n            "
                                        )
                                      ]
                                    )
                                  ],
                                  1
                                )
                              : _vm._e(),
                            _vm._v(" "),
                            payment.type == "Phone" &&
                            payment.amount > 0 &&
                            _vm.request_payment_field
                              ? _c(
                                  "v-col",
                                  { staticClass: "pl-1", attrs: { cols: 3 } },
                                  [
                                    _c(
                                      "v-btn",
                                      {
                                        attrs: {
                                          block: "",
                                          color: "success",
                                          dark: "",
                                          disabled: payment.amount == 0
                                        },
                                        on: {
                                          click: function($event) {
                                            _vm.phone_dialog = true;
                                          }
                                        }
                                      },
                                      [
                                        _vm._v(
                                          "\n              " +
                                            _vm._s(_vm.__("Request")) +
                                            "\n            "
                                        )
                                      ]
                                    )
                                  ],
                                  1
                                )
                              : _vm._e()
                          ],
                          1
                        )
                      }),
                      1
                    )
                  : _vm._e(),
                _vm._v(" "),
                _vm.invoice_doc &&
                _vm.available_pioints_amount > 0 &&
                !_vm.invoice_doc.is_return
                  ? _c(
                      "v-row",
                      { staticClass: "pyments px-1 py-0" },
                      [
                        _c(
                          "v-col",
                          { attrs: { cols: "7" } },
                          [
                            _c("v-text-field", {
                              attrs: {
                                dense: "",
                                outlined: "",
                                color: "indigo",
                                label: _vm.frappe._("Redeem Loyalty Points"),
                                "background-color": "white",
                                "hide-details": "",
                                type: "number",
                                prefix: _vm.invoice_doc.currency
                              },
                              model: {
                                value: _vm.loyalty_amount,
                                callback: function($$v) {
                                  _vm.loyalty_amount = $$v;
                                },
                                expression: "loyalty_amount"
                              }
                            })
                          ],
                          1
                        ),
                        _vm._v(" "),
                        _c(
                          "v-col",
                          { attrs: { cols: "5" } },
                          [
                            _c("v-text-field", {
                              attrs: {
                                dense: "",
                                outlined: "",
                                color: "indigo",
                                label: _vm.frappe._("You can redeem upto"),
                                "background-color": "white",
                                "hide-details": "",
                                value: _vm.formtCurrency(
                                  _vm.available_pioints_amount
                                ),
                                prefix: _vm.invoice_doc.currency,
                                disabled: ""
                              }
                            })
                          ],
                          1
                        )
                      ],
                      1
                    )
                  : _vm._e(),
                _vm._v(" "),
                _vm.invoice_doc &&
                _vm.available_customer_credit > 0 &&
                !_vm.invoice_doc.is_return &&
                _vm.redeem_customer_credit
                  ? _c(
                      "v-row",
                      { staticClass: "pyments px-1 py-0" },
                      [
                        _c(
                          "v-col",
                          { attrs: { cols: "7" } },
                          [
                            _c("v-text-field", {
                              attrs: {
                                dense: "",
                                outlined: "",
                                disabled: "",
                                color: "indigo",
                                label: _vm.frappe._("Redeemed Customer Credit"),
                                "background-color": "white",
                                "hide-details": "",
                                type: "number",
                                prefix: _vm.invoice_doc.currency
                              },
                              model: {
                                value: _vm.redeemed_customer_credit,
                                callback: function($$v) {
                                  _vm.redeemed_customer_credit = $$v;
                                },
                                expression: "redeemed_customer_credit"
                              }
                            })
                          ],
                          1
                        ),
                        _vm._v(" "),
                        _c(
                          "v-col",
                          { attrs: { cols: "5" } },
                          [
                            _c("v-text-field", {
                              attrs: {
                                dense: "",
                                outlined: "",
                                color: "indigo",
                                label: _vm.frappe._("You can redeem credit upto"),
                                "background-color": "white",
                                "hide-details": "",
                                value: _vm.formtCurrency(
                                  _vm.available_customer_credit
                                ),
                                prefix: _vm.invoice_doc.currency,
                                disabled: ""
                              }
                            })
                          ],
                          1
                        )
                      ],
                      1
                    )
                  : _vm._e(),
                _vm._v(" "),
                _c("v-divider"),
                _vm._v(" "),
                _c(
                  "v-row",
                  { staticClass: "px-1 py-0" },
                  [
                    _c(
                      "v-col",
                      { attrs: { cols: "6" } },
                      [
                        _c("v-text-field", {
                          attrs: {
                            dense: "",
                            outlined: "",
                            color: "indigo",
                            label: _vm.frappe._("Net Total"),
                            "background-color": "white",
                            "hide-details": "",
                            value: _vm.formtCurrency(_vm.invoice_doc.net_total),
                            disabled: "",
                            prefix: _vm.invoice_doc.currency
                          }
                        })
                      ],
                      1
                    ),
                    _vm._v(" "),
                    _c(
                      "v-col",
                      { attrs: { cols: "6" } },
                      [
                        _c("v-text-field", {
                          attrs: {
                            dense: "",
                            outlined: "",
                            color: "indigo",
                            label: _vm.frappe._("Tax and Charges"),
                            "background-color": "white",
                            "hide-details": "",
                            value: _vm.formtCurrency(
                              _vm.invoice_doc.total_taxes_and_charges
                            ),
                            disabled: "",
                            prefix: _vm.invoice_doc.currency
                          }
                        })
                      ],
                      1
                    ),
                    _vm._v(" "),
                    _c(
                      "v-col",
                      { attrs: { cols: "6" } },
                      [
                        _c("v-text-field", {
                          attrs: {
                            dense: "",
                            outlined: "",
                            color: "indigo",
                            label: _vm.frappe._("Total Amount"),
                            "background-color": "white",
                            "hide-details": "",
                            value: _vm.formtCurrency(_vm.invoice_doc.total),
                            disabled: "",
                            prefix: _vm.invoice_doc.currency
                          }
                        })
                      ],
                      1
                    ),
                    _vm._v(" "),
                    _c(
                      "v-col",
                      { attrs: { cols: "6" } },
                      [
                        _c("v-text-field", {
                          attrs: {
                            dense: "",
                            outlined: "",
                            color: "indigo",
                            label: _vm.frappe._("Discount Amount"),
                            "background-color": "white",
                            "hide-details": "",
                            value: _vm.formtCurrency(
                              _vm.invoice_doc.discount_amount
                            ),
                            disabled: "",
                            prefix: _vm.invoice_doc.currency
                          }
                        })
                      ],
                      1
                    ),
                    _vm._v(" "),
                    _c(
                      "v-col",
                      { attrs: { cols: "6" } },
                      [
                        _c("v-text-field", {
                          attrs: {
                            dense: "",
                            outlined: "",
                            color: "indigo",
                            label: _vm.frappe._("Grand Total"),
                            "background-color": "white",
                            "hide-details": "",
                            value: _vm.formtCurrency(_vm.invoice_doc.grand_total),
                            disabled: "",
                            prefix: _vm.invoice_doc.currency
                          }
                        })
                      ],
                      1
                    ),
                    _vm._v(" "),
                    _vm.pos_profile.posa_allow_sales_order &&
                    _vm.invoiceType == "Order"
                      ? _c(
                          "v-col",
                          { attrs: { cols: "6" } },
                          [
                            _c(
                              "v-menu",
                              {
                                ref: "order_delivery_date",
                                attrs: {
                                  "close-on-content-click": false,
                                  transition: "scale-transition",
                                  dense: ""
                                },
                                scopedSlots: _vm._u(
                                  [
                                    {
                                      key: "activator",
                                      fn: function(ref) {
                                        var on = ref.on;
                                        var attrs = ref.attrs;
                                        return [
                                          _c(
                                            "v-text-field",
                                            _vm._g(
                                              _vm._b(
                                                {
                                                  attrs: {
                                                    label: _vm.frappe._(
                                                      "Delivery Date"
                                                    ),
                                                    readonly: "",
                                                    outlined: "",
                                                    dense: "",
                                                    "background-color": "white",
                                                    clearable: "",
                                                    color: "indigo",
                                                    "hide-details": ""
                                                  },
                                                  model: {
                                                    value:
                                                      _vm.invoice_doc
                                                        .posa_delivery_date,
                                                    callback: function($$v) {
                                                      _vm.$set(
                                                        _vm.invoice_doc,
                                                        "posa_delivery_date",
                                                        $$v
                                                      );
                                                    },
                                                    expression:
                                                      "invoice_doc.posa_delivery_date"
                                                  }
                                                },
                                                "v-text-field",
                                                attrs,
                                                false
                                              ),
                                              on
                                            )
                                          )
                                        ]
                                      }
                                    }
                                  ],
                                  null,
                                  false,
                                  2151590711
                                ),
                                model: {
                                  value: _vm.order_delivery_date,
                                  callback: function($$v) {
                                    _vm.order_delivery_date = $$v;
                                  },
                                  expression: "order_delivery_date"
                                }
                              },
                              [
                                _vm._v(" "),
                                _c("v-date-picker", {
                                  attrs: {
                                    "no-title": "",
                                    scrollable: "",
                                    color: "indigo",
                                    min: _vm.frappe.datetime.now_date()
                                  },
                                  on: {
                                    input: function($event) {
                                      _vm.order_delivery_date = false;
                                    }
                                  },
                                  model: {
                                    value: _vm.invoice_doc.posa_delivery_date,
                                    callback: function($$v) {
                                      _vm.$set(
                                        _vm.invoice_doc,
                                        "posa_delivery_date",
                                        $$v
                                      );
                                    },
                                    expression: "invoice_doc.posa_delivery_date"
                                  }
                                })
                              ],
                              1
                            )
                          ],
                          1
                        )
                      : _vm._e(),
                    _vm._v(" "),
                    _vm.invoice_doc.posa_delivery_date
                      ? _c(
                          "v-col",
                          { attrs: { cols: "12" } },
                          [
                            _c("v-autocomplete", {
                              attrs: {
                                dense: "",
                                clearable: "",
                                "auto-select-first": "",
                                outlined: "",
                                color: "indigo",
                                label: _vm.frappe._("Address"),
                                items: _vm.addresses,
                                "item-text": "address_title",
                                "item-value": "name",
                                "background-color": "white",
                                "no-data-text": "Address not found",
                                "hide-details": "",
                                filter: _vm.addressFilter,
                                "append-icon": "mdi-plus"
                              },
                              on: { "click:append": _vm.new_address },
                              scopedSlots: _vm._u(
                                [
                                  {
                                    key: "item",
                                    fn: function(data) {
                                      return [
                                        [
                                          _c(
                                            "v-list-item-content",
                                            [
                                              _c("v-list-item-title", {
                                                staticClass:
                                                  "indigo--text subtitle-1",
                                                domProps: {
                                                  innerHTML: _vm._s(
                                                    data.item.address_title
                                                  )
                                                }
                                              }),
                                              _vm._v(" "),
                                              _c("v-list-item-title", {
                                                domProps: {
                                                  innerHTML: _vm._s(
                                                    data.item.address_line1
                                                  )
                                                }
                                              }),
                                              _vm._v(" "),
                                              data.item.custoaddress_line2mer_name
                                                ? _c("v-list-item-subtitle", {
                                                    domProps: {
                                                      innerHTML: _vm._s(
                                                        data.item.address_line2
                                                      )
                                                    }
                                                  })
                                                : _vm._e(),
                                              _vm._v(" "),
                                              data.item.city
                                                ? _c("v-list-item-subtitle", {
                                                    domProps: {
                                                      innerHTML: _vm._s(
                                                        data.item.city
                                                      )
                                                    }
                                                  })
                                                : _vm._e(),
                                              _vm._v(" "),
                                              data.item.state
                                                ? _c("v-list-item-subtitle", {
                                                    domProps: {
                                                      innerHTML: _vm._s(
                                                        data.item.state
                                                      )
                                                    }
                                                  })
                                                : _vm._e(),
                                              _vm._v(" "),
                                              data.item.country
                                                ? _c("v-list-item-subtitle", {
                                                    domProps: {
                                                      innerHTML: _vm._s(
                                                        data.item.mobile_no
                                                      )
                                                    }
                                                  })
                                                : _vm._e(),
                                              _vm._v(" "),
                                              data.item.address_type
                                                ? _c("v-list-item-subtitle", {
                                                    domProps: {
                                                      innerHTML: _vm._s(
                                                        data.item.address_type
                                                      )
                                                    }
                                                  })
                                                : _vm._e()
                                            ],
                                            1
                                          )
                                        ]
                                      ]
                                    }
                                  }
                                ],
                                null,
                                false,
                                2950595207
                              ),
                              model: {
                                value: _vm.invoice_doc.shipping_address_name,
                                callback: function($$v) {
                                  _vm.$set(
                                    _vm.invoice_doc,
                                    "shipping_address_name",
                                    $$v
                                  );
                                },
                                expression: "invoice_doc.shipping_address_name"
                              }
                            })
                          ],
                          1
                        )
                      : _vm._e(),
                    _vm._v(" "),
                    _vm.pos_profile.posa_display_additional_notes
                      ? _c(
                          "v-col",
                          { attrs: { cols: "12" } },
                          [
                            _c("v-textarea", {
                              staticClass: "pa-0",
                              attrs: {
                                outlined: "",
                                dense: "",
                                "background-color": "white",
                                clearable: "",
                                color: "indigo",
                                "auto-grow": "",
                                rows: "2",
                                label: _vm.frappe._("Additional Notes"),
                                value: _vm.invoice_doc.posa_notes
                              },
                              model: {
                                value: _vm.invoice_doc.posa_notes,
                                callback: function($$v) {
                                  _vm.$set(_vm.invoice_doc, "posa_notes", $$v);
                                },
                                expression: "invoice_doc.posa_notes"
                              }
                            })
                          ],
                          1
                        )
                      : _vm._e()
                  ],
                  1
                ),
                _vm._v(" "),
                _vm.pos_profile.posa_allow_customer_purchase_order
                  ? _c(
                      "div",
                      [
                        _c("v-divider"),
                        _vm._v(" "),
                        _c(
                          "v-row",
                          {
                            staticClass: "px-1 py-0",
                            attrs: { justify: "center", align: "start" }
                          },
                          [
                            _c(
                              "v-col",
                              { attrs: { cols: "6" } },
                              [
                                _c("v-text-field", {
                                  attrs: {
                                    label: _vm.frappe._("Purchase Order"),
                                    outlined: "",
                                    dense: "",
                                    "background-color": "white",
                                    clearable: "",
                                    color: "indigo",
                                    "hide-details": ""
                                  },
                                  model: {
                                    value: _vm.invoice_doc.po_no,
                                    callback: function($$v) {
                                      _vm.$set(_vm.invoice_doc, "po_no", $$v);
                                    },
                                    expression: "invoice_doc.po_no"
                                  }
                                })
                              ],
                              1
                            ),
                            _vm._v(" "),
                            _c(
                              "v-col",
                              { attrs: { cols: "6" } },
                              [
                                _c(
                                  "v-menu",
                                  {
                                    ref: "po_date_menu",
                                    attrs: {
                                      "close-on-content-click": false,
                                      transition: "scale-transition"
                                    },
                                    scopedSlots: _vm._u(
                                      [
                                        {
                                          key: "activator",
                                          fn: function(ref) {
                                            var on = ref.on;
                                            var attrs = ref.attrs;
                                            return [
                                              _c(
                                                "v-text-field",
                                                _vm._g(
                                                  _vm._b(
                                                    {
                                                      attrs: {
                                                        label: _vm.frappe._(
                                                          "Purchase Order Date"
                                                        ),
                                                        readonly: "",
                                                        outlined: "",
                                                        dense: "",
                                                        "hide-details": "",
                                                        color: "indigo"
                                                      },
                                                      model: {
                                                        value:
                                                          _vm.invoice_doc.po_date,
                                                        callback: function($$v) {
                                                          _vm.$set(
                                                            _vm.invoice_doc,
                                                            "po_date",
                                                            $$v
                                                          );
                                                        },
                                                        expression:
                                                          "invoice_doc.po_date"
                                                      }
                                                    },
                                                    "v-text-field",
                                                    attrs,
                                                    false
                                                  ),
                                                  on
                                                )
                                              )
                                            ]
                                          }
                                        }
                                      ],
                                      null,
                                      false,
                                      3403780053
                                    ),
                                    model: {
                                      value: _vm.po_date_menu,
                                      callback: function($$v) {
                                        _vm.po_date_menu = $$v;
                                      },
                                      expression: "po_date_menu"
                                    }
                                  },
                                  [
                                    _vm._v(" "),
                                    _c("v-date-picker", {
                                      attrs: {
                                        "no-title": "",
                                        scrollable: "",
                                        color: "indigo"
                                      },
                                      on: {
                                        input: function($event) {
                                          _vm.po_date_menu = false;
                                        }
                                      },
                                      model: {
                                        value: _vm.invoice_doc.po_date,
                                        callback: function($$v) {
                                          _vm.$set(
                                            _vm.invoice_doc,
                                            "po_date",
                                            $$v
                                          );
                                        },
                                        expression: "invoice_doc.po_date"
                                      }
                                    })
                                  ],
                                  1
                                )
                              ],
                              1
                            )
                          ],
                          1
                        )
                      ],
                      1
                    )
                  : _vm._e(),
                _vm._v(" "),
                _c("v-divider"),
                _vm._v(" "),
                _c(
                  "v-row",
                  {
                    staticClass: "px-1 py-0",
                    attrs: { align: "start", "no-gutters": "" }
                  },
                  [
                    feed_cond 
                   ?_c(
                    "v-col",
                    { attrs: { cols: "6" } },
                    [
                      _c("v-switch", {
                        staticClass: "my-0 py-0",
                        attrs: {
                          flat: "",
                          label: _vm.frappe._("Is Feedback Required")
                        },
                        model: {
                          value: is_feedback_required,
                          callback: function($$v) {
                            is_feedback_required = 1-is_feedback_required
                            frappe.db.set_value("Customer",customer,'feedback_required',is_feedback_required)
                          },
                          expression: "is_feedback_required"
                        }
                      })
                    ],
                    1
                  ):_vm._e(),                
              _vm._v(" "),
                    _vm.pos_profile.posa_allow_write_off_change &&
                    _vm.diff_payment > 0 &&
                    !_vm.invoice_doc.is_return
                      ? _c(
                          "v-col",
                          { attrs: { cols: "6" } },
                          [
                            _c("v-switch", {
                              staticClass: "my-0 py-0",
                              attrs: {
                                flat: "",
                                label: _vm.frappe._("Write Off Difference Amount")
                              },
                              model: {
                                value: _vm.is_write_off_change,
                                callback: function($$v) {
                                  _vm.is_write_off_change = $$v;
                                },
                                expression: "is_write_off_change"
                              }
                            })
                          ],
                          1
                        )
                      : _vm._e(),
                      
                    _vm._v(" "),
                    _vm.pos_profile.posa_allow_credit_sale &&
                    !_vm.invoice_doc.is_return
                      ? _c(
                          "v-col",
                          { attrs: { cols: "6" } },
                          [
                            _c("v-switch", {
                              staticClass: "my-0 py-0",
                              attrs: {
                                flat: "",
                                label: _vm.frappe._("Is Credit Sale")
                              },
                              model: {
                                value: _vm.is_credit_sale,
                                callback: function($$v) {
                                  _vm.is_credit_sale = $$v;
                                },
                                expression: "is_credit_sale"
                              }
                            })
                          ],
                          1
                        )
                      : _vm._e(),
                    _vm._v(" "),
                    _vm.invoice_doc.is_return && _vm.pos_profile.use_cashback
                      ? _c(
                          "v-col",
                          { attrs: { cols: "6" } },
                          [
                            _c("v-switch", {
                              staticClass: "my-0 py-0",
                              attrs: {
                                flat: "",
                                label: _vm.frappe._("Is Cashback")
                              },
                              model: {
                                value: _vm.is_cashback,
                                callback: function($$v) {
                                  _vm.is_cashback = $$v;
                                },
                                expression: "is_cashback"
                              }
                            })
                          ],
                          1
                        )
                      : _vm._e(),
                    _vm._v(" "),
                    _vm.is_credit_sale
                      ? _c(
                          "v-col",
                          { attrs: { cols: "6" } },
                          [
                            _c(
                              "v-menu",
                              {
                                ref: "date_menu",
                                attrs: {
                                  "close-on-content-click": false,
                                  transition: "scale-transition"
                                },
                                scopedSlots: _vm._u(
                                  [
                                    {
                                      key: "activator",
                                      fn: function(ref) {
                                        var on = ref.on;
                                        var attrs = ref.attrs;
                                        return [
                                          _c(
                                            "v-text-field",
                                            _vm._g(
                                              _vm._b(
                                                {
                                                  attrs: {
                                                    label: _vm.frappe._(
                                                      "Due Date"
                                                    ),
                                                    readonly: "",
                                                    outlined: "",
                                                    dense: "",
                                                    "hide-details": "",
                                                    color: "indigo"
                                                  },
                                                  model: {
                                                    value:
                                                      _vm.invoice_doc.due_date,
                                                    callback: function($$v) {
                                                      _vm.$set(
                                                        _vm.invoice_doc,
                                                        "due_date",
                                                        $$v
                                                      );
                                                    },
                                                    expression:
                                                      "invoice_doc.due_date"
                                                  }
                                                },
                                                "v-text-field",
                                                attrs,
                                                false
                                              ),
                                              on
                                            )
                                          )
                                        ]
                                      }
                                    }
                                  ],
                                  null,
                                  false,
                                  3789313935
                                ),
                                model: {
                                  value: _vm.date_menu,
                                  callback: function($$v) {
                                    _vm.date_menu = $$v;
                                  },
                                  expression: "date_menu"
                                }
                              },
                              [
                                _vm._v(" "),
                                _c("v-date-picker", {
                                  attrs: {
                                    "no-title": "",
                                    scrollable: "",
                                    color: "indigo",
                                    min: _vm.frappe.datetime.now_date()
                                  },
                                  on: {
                                    input: function($event) {
                                      _vm.date_menu = false;
                                    }
                                  },
                                  model: {
                                    value: _vm.invoice_doc.due_date,
                                    callback: function($$v) {
                                      _vm.$set(_vm.invoice_doc, "due_date", $$v);
                                    },
                                    expression: "invoice_doc.due_date"
                                  }
                                })
                              ],
                              1
                            )
                          ],
                          1
                        )
                      : _vm._e(),
                    _vm._v(" "),
                    !_vm.invoice_doc.is_return &&
                    _vm.pos_profile.use_customer_credit
                      ? _c(
                          "v-col",
                          { attrs: { cols: "6" } },
                          [
                            _c("v-switch", {
                              staticClass: "my-0 py-0",
                              attrs: {
                                flat: "",
                                label: _vm.frappe._("Use Customer Credit")
                              },
                              on: {
                                change: function($event) {
                                  return _vm.get_available_credit($event)
                                }
                              },
                              model: {
                                value: _vm.redeem_customer_credit,
                                callback: function($$v) {
                                  _vm.redeem_customer_credit = $$v;
                                },
                                expression: "redeem_customer_credit"
                              }
                            })
                          ],
                          1
                        )
                      : _vm._e()
                  ],
                  1
                ),
                _vm._v(" "),
                _vm.invoice_doc &&
                _vm.available_customer_credit > 0 &&
                !_vm.invoice_doc.is_return &&
                _vm.redeem_customer_credit
                  ? _c(
                      "div",
                      _vm._l(_vm.customer_credit_dict, function(row, idx) {
                        return _c(
                          "v-row",
                          { key: idx },
                          [
                            _c("v-col", { attrs: { cols: "4" } }, [
                              _c("div", { staticClass: "pa-2 py-3" }, [
                                _vm._v(_vm._s(row.credit_origin))
                              ])
                            ]),
                            _vm._v(" "),
                            _c(
                              "v-col",
                              { attrs: { cols: "4" } },
                              [
                                _c("v-text-field", {
                                  attrs: {
                                    dense: "",
                                    outlined: "",
                                    color: "indigo",
                                    label: _vm.frappe._("Available Credit"),
                                    "background-color": "white",
                                    "hide-details": "",
                                    value: _vm.formtCurrency(row.total_credit),
                                    disabled: "",
                                    prefix: _vm.invoice_doc.currency
                                  }
                                })
                              ],
                              1
                            ),
                            _vm._v(" "),
                            _c(
                              "v-col",
                              { attrs: { cols: "4" } },
                              [
                                _c("v-text-field", {
                                  attrs: {
                                    dense: "",
                                    outlined: "",
                                    color: "indigo",
                                    label: _vm.frappe._("Redeem Credit"),
                                    "background-color": "white",
                                    "hide-details": "",
                                    type: "number",
                                    prefix: _vm.invoice_doc.currency
                                  },
                                  model: {
                                    value: row.credit_to_redeem,
                                    callback: function($$v) {
                                      _vm.$set(row, "credit_to_redeem", $$v);
                                    },
                                    expression: "row.credit_to_redeem"
                                  }
                                })
                              ],
                              1
                            )
                          ],
                          1
                        )
                      }),
                      1
                    )
                  : _vm._e()
              ],
              1
            )
          ],
          1
        ),
        _vm._v(" "),
        _c(
          "v-card",
          { staticClass: "cards mb-0 mt-3 py-0", attrs: { flat: "" } },
          [
            _c(
              "v-row",
              { attrs: { align: "start", "no-gutters": "" } },
              [
                _c(
                  "v-col",
                  { attrs: { cols: "12" } },
                  [
                    _c(
                      "v-btn",
                      {
                        staticClass: "pa-1",
                        attrs: {
                          block: "",
                          large: "",
                          color: "warning",
                          dark: ""
                        },
                        on: { click: _vm.back_to_invoice }
                      },
                      [_vm._v(_vm._s(_vm.__("Back")))]
                    )
                  ],
                  1
                ),
                _vm._v(" "),
                _c(
                  "v-col",
                  { attrs: { cols: "12" } },
                  [
                    _c(
                      "v-btn",
                      {
                        staticClass: "mt-2",
                        attrs: {
                          block: "",
                          large: "",
                          color: "primary",
                          dark: "",
                          disabled: _vm.vaildatPayment
                        },
                        on: { click: _vm.submit }
                      },
                      [_vm._v(_vm._s(_vm.__("Submit Payments")))]
                    )
                  ],
                  1
                )
              ],
              1
            )
          ],
          1
        ),
        _vm._v(" "),
        _c(
          "div",
          [
            _c(
              "v-dialog",
              {
                attrs: { "max-width": "400px" },
                model: {
                  value: _vm.phone_dialog,
                  callback: function($$v) {
                    _vm.phone_dialog = $$v;
                  },
                  expression: "phone_dialog"
                }
              },
              [
                _c(
                  "v-card",
                  [
                    _c("v-card-title", [
                      _c("span", { staticClass: "headline indigo--text" }, [
                        _vm._v(_vm._s(_vm.__("Confirm Mobile Number")))
                      ])
                    ]),
                    _vm._v(" "),
                    _c(
                      "v-card-text",
                      { staticClass: "pa-0" },
                      [
                        _c(
                          "v-container",
                          [
                            _c("v-text-field", {
                              attrs: {
                                dense: "",
                                outlined: "",
                                color: "indigo",
                                label: _vm.frappe._("Mobile Number"),
                                "background-color": "white",
                                "hide-details": "",
                                type: "number"
                              },
                              model: {
                                value: _vm.invoice_doc.contact_mobile,
                                callback: function($$v) {
                                  _vm.$set(_vm.invoice_doc, "contact_mobile", $$v);
                                },
                                expression: "invoice_doc.contact_mobile"
                              }
                            })
                          ],
                          1
                        )
                      ],
                      1
                    ),
                    _vm._v(" "),
                    _c(
                      "v-card-actions",
                      [
                        _c("v-spacer"),
                        _vm._v(" "),
                        _c(
                          "v-btn",
                          {
                            attrs: { color: "error", dark: "" },
                            on: {
                              click: function($event) {
                                _vm.phone_dialog = false;
                              }
                            }
                          },
                          [_vm._v(_vm._s(_vm.__("Close")))]
                        ),
                        _vm._v(" "),
                        _c(
                          "v-btn",
                          {
                            attrs: { color: "primary", dark: "" },
                            on: { click: _vm.request_payment }
                          },
                          [_vm._v(_vm._s(_vm.__("Request")))]
                        )
                      ],
                      1
                    )
                  ],
                  1
                )
              ],
              1
            )
          ],
          1
        )
      ],
      1
    )
  };
  var __vue_staticRenderFns__$5 = [];
  __vue_render__$5._withStripped = true;

    /* style */
    var __vue_inject_styles__$5 = undefined;
    /* scoped */
    var __vue_scope_id__$5 = undefined;
    /* module identifier */
    var __vue_module_identifier__$5 = undefined;
    /* functional template */
    var __vue_is_functional_template__$5 = false;
    /* component normalizer */
    function __vue_normalize__$5(
      template, style, script,
      scope, functional, moduleIdentifier,
      createInjector, createInjectorSSR
    ) {
      var component = (typeof script === 'function' ? script.options : script) || {};

      // For security concerns, we use only base name in production mode.
      component.__file = "/home/skss/frappe-bench/apps/posawesome/posawesome/public/js/posapp/components/pos/Payments.vue";

      if (!component.render) {
        component.render = template.render;
        component.staticRenderFns = template.staticRenderFns;
        component._compiled = true;

        if (functional) { component.functional = true; }
      }

      component._scopeId = scope;

      return component
    }
    /* style inject */
    
    /* style inject SSR */
    

    
    var Payments = __vue_normalize__$5(
      { render: __vue_render__$5, staticRenderFns: __vue_staticRenderFns__$5 },
      __vue_inject_styles__$5,
      __vue_script__$5,
      __vue_scope_id__$5,
      __vue_is_functional_template__$5,
      __vue_module_identifier__$5,
      undefined,
      undefined
    );

  //
  var script$6 = {
    data: function () { return ({
      loading: false,
      pos_profile: '',
      pos_offers: [],
      allItems: [],
      discount_percentage_offer_name: null,
      itemsPerPage: 1000,
      expanded: [],
      singleExpand: true,
      items_headers: [
        { text: __('Name'), value: 'name', align: 'start' },
        { text: __('Apply On'), value: 'apply_on', align: 'start' },
        { text: __('Offer'), value: 'offer', align: 'start' },
        { text: __('Applied'), value: 'offer_applied', align: 'start' } ],
    }); },

    computed: {
      offersCount: function offersCount() {
        return this.pos_offers.length;
      },
      appliedOffersCount: function appliedOffersCount() {
        return this.pos_offers.filter(function (el) { return !!el.offer_applied; }).length;
      },
    },

    methods: {
      back_to_invoice: function back_to_invoice() {
        evntBus.$emit('show_offers', 'false');
      },
      forceUpdateItem: function forceUpdateItem() {
        var list_offers = [];
        list_offers = [].concat( this.pos_offers );
        this.pos_offers = list_offers;
      },
      makeid: function makeid(length) {
        var result = '';
        var characters = 'abcdefghijklmnopqrstuvwxyz0123456789';
        var charactersLength = characters.length;
        for (var i = 0; i < length; i++) {
          result += characters.charAt(
            Math.floor(Math.random() * charactersLength)
          );
        }
        return result;
      },
      formtCurrency: function formtCurrency(value) {
        value = parseFloat(value);
        return value.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
      },
      updatePosOffers: function updatePosOffers(offers) {
        var this$1 = this;

        var toRemove = [];
        this.pos_offers.forEach(function (pos_offer) {
          var offer = offers.find(function (offer) { return offer.name === pos_offer.name; });
          if (!offer) {
            toRemove.push(pos_offer.row_id);
          }
        });
        this.removeOffers(toRemove);
        offers.forEach(function (offer) {
          var pos_offer = this$1.pos_offers.find(
            function (pos_offer) { return offer.name === pos_offer.name; }
          );
          if (pos_offer) {
            pos_offer.items = offer.items;
            if (
              pos_offer.offer === 'Grand Total' &&
              !this$1.discount_percentage_offer_name
            ) {
              pos_offer.offer_applied = !!pos_offer.auto;
            }
            if (
              offer.apply_on == 'Item Group' &&
              offer.apply_type == 'Item Group' &&
              offer.replace_cheapest_item
            ) {
              pos_offer.give_item = offer.give_item;
              pos_offer.apply_item_code = offer.apply_item_code;
            }
          } else {
            var newOffer = Object.assign({}, offer);
            if (!offer.row_id) {
              newOffer.row_id = this$1.makeid(20);
            }
            if (offer.apply_type == 'Item Code') {
              newOffer.give_item = offer.apply_item_code || 'Nothing';
            }
            if (offer.offer_applied) {
              newOffer.offer_applied == !!offer.offer_applied;
            } else {
              if (
                offer.apply_type == 'Item Group' &&
                offer.offer == 'Give Product' &&
                !offer.replace_cheapest_item &&
                !offer.replace_item
              ) {
                newOffer.offer_applied = false;
              } else if (
                offer.offer === 'Grand Total' &&
                this$1.discount_percentage_offer_name
              ) {
                newOffer.offer_applied = false;
              } else {
                newOffer.offer_applied = !!offer.auto;
              }
            }
            if (newOffer.offer == 'Give Product' && !newOffer.give_item) {
              newOffer.give_item = this$1.get_give_items(newOffer)[0].item_code;
            }
            this$1.pos_offers.push(newOffer);
            evntBus.$emit('show_mesage', {
              text: __('New Offer Available'),
              color: 'warning',
            });
          }
        });
      },
      removeOffers: function removeOffers(offers_id_list) {
        this.pos_offers = this.pos_offers.filter(
          function (offer) { return !offers_id_list.includes(offer.row_id); }
        );
      },
      handelOffers: function handelOffers() {
        var applyedOffers = this.pos_offers.filter(
          function (offer) { return offer.offer_applied; }
        );
        evntBus.$emit('update_invoice_offers', applyedOffers);
      },
      handleNewLine: function handleNewLine(str) {
        if (str) {
          return str.replace(/(?:\r\n|\r|\n)/g, '<br />');
        } else {
          return '';
        }
      },
      get_give_items: function get_give_items(offer) {
        if (offer.apply_type == 'Item Code') {
          return [offer.apply_item_code];
        } else if (offer.apply_type == 'Item Group') {
          var items = this.allItems;
          var filterd_items = [];
          var filterd_items_1 = items.filter(
            function (item) { return item.item_group == offer.apply_item_group; }
          );
          if (offer.less_then > 0) {
            filterd_items = filterd_items_1.filter(
              function (item) { return item.rate < offer.less_then; }
            );
          } else {
            filterd_items = filterd_items_1;
          }
          return filterd_items;
        } else {
          return [];
        }
      },
      updateCounters: function updateCounters() {
        evntBus.$emit('update_offers_counters', {
          offersCount: this.offersCount,
          appliedOffersCount: this.appliedOffersCount,
        });
      },
      updatePosCoupuns: function updatePosCoupuns() {
        var applyedOffers = this.pos_offers.filter(
          function (offer) { return offer.offer_applied && offer.coupon_based; }
        );
        evntBus.$emit('update_pos_coupons', applyedOffers);
      },
    },

    watch: {
      pos_offers: {
        deep: true,
        handler: function handler(pos_offers) {
          this.handelOffers();
          this.updateCounters();
          this.updatePosCoupuns();
        },
      },
    },

    created: function () {
      var this$1 = this;

      this.$nextTick(function () {
        var this$1 = this;

        evntBus.$on('register_pos_profile', function (data) {
          this$1.pos_profile = data.pos_profile;
        });
      });
      evntBus.$on('update_customer', function (customer) {
        if (this$1.customer != customer) {
          this$1.offers = [];
        }
      });
      evntBus.$on('update_pos_offers', function (data) {
        this$1.updatePosOffers(data);
      });
      evntBus.$on('update_discount_percentage_offer_name', function (data) {
        this$1.discount_percentage_offer_name = data.value;
      });
      evntBus.$on('set_all_items', function (data) {
        this$1.allItems = data;
      });
    },
  };

  /* script */
              var __vue_script__$6 = script$6;
              
  /* template */
  var __vue_render__$6 = function() {
    var _vm = this;
   
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      [
        _c(
          "v-card",
          {
            staticClass: "selection mx-auto grey lighten-5",
            staticStyle: { "max-height": "80vh", height: "80vh" }
          },
          [
            _c("v-card-title", [
              _c("span", { staticClass: "text-h6 warning--text" }, [
                _vm._v(_vm._s(_vm.__("Offers")))
              ])
            ]),
            _vm._v(" "),
            _c(
              "div",
              {
                staticClass: "my-0 py-0 overflow-y-auto",
                staticStyle: { "max-height": "75vh" }
              },
              [
                [
                  _c("v-data-table", {
                    staticClass: "elevation-1",
                    attrs: {
                      headers: _vm.items_headers,
                      items: _vm.pos_offers,
                      "single-expand": _vm.singleExpand,
                      expanded: _vm.expanded,
                      "show-expand": "",
                      "item-key": "row_id",
                      "items-per-page": _vm.itemsPerPage,
                      "hide-default-footer": ""
                    },
                    on: {
                      "update:expanded": function($event) {
                        _vm.expanded = $event;
                      }
                    },
                    scopedSlots: _vm._u([
                      {
                        key: "item.offer_applied",
                        fn: function(ref) {
                          var item = ref.item;
                          return [
                            _c("v-simple-checkbox", {
                              attrs: {
                                disabled:
                                  (item.offer == "Give Product" &&
                                    !item.give_item &&
                                    (!_vm.offer.replace_cheapest_item ||
                                      !_vm.offer.replace_item)) ||
                                  (item.offer == "Grand Total" &&
                                    _vm.discount_percentage_offer_name &&
                                    _vm.discount_percentage_offer_name !=
                                      item.name)
                              },
                              on: { click: _vm.forceUpdateItem },
                              model: {
                                value: item.offer_applied,
                                callback: function($$v) {
                                  _vm.$set(item, "offer_applied", $$v);
                                },
                                expression: "item.offer_applied"
                              }
                            })
                          ]
                        }
                      },
                      {
                        key: "expanded-item",
                        fn: function(ref) {
                          var headers = ref.headers;
                          var item = ref.item;
                          return [
                            _c(
                              "td",
                              { attrs: { colspan: headers.length } },
                              [
                                _c(
                                  "v-row",
                                  { staticClass: "mt-2" },
                                  [
                                    item.description
                                      ? _c("v-col", [
                                          _c("div", {
                                            staticClass: "indigo--text",
                                            domProps: {
                                              innerHTML: _vm._s(
                                                _vm.handleNewLine(
                                                  item.description
                                                )
                                              )
                                            }
                                          })
                                        ])
                                      : _vm._e(),
                                    _vm._v(" "),
                                    item.offer == "Give Product"
                                      ? _c(
                                          "v-col",
                                          [
                                            _c("v-autocomplete", {
                                              attrs: {
                                                items: _vm.get_give_items(item),
                                                "item-text": "item_code",
                                                outlined: "",
                                                dense: "",
                                                color: "indigo",
                                                label: _vm.frappe._("Give Item"),
                                                disabled:
                                                  item.apply_type !=
                                                    "Item Group" ||
                                                  item.replace_item ||
                                                  item.replace_cheapest_item
                                              },
                                              model: {
                                                value: item.give_item,
                                                callback: function($$v) {
                                                  _vm.$set(item, "give_item", $$v);
                                                },
                                                expression: "item.give_item"
                                              }
                                            })
                                          ],
                                          1
                                        )
                                      : _vm._e()
                                  ],
                                  1
                                )
                              ],
                              1
                            )
                          ]
                        }
                      }
                    ])
                  })
                ]
              ],
              2
            )
          ],
          1
        ),
        _vm._v(" "),
        _c(
          "v-card",
          {
            staticClass: "cards mb-0 mt-3 py-0",
            staticStyle: { "max-height": "11vh", height: "11vh" },
            attrs: { flat: "" }
          },
          [
            _c(
              "v-row",
              { attrs: { align: "start", "no-gutters": "" } },
              [
                _c(
                  "v-col",
                  { attrs: { cols: "12" } },
                  [
                    _c(
                      "v-btn",
                      {
                        staticClass: "pa-1",
                        attrs: {
                          block: "",
                          large: "",
                          color: "warning",
                          dark: ""
                        },
                        on: { click: _vm.back_to_invoice }
                      },
                      [_vm._v(_vm._s(_vm.__("Back")))]
                    )
                  ],
                  1
                )
              ],
              1
            )
          ],
          1
        )
      ],
      1
    )
  };
  var __vue_staticRenderFns__$6 = [];
  __vue_render__$6._withStripped = true;

    /* style */
    var __vue_inject_styles__$6 = undefined;
    /* scoped */
    var __vue_scope_id__$6 = undefined;
    /* module identifier */
    var __vue_module_identifier__$6 = undefined;
    /* functional template */
    var __vue_is_functional_template__$6 = false;
    /* component normalizer */
    function __vue_normalize__$6(
      template, style, script,
      scope, functional, moduleIdentifier,
      createInjector, createInjectorSSR
    ) {
      var component = (typeof script === 'function' ? script.options : script) || {};

      // For security concerns, we use only base name in production mode.
      component.__file = "/home/skss/frappe-bench/apps/posawesome/posawesome/public/js/posapp/components/pos/PosOffers.vue";

      if (!component.render) {
        component.render = template.render;
        component.staticRenderFns = template.staticRenderFns;
        component._compiled = true;

        if (functional) { component.functional = true; }
      }

      component._scopeId = scope;

      return component
    }
    /* style inject */
    
    /* style inject SSR */
    

    
    var PosOffers = __vue_normalize__$6(
      { render: __vue_render__$6, staticRenderFns: __vue_staticRenderFns__$6 },
      __vue_inject_styles__$6,
      __vue_script__$6,
      __vue_scope_id__$6,
      __vue_is_functional_template__$6,
      __vue_module_identifier__$6,
      undefined,
      undefined
    );

  //
  var script$7 = {
    data: function () { return ({
      loading: false,
      pos_profile: '',
      customer: '',
      posa_coupons: [],
      new_coupon: null,
      itemsPerPage: 1000,
      singleExpand: true,
      items_headers: [
        { text: __('Coupon'), value: 'coupon_code', align: 'start' },
        { text: __('Type'), value: 'type', align: 'start' },
        { text: __('Offer'), value: 'pos_offer', align: 'start' },
        { text: __('Applied'), value: 'applied', align: 'start' } ],
    }); },

    computed: {
      couponsCount: function couponsCount() {
        return this.posa_coupons.length;
      },
      appliedCouponsCount: function appliedCouponsCount() {
        return this.posa_coupons.filter(function (el) { return !!el.applied; }).length;
      },
    },

    methods: {
      back_to_invoice: function back_to_invoice() {
        evntBus.$emit('show_coupons', 'false');
      },
      add_coupon: function add_coupon(new_coupon) {
        if (!this.customer || !new_coupon) { return; }
        var exist = this.posa_coupons.find(
          function (el) { return el.coupon_code == new_coupon; }
        );
        if (exist) {
          evntBus.$emit('show_mesage', {
            text: __('This coupon already used !'),
            color: 'error',
          });
          return;
        }
        var vm = this;
        frappe.call({
          method: 'posawesome.posawesome.api.posapp.get_pos_coupon',
          args: {
            coupon: new_coupon,
            customer: vm.customer,
            company: vm.pos_profile.company,
          },
          callback: function (r) {
            if (r.message) {
              var res = r.message;
              if (res.msg != 'Apply' || !res.coupon) {
                evntBus.$emit('show_mesage', {
                  text: res.msg,
                  color: 'error',
                });
              } else {
                vm.new_coupon = null;
                var coupon = res.coupon;
                vm.posa_coupons.push({
                  coupon: coupon.name,
                  coupon_code: coupon.coupon_code,
                  type: coupon.coupon_type,
                  applied: 0,
                  pos_offer: coupon.pos_offer,
                  customer: coupon.customer || vm.customer,
                });
              }
            }
          },
        });
      },
      setActiveGiftCoupons: function setActiveGiftCoupons() {
        if (!this.customer) { return; }
        var vm = this;
        frappe.call({
          method: 'posawesome.posawesome.api.posapp.get_active_gift_coupons',
          args: {
            customer: vm.customer,
            company: vm.pos_profile.company,
          },
          callback: function (r) {
            if (r.message) {
              var coupons = r.message;
              coupons.forEach(function (coupon_code) {
                vm.add_coupon(coupon_code);
              });
            }
          },
        });
      },

      updatePosCoupons: function updatePosCoupons(offers) {
        this.posa_coupons.forEach(function (coupon) {
          var offer = offers.find(
            function (el) { return el.offer_applied && el.coupon == coupon.coupon; }
          );
          if (offer) {
            coupon.applied = 1;
          } else {
            coupon.applied = 0;
          }
        });
      },

      removeCoupon: function removeCoupon(reomove_list) {
        this.posa_coupons = this.posa_coupons.filter(
          function (coupon) { return !reomove_list.includes(coupon.coupon); }
        );
      },
      updateInvoice: function updateInvoice() {
        evntBus.$emit('update_invoice_coupons', this.posa_coupons);
      },
      updateCounters: function updateCounters() {
        evntBus.$emit('update_coupons_counters', {
          couponsCount: this.couponsCount,
          appliedCouponsCount: this.appliedCouponsCount,
        });
      },
    },

    watch: {
      posa_coupons: {
        deep: true,
        handler: function handler() {
          this.updateInvoice();
          this.updateCounters();
        },
      },
    },

    created: function () {
      var this$1 = this;

      this.$nextTick(function () {
        var this$1 = this;

        evntBus.$on('register_pos_profile', function (data) {
          this$1.pos_profile = data.pos_profile;
        });
      });
      evntBus.$on('update_customer', function (customer) {
        if (this$1.customer != customer) {
          var to_remove = [];
          this$1.posa_coupons.forEach(function (el) {
            if (el.type == 'Promotional') {
              el.customer = customer;
            } else {
              to_remove.push(el.coupon);
            }
          });
          this$1.customer = customer;
          if (to_remove.length) {
            this$1.removeCoupon(to_remove);
          }
        }
        this$1.setActiveGiftCoupons();
      });
      evntBus.$on('update_pos_coupons', function (data) {
        this$1.updatePosCoupons(data);
      });
      evntBus.$on('set_pos_coupons', function (data) {
        this$1.posa_coupons = data;
      });
    },
  };

  /* script */
              var __vue_script__$7 = script$7;
              
  /* template */
  var __vue_render__$7 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      [
        _c(
          "v-card",
          {
            staticClass: "selection mx-auto grey lighten-5",
            staticStyle: { "max-height": "80vh", height: "80vh" }
          },
          [
            _c(
              "v-card-title",
              [
                _c(
                  "v-row",
                  {
                    attrs: {
                      "no-gutters": "",
                      align: "center",
                      justify: "center"
                    }
                  },
                  [
                    _c("v-col", { attrs: { cols: "6" } }, [
                      _c("span", { staticClass: "text-h6 warning--text" }, [
                        _vm._v(_vm._s(_vm.__("Coupons")))
                      ])
                    ]),
                    _vm._v(" "),
                    _c(
                      "v-col",
                      { attrs: { cols: "4" } },
                      [
                        _c("v-text-field", {
                          staticClass: "mr-4",
                          attrs: {
                            dense: "",
                            outlined: "",
                            color: "indigo",
                            label: _vm.frappe._("Coupon"),
                            "background-color": "white",
                            "hide-details": ""
                          },
                          model: {
                            value: _vm.new_coupon,
                            callback: function($$v) {
                              _vm.new_coupon = $$v;
                            },
                            expression: "new_coupon"
                          }
                        })
                      ],
                      1
                    ),
                    _vm._v(" "),
                    _c(
                      "v-col",
                      { attrs: { cols: "2" } },
                      [
                        _c(
                          "v-btn",
                          {
                            staticClass: "pa-1",
                            attrs: { color: "primary", dark: "" },
                            on: {
                              click: function($event) {
                                return _vm.add_coupon(_vm.new_coupon)
                              }
                            }
                          },
                          [_vm._v(_vm._s(_vm.__("add")))]
                        )
                      ],
                      1
                    )
                  ],
                  1
                )
              ],
              1
            ),
            _vm._v(" "),
            _c(
              "div",
              {
                staticClass: "my-0 py-0 overflow-y-auto",
                staticStyle: { "max-height": "75vh" }
              },
              [
                [
                  _c("v-data-table", {
                    staticClass: "elevation-1",
                    attrs: {
                      headers: _vm.items_headers,
                      items: _vm.posa_coupons,
                      "single-expand": _vm.singleExpand,
                      expanded: _vm.expanded,
                      "item-key": "coupon",
                      "items-per-page": _vm.itemsPerPage,
                      "hide-default-footer": ""
                    },
                    on: {
                      "update:expanded": function($event) {
                        _vm.expanded = $event;
                      }
                    },
                    scopedSlots: _vm._u([
                      {
                        key: "item.applied",
                        fn: function(ref) {
                          var item = ref.item;
                          return [
                            _c("v-simple-checkbox", {
                              attrs: { disabled: "" },
                              model: {
                                value: item.applied,
                                callback: function($$v) {
                                  _vm.$set(item, "applied", $$v);
                                },
                                expression: "item.applied"
                              }
                            })
                          ]
                        }
                      }
                    ])
                  })
                ]
              ],
              2
            )
          ],
          1
        ),
        _vm._v(" "),
        _c(
          "v-card",
          {
            staticClass: "cards mb-0 mt-3 py-0",
            staticStyle: { "max-height": "11vh", height: "11vh" },
            attrs: { flat: "" }
          },
          [
            _c(
              "v-row",
              { attrs: { align: "start", "no-gutters": "" } },
              [
                _c(
                  "v-col",
                  { attrs: { cols: "12" } },
                  [
                    _c(
                      "v-btn",
                      {
                        staticClass: "pa-1",
                        attrs: {
                          block: "",
                          large: "",
                          color: "warning",
                          dark: ""
                        },
                        on: { click: _vm.back_to_invoice }
                      },
                      [_vm._v(_vm._s(_vm.__("Back")))]
                    )
                  ],
                  1
                )
              ],
              1
            )
          ],
          1
        )
      ],
      1
    )
  };
  var __vue_staticRenderFns__$7 = [];
  __vue_render__$7._withStripped = true;

    /* style */
    var __vue_inject_styles__$7 = undefined;
    /* scoped */
    var __vue_scope_id__$7 = undefined;
    /* module identifier */
    var __vue_module_identifier__$7 = undefined;
    /* functional template */
    var __vue_is_functional_template__$7 = false;
    /* component normalizer */
    function __vue_normalize__$7(
      template, style, script,
      scope, functional, moduleIdentifier,
      createInjector, createInjectorSSR
    ) {
      var component = (typeof script === 'function' ? script.options : script) || {};

      // For security concerns, we use only base name in production mode.
      component.__file = "/home/skss/frappe-bench/apps/posawesome/posawesome/public/js/posapp/components/pos/PosCoupons.vue";

      if (!component.render) {
        component.render = template.render;
        component.staticRenderFns = template.staticRenderFns;
        component._compiled = true;

        if (functional) { component.functional = true; }
      }

      component._scopeId = scope;

      return component
    }
    /* style inject */
    
    /* style inject SSR */
    

    
    var PosCoupons = __vue_normalize__$7(
      { render: __vue_render__$7, staticRenderFns: __vue_staticRenderFns__$7 },
      __vue_inject_styles__$7,
      __vue_script__$7,
      __vue_scope_id__$7,
      __vue_is_functional_template__$7,
      __vue_module_identifier__$7,
      undefined,
      undefined
    );

  //
  var script$8 = {
    // props: ["draftsDialog"],
    data: function () { return ({
      draftsDialog: false,
      singleSelect: true,
      selected: [],
      dialog_data: {},
      headers: [
        {
          text: __("Customer"),
          value: "customer",
          align: "start",
          sortable: true,
        },
        {
          text: __("Date"),
          align: "start",
          sortable: true,
          value: "posting_date",
        },
        {
          text: __("Invoice"),
          value: "name",
          align: "start",
          sortable: true,
        },
        {
          text: __("Amount"),
          value: "grand_total",
          align: "start",
          sortable: false,
        } ],
    }); },
    watch: {},
    methods: {
      close_dialog: function close_dialog() {
        this.draftsDialog = false;
      },

      submit_dialog: function submit_dialog() {
        if (this.selected.length > 0) {
          evntBus.$emit("load_invoice", this.selected[0]);
          this.draftsDialog = false;
        }
      },
    },
    created: function () {
      var this$1 = this;

      evntBus.$on("open_drafts", function (data) {
        this$1.draftsDialog = true;
        this$1.dialog_data = data;
      });
    },
  };

  /* script */
              var __vue_script__$8 = script$8;
              
  /* template */
  var __vue_render__$8 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "v-row",
      { attrs: { justify: "center" } },
      [
        _c(
          "v-dialog",
          {
            attrs: { "max-width": "800px" },
            model: {
              value: _vm.draftsDialog,
              callback: function($$v) {
                _vm.draftsDialog = $$v;
              },
              expression: "draftsDialog"
            }
          },
          [
            _c(
              "v-card",
              [
                _c("v-card-title", [
                  _c("span", { staticClass: "headline indigo--text" }, [
                    _vm._v(_vm._s(_vm.__("Select Hold Invoice")))
                  ])
                ]),
                _vm._v(" "),
                _c(
                  "v-card-text",
                  { staticClass: "pa-0" },
                  [
                    _c(
                      "v-container",
                      [
                        _c(
                          "v-row",
                          [
                            _c(
                              "v-col",
                              { staticClass: "pa-1", attrs: { cols: "12" } },
                              [
                                [
                                  _c("v-data-table", {
                                    staticClass: "elevation-1",
                                    attrs: {
                                      headers: _vm.headers,
                                      items: _vm.dialog_data,
                                      "item-key": "name",
                                      "single-select": _vm.singleSelect,
                                      "show-select": ""
                                    },
                                    model: {
                                      value: _vm.selected,
                                      callback: function($$v) {
                                        _vm.selected = $$v;
                                      },
                                      expression: "selected"
                                    }
                                  })
                                ]
                              ],
                              2
                            )
                          ],
                          1
                        )
                      ],
                      1
                    )
                  ],
                  1
                ),
                _vm._v(" "),
                _c(
                  "v-card-actions",
                  [
                    _c("v-spacer"),
                    _vm._v(" "),
                    _c(
                      "v-btn",
                      {
                        attrs: { color: "error", dark: "" },
                        on: { click: _vm.close_dialog }
                      },
                      [_vm._v("Close")]
                    ),
                    _vm._v(" "),
                    _c(
                      "v-btn",
                      {
                        attrs: { color: "primary", dark: "" },
                        on: { click: _vm.submit_dialog }
                      },
                      [_vm._v("Select")]
                    )
                  ],
                  1
                )
              ],
              1
            )
          ],
          1
        )
      ],
      1
    )
  };
  var __vue_staticRenderFns__$8 = [];
  __vue_render__$8._withStripped = true;

    /* style */
    var __vue_inject_styles__$8 = undefined;
    /* scoped */
    var __vue_scope_id__$8 = undefined;
    /* module identifier */
    var __vue_module_identifier__$8 = undefined;
    /* functional template */
    var __vue_is_functional_template__$8 = false;
    /* component normalizer */
    function __vue_normalize__$8(
      template, style, script,
      scope, functional, moduleIdentifier,
      createInjector, createInjectorSSR
    ) {
      var component = (typeof script === 'function' ? script.options : script) || {};

      // For security concerns, we use only base name in production mode.
      component.__file = "/home/skss/frappe-bench/apps/posawesome/posawesome/public/js/posapp/components/pos/Drafts.vue";

      if (!component.render) {
        component.render = template.render;
        component.staticRenderFns = template.staticRenderFns;
        component._compiled = true;

        if (functional) { component.functional = true; }
      }

      component._scopeId = scope;

      return component
    }
    /* style inject */
    
    /* style inject SSR */
    

    
    var Drafts = __vue_normalize__$8(
      { render: __vue_render__$8, staticRenderFns: __vue_staticRenderFns__$8 },
      __vue_inject_styles__$8,
      __vue_script__$8,
      __vue_scope_id__$8,
      __vue_is_functional_template__$8,
      __vue_module_identifier__$8,
      undefined,
      undefined
    );

  //
  var script$9 = {
    data: function () { return ({
      closingDialog: false,
      itemsPerPage: 20,
      dialog_data: {},
      headers: [
        {
          text: __('Mode of Payment'),
          value: 'mode_of_payment',
          align: 'start',
          sortable: true,
        },
        {
          text: __('Opening Amount'),
          align: 'center',
          sortable: true,
          value: 'opening_amount',
        },
        {
          text: __('Billed Amount'),
          align: 'center',
          sortable: true,
          value: 'billed_amount',
        },
        {
          text: __('Expected Amount'),
          value: 'expected_amount',
          align: 'center',
          sortable: false,
        },
        {
          text: __('Available Amount In Hand'),
          value: 'closing_amount',
          align: 'center',
          sortable: true,
        },
        {
          text: __('Difference'),
          value: 'difference',
          align: 'center',
          sortable: false,
        } ],
      max25chars: function (v) { return v.length <= 20 || 'Input too long!'; }, // TODO : should validate as number
      pagination: {},
    }); },
    watch: {},
    methods: {
      close_dialog: function close_dialog() {
        this.closingDialog = false;
      },

      submit_dialog: function submit_dialog() {
        evntBus.$emit('submit_closing_pos', this.dialog_data);
        this.closingDialog = false;
        
      },
      formtCurrency: function formtCurrency(value) {
        value = parseFloat(value);
        return value.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
      },
    },
    created: function () {
      var this$1 = this;

      evntBus.$on('open_ClosingDialog', function (data) {
        this$1.closingDialog = true;
        this$1.dialog_data = data;
      });
    },
  };

  /* script */
              var __vue_script__$9 = script$9;
              
  /* template */
  var __vue_render__$9 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "v-row",
      { attrs: { justify: "center" } },
      [
        _c(
          "v-dialog",
          {
            attrs: { "max-width": "900px" },
            model: {
              value: _vm.closingDialog,
              callback: function($$v) {
                _vm.closingDialog = $$v;
              },
              expression: "closingDialog"
            }
          },
          [
            _c(
              "v-card",
              [
                _c("v-card-title", [
                  _c("span", { staticClass: "headline indigo--text" }, [
                    _vm._v(_vm._s(_vm.__("Thirvu Retail Closing Shift")))
                  ])
                ]),
                _vm._v(" "),
                _c(
                  "v-card-text",
                  { staticClass: "pa-0" },
                  [
                    _c(
                      "v-container",
                      [
                        _c(
                          "v-row",
                          [
                            _c(
                              "v-col",
                              { staticClass: "pa-1", attrs: { cols: "12" } },
                              [
                                [
                                  _c("v-data-table", {
                                    staticClass: "elevation-1",
                                    attrs: {
                                      headers: _vm.headers,
                                      items:
                                        _vm.dialog_data.payment_reconciliation,
                                      "item-key": "mode_of_payment",
                                      "items-per-page": _vm.itemsPerPage,
                                      "hide-default-footer": ""
                                    },
                                    scopedSlots: _vm._u([
                                      {
                                        key: "item.closing_amount",
                                        fn: function(props) {
                                          return [
                                            _c(
                                              "v-edit-dialog",
                                              {
                                                attrs: {
                                                  "return-value":
                                                    props.item.closing_amount
                                                },
                                                on: {
                                                  "update:returnValue": function(
                                                    $event
                                                  ) {
                                                    return _vm.$set(
                                                      props.item,
                                                      "closing_amount",
                                                      $event
                                                    )
                                                  },
                                                  "update:return-value": function(
                                                    $event
                                                  ) {
                                                    return _vm.$set(
                                                      props.item,
                                                      "closing_amount",
                                                      $event
                                                    )
                                                  }
                                                },
                                                scopedSlots: _vm._u(
                                                  [
                                                    {
                                                      key: "input",
                                                      fn: function() {
                                                        return [
                                                          _c("v-text-field", {
                                                            attrs: {
                                                              rules: [
                                                                _vm.max25chars
                                                              ],
                                                              label: _vm.frappe._(
                                                                "Edit"
                                                              ),
                                                              "single-line": "",
                                                              counter: "",
                                                              type: "number"
                                                            },
                                                            model: {
                                                              value:
                                                                props.item
                                                                  .closing_amount,
                                                              callback: function(
                                                                $$v
                                                              ) {
                                                                _vm.$set(
                                                                  props.item,
                                                                  "closing_amount",
                                                                  $$v
                                                                );
                                                              },
                                                              expression:
                                                                "props.item.closing_amount"
                                                            }
                                                          })
                                                        ]
                                                      },
                                                      proxy: true
                                                    }
                                                  ],
                                                  null,
                                                  true
                                                )
                                              },
                                              [
                                                _vm._v(
                                                  "\n                      " +
                                                    _vm._s(
                                                      _vm.formtCurrency(
                                                        props.item.closing_amount
                                                      )
                                                    ) +
                                                    "\n                      "
                                                )
                                              ]
                                            )
                                          ]
                                        }
                                      },
                                      {
                                        key: "item.difference",
                                        fn: function(ref) {
                                          var item = ref.item;
                                          return [
                                            _vm._v(
                                              _vm._s(
                                                (item.difference = _vm.formtCurrency(
                                                    item.closing_amount-item.expected_amount
                                                ))
                                              )
                                            )
                                          ]
                                        }
                                      },
                                      {
                                        key: "item.opening_amount",
                                        fn: function(ref) {
                                          var item = ref.item;
                                          return [
                                            _vm._v(
                                              _vm._s(
                                                _vm.formtCurrency(
                                                  item.opening_amount
                                                )
                                              )
                                            )
                                          ]
                                        }
                                      },
                                      {
                                        key: "item.billed_amount",
                                        fn: function(ref) {
                                          var item = ref.item;
                                          return [
                                            _vm._v(
                                              _vm._s(
                                                (item.billed_amount = _vm.formtCurrency(
                                                  item.expected_amount-item.opening_amount,
                                                ))
                                              )
                                            )
                                          ]
                                        }
                                      },
                                      {
                                        key: "item.expected_amount",
                                        fn: function(ref) {
                                          var item = ref.item;
                                          return [
                                            _vm._v(
                                              _vm._s(
                                                _vm.formtCurrency(
                                                  item.expected_amount
                                                )
                                              )
                                            )
                                          ]
                                        }
                                      }
                                    ])
                                  })
                                ]
                              ],
                              2
                            )
                          ],
                          1
                        )
                      ],
                      1
                    )
                  ],
                  1
                ),
                _vm._v(" "),
                _c(
                  "v-card-actions",
                  [
                    _c("v-spacer"),
                    _vm._v(" "),
                    _c(
                      "v-btn",
                      {
                        attrs: { color: "error", dark: "" },
                        on: { click: _vm.close_dialog }
                      },
                      [_vm._v(_vm._s(_vm.__("Close")))]
                    ),
                    _vm._v(" "),
                    _c(
                      "v-btn",
                      {
                        attrs: { color: "primary", dark: "" },
                        on: { click: _vm.submit_dialog }
                      },
                      [_vm._v(_vm._s(_vm.__("Submit")))]
                    ),
                    _vm._v(" "),
                    _c(
                      "v-btn",
                      {
                        attrs: { color: "primary", dark: "" },
                        on: { click: function(){
                          var table_fields=[
                            {fieldname:'currency',fieldtype:'Currency',label:'Currency',in_list_view:1,in_place_edit: true},
                            {
                              fieldname:'count',
                              fieldtype:'Int',
                              label:'Count',in_list_view:1,
                              in_place_edit: true,
                              onchange: ()=>{
                                alert("hii")
                              }
                            },
                            {fieldname:'total',fieldtype:'Currency',label:'Total',in_list_view:1,in_place_edit: true}
                          ]
                          var d = new frappe.ui.Dialog({
                            title: "Denomination",
                            static: true,
                            fields:[
                              {
                              label:'Denomination',
                              fieldname:'denom_table',
                              fieldtype:'Table',
                              fields:table_fields,
                              in_place_edit: true,
                              cannot_add_rows: false,
                              data:[]
                            }
                            ],
                            primary_action: function(data){
                              d.hide()
                            }
                          });
                          let currency = [2000,500,200,100,50,20,10,5,2,1,0.5]
                          for(let i=0;i<currency.length;i++){
                          d.fields_dict.denom_table.df.data.push({ currency: currency[i], count: 10,total:0 })
                          }
                          d.show()
                        } }
                      },
                      [_vm._v(_vm._s(_vm.__("Show Denomination")))]
                    )
                  ],
                  1
                )
              ],
              1
            )
          ],
          1
        )
      ],
      1
    )
  };
  var __vue_staticRenderFns__$9 = [];
  __vue_render__$9._withStripped = true;

    /* style */
    var __vue_inject_styles__$9 = undefined;
    /* scoped */
    var __vue_scope_id__$9 = undefined;
    /* module identifier */
    var __vue_module_identifier__$9 = undefined;
    /* functional template */
    var __vue_is_functional_template__$9 = false;
    /* component normalizer */
    function __vue_normalize__$9(
      template, style, script,
      scope, functional, moduleIdentifier,
      createInjector, createInjectorSSR
    ) {
      var component = (typeof script === 'function' ? script.options : script) || {};

      // For security concerns, we use only base name in production mode.
      component.__file = "/home/skss/frappe-bench/apps/posawesome/posawesome/public/js/posapp/components/pos/ClosingDialog.vue";

      if (!component.render) {
        component.render = template.render;
        component.staticRenderFns = template.staticRenderFns;
        component._compiled = true;

        if (functional) { component.functional = true; }
      }

      component._scopeId = scope;

      return component
    }
    /* style inject */
    
    /* style inject SSR */
    

    
    var ClosingDialog = __vue_normalize__$9(
      { render: __vue_render__$9, staticRenderFns: __vue_staticRenderFns__$9 },
      __vue_inject_styles__$9,
      __vue_script__$9,
      __vue_scope_id__$9,
      __vue_is_functional_template__$9,
      __vue_module_identifier__$9,
      undefined,
      undefined
    );

  //
  var script$a = {
    data: function () { return ({
      customerDialog: false,
      pos_profile: '',
      customer_name: '',
      tax_id: '',
      mobile_no: '',
      email_id: '',
      referral_code: '',
      birthday: null,
      birthday_menu: false,
      group: '',
      groups: [],
      territory: '',
      territorys: [],
    }); },
    watch: {},
    methods: {
      close_dialog: function close_dialog() {
        this.customerDialog = false;
      },
      getCustomerGroups: function getCustomerGroups() {
        if (this.groups.length > 0) { return; }
        var vm = this;
        frappe.db
          .get_list('Customer Group', {
            fields: ['name'],
            page_length: 1000,
          })
          .then(function (data) {
            if (data.length > 0) {
              data.forEach(function (el) {
                vm.groups.push(el.name);
              });
            }
          });
      },
      getCustomerTerritorys: function getCustomerTerritorys() {
        if (this.territorys.length > 0) { return; }
        var vm = this;
        frappe.call({
          method: "posawesome.posawesome.api.posapp.get_territory_list",
          callback(data){
            if (data.message.length > 0) {
              data.message.forEach(function (el) {
                vm.territorys.push(el.name);
              });
            }
          }
        })
        
      },
      submit_dialog: function submit_dialog() {
        if (this.customer_name) {
          var vm = this;
          var args = {
            customer_name: this.customer_name,
            company: this.pos_profile.company,
            tax_id: this.tax_id,
            mobile_no: this.mobile_no,
            email_id: this.email_id,
            referral_code: this.referral_code,
            birthday: this.birthday,
            customer_group: this.group,
            territory: this.territory,
          };
          frappe.call({
            method: 'posawesome.posawesome.api.posapp.create_customer',
            args: args,
            callback: function (r) {
              if (!r.exc && r.message.name) {
                evntBus.$emit('show_mesage', {
                  text: __('Customer contact created successfully.'),
                  color: 'success',
                });
                args.name = r.message.name;
                frappe.utils.play_sound('submit');
                evntBus.$emit('add_customer_to_list', args);
                evntBus.$emit('set_customer', r.message.name);
                vm.customer_name = '';
                vm.tax_id = '';
                vm.mobile_no = '';
                vm.email_id = '';
                vm.referral_code = '';
                vm.birthday = '';
                vm.group = '';
                vm.customerDialog = false;
              }
            },
          });
          this.customerDialog = false;
        }
      },
    },
    created: function () {
      var this$1 = this;

      evntBus.$on('open_new_customer', function () {
        this$1.customerDialog = true;
      });
      evntBus.$on('register_pos_profile', function (data) {
        this$1.pos_profile = data.pos_profile;
      });
      this.getCustomerGroups();
      this.getCustomerTerritorys();
    },
  };

  /* script */
              var __vue_script__$a = script$a;
              
  /* template */
  var __vue_render__$a = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "v-row",
      { attrs: { justify: "center" } },
      [
        _c(
          "v-dialog",
          {
            attrs: { "max-width": "600px" },
            model: {
              value: _vm.customerDialog,
              callback: function($$v) {
                _vm.customerDialog = $$v;
              },
              expression: "customerDialog"
            }
          },
          [
            _c(
              "v-card",
              [
                _c("v-card-title", [
                  _c("span", { staticClass: "headline indigo--text" }, [
                    _vm._v(_vm._s(_vm.__("New Customer")))
                  ])
                ]),
                _vm._v(" "),
                _c(
                  "v-card-text",
                  { staticClass: "pa-0" },
                  [
                    _c(
                      "v-container",
                      [
                        _c(
                          "v-row",
                          [
                            _c(
                              "v-col",
                              { attrs: { cols: "12" } },
                              [
                                _c("v-text-field", {
                                  attrs: {
                                    dense: "",
                                    color: "indigo",
                                    label: _vm.frappe._("Customer Name"),
                                    "background-color": "white",
                                    "hide-details": ""
                                  },
                                  model: {
                                    value: _vm.customer_name,
                                    callback: function($$v) {
                                      _vm.customer_name = $$v;
                                    },
                                    expression: "customer_name"
                                  }
                                })
                              ],
                              1
                            ),
                            _vm._v(" "),
                            _c(
                              "v-col",
                              { attrs: { cols: "6" } },
                              [
                                _c("v-text-field", {
                                  attrs: {
                                    dense: "",
                                    color: "indigo",
                                    label: _vm.frappe._("Tax ID"),
                                    "background-color": "white",
                                    "hide-details": ""
                                  },
                                  model: {
                                    value: _vm.tax_id,
                                    callback: function($$v) {
                                      _vm.tax_id = $$v;
                                    },
                                    expression: "tax_id"
                                  }
                                })
                              ],
                              1
                            ),
                            _vm._v(" "),
                            _c(
                              "v-col",
                              { attrs: { cols: "6" } },
                              [
                                _c("v-text-field", {
                                  attrs: {
                                    dense: "",
                                    color: "indigo",
                                    label: _vm.frappe._("Mobile No"),
                                    "background-color": "white",
                                    "hide-details": ""
                                  },
                                  model: {
                                    value: _vm.mobile_no,
                                    callback: function($$v) {
                                      _vm.mobile_no = $$v;
                                    },
                                    expression: "mobile_no"
                                  }
                                })
                              ],
                              1
                            ),
                            _vm._v(" "),
                            _c(
                              "v-col",
                              { attrs: { cols: "6" } },
                              [
                                _c("v-text-field", {
                                  attrs: {
                                    dense: "",
                                    color: "indigo",
                                    label: _vm.frappe._("Email Id"),
                                    "background-color": "white",
                                    "hide-details": ""
                                  },
                                  model: {
                                    value: _vm.email_id,
                                    callback: function($$v) {
                                      _vm.email_id = $$v;
                                    },
                                    expression: "email_id"
                                  }
                                })
                              ],
                              1
                            ),
                            _vm._v(" "),
                            _c(
                              "v-col",
                              { attrs: { cols: "6" } },
                              [
                                _c("v-text-field", {
                                  attrs: {
                                    dense: "",
                                    color: "indigo",
                                    label: _vm.frappe._("Referral Code"),
                                    "background-color": "white",
                                    "hide-details": ""
                                  },
                                  model: {
                                    value: _vm.referral_code,
                                    callback: function($$v) {
                                      _vm.referral_code = $$v;
                                    },
                                    expression: "referral_code"
                                  }
                                })
                              ],
                              1
                            ),
                            _vm._v(" "),
                            _c(
                              "v-col",
                              { attrs: { cols: "6" } },
                              [
                                _c(
                                  "v-menu",
                                  {
                                    ref: "birthday_menu",
                                    attrs: {
                                      "close-on-content-click": false,
                                      transition: "scale-transition",
                                      dense: ""
                                    },
                                    scopedSlots: _vm._u([
                                      {
                                        key: "activator",
                                        fn: function(ref) {
                                          var on = ref.on;
                                          var attrs = ref.attrs;
                                          return [
                                            _c(
                                              "v-text-field",
                                              _vm._g(
                                                _vm._b(
                                                  {
                                                    attrs: {
                                                      label: _vm.frappe._(
                                                        "Birthday"
                                                      ),
                                                      readonly: "",
                                                      dense: "",
                                                      clearable: "",
                                                      "hide-details": "",
                                                      color: "indigo"
                                                    },
                                                    model: {
                                                      value: _vm.birthday,
                                                      callback: function($$v) {
                                                        _vm.birthday = $$v;
                                                      },
                                                      expression: "birthday"
                                                    }
                                                  },
                                                  "v-text-field",
                                                  attrs,
                                                  false
                                                ),
                                                on
                                              )
                                            )
                                          ]
                                        }
                                      }
                                    ]),
                                    model: {
                                      value: _vm.birthday_menu,
                                      callback: function($$v) {
                                        _vm.birthday_menu = $$v;
                                      },
                                      expression: "birthday_menu"
                                    }
                                  },
                                  [
                                    _vm._v(" "),
                                    _c("v-date-picker", {
                                      attrs: {
                                        color: "indigo",
                                        "no-title": "",
                                        scrollable: "",
                                        max: _vm.frappe.datetime.now_date()
                                      },
                                      on: {
                                        input: function($event) {
                                          _vm.birthday_menu = false;
                                        }
                                      },
                                      model: {
                                        value: _vm.birthday,
                                        callback: function($$v) {
                                          _vm.birthday = $$v;
                                        },
                                        expression: "birthday"
                                      }
                                    })
                                  ],
                                  1
                                )
                              ],
                              1
                            ),
                            _vm._v(" "),
                            _c(
                              "v-col",
                              { attrs: { cols: "6" } },
                              [
                                _c("v-autocomplete", {
                                  attrs: {
                                    clearable: "",
                                    dense: "",
                                    "auto-select-first": "",
                                    color: "indigo",
                                    label: _vm.frappe._("Customer Group"),
                                    items: _vm.groups,
                                    "background-color": "white",
                                    "no-data-text": _vm.__("Group not found"),
                                    "hide-details": ""
                                  },
                                  model: {
                                    value: _vm.group,
                                    callback: function($$v) {
                                      _vm.group = $$v;
                                    },
                                    expression: "group"
                                  }
                                })
                              ],
                              1
                            ),
                            _vm._v(" "),
                            _c(
                              "v-col",
                              { attrs: { cols: "6" } },
                              [
                                _c("v-autocomplete", {
                                  attrs: {
                                    clearable: "",
                                    dense: "",
                                    "auto-select-first": "",
                                    color: "indigo",
                                    label: _vm.frappe._("Territory"),
                                    items: _vm.territorys,
                                    "background-color": "white",
                                    "no-data-text": _vm.__("Territory not found"),
                                    "hide-details": ""
                                  },
                                  model: {
                                    value: _vm.territory,
                                    callback: function($$v) {
                                      _vm.territory = $$v;
                                    },
                                    expression: "territory"
                                  }
                                })
                              ],
                              1
                            )
                          ],
                          1
                        )
                      ],
                      1
                    )
                  ],
                  1
                ),
                _vm._v(" "),
                _c(
                  "v-card-actions",
                  [
                    _c("v-spacer"),
                    _vm._v(" "),
                    _c(
                      "v-btn",
                      {
                        attrs: { color: "error", dark: "" },
                        on: { click: _vm.close_dialog }
                      },
                      [_vm._v(_vm._s(_vm.__("Close")))]
                    ),
                    _vm._v(" "),
                    _c(
                      "v-btn",
                      {
                        attrs: { color: "primary", dark: "" },
                        on: { click: _vm.submit_dialog }
                      },
                      [_vm._v(_vm._s(_vm.__("Submit")))]
                    )
                  ],
                  1
                )
              ],
              1
            )
          ],
          1
        )
      ],
      1
    )
  };
  var __vue_staticRenderFns__$a = [];
  __vue_render__$a._withStripped = true;

    /* style */
    var __vue_inject_styles__$a = undefined;
    /* scoped */
    var __vue_scope_id__$a = undefined;
    /* module identifier */
    var __vue_module_identifier__$a = undefined;
    /* functional template */
    var __vue_is_functional_template__$a = false;
    /* component normalizer */
    function __vue_normalize__$a(
      template, style, script,
      scope, functional, moduleIdentifier,
      createInjector, createInjectorSSR
    ) {
      var component = (typeof script === 'function' ? script.options : script) || {};

      // For security concerns, we use only base name in production mode.
      component.__file = "/home/skss/frappe-bench/apps/posawesome/posawesome/public/js/posapp/components/pos/NewCustomer.vue";

      if (!component.render) {
        component.render = template.render;
        component.staticRenderFns = template.staticRenderFns;
        component._compiled = true;

        if (functional) { component.functional = true; }
      }

      component._scopeId = scope;

      return component
    }
    /* style inject */
    
    /* style inject SSR */
    

    
    var NewCustomer = __vue_normalize__$a(
      { render: __vue_render__$a, staticRenderFns: __vue_staticRenderFns__$a },
      __vue_inject_styles__$a,
      __vue_script__$a,
      __vue_scope_id__$a,
      __vue_is_functional_template__$a,
      __vue_module_identifier__$a,
      undefined,
      undefined
    );

  //
  var script$b = {
    data: function () { return ({
      customerDialog: false,
      customer_info: '',
    }); },

    watch: {
      customer: function customer() {
        this.fetch_customer_details();
      },
    },

    methods: {
      close_dialog: function close_dialog() {
        this.customerDialog = false;
      },
      set_customer_info: function set_customer_info(field, value) {
        //cust_name = this.customer_info.customer_name
        var vm = this;
        frappe.call({
          method: 'posawesome.posawesome.api.posapp.set_customer_info',
          args: {
            fieldname: field,
            customer: this.customer_info.customer_name,
            value: value,
          },
          callback: function (r) {
            if (!r.exc) {
              vm.customer_info[field] = value;
              evntBus.$emit('show_mesage', {
                text: __('Customer contact updated successfully.'),
                color: 'success',
              });
              frappe.utils.play_sound('submit');
            }
          },
        });
      },
    },
    created: function () {
      var this$1 = this;

      evntBus.$on('open_edit_customer', function () {
        this$1.customerDialog = true;
      });
      evntBus.$on('set_customer_info_to_edit', function (data) {
        this$1.customer_info = data;
      });
    },
  };

  /* script */
              var __vue_script__$b = script$b;
              
  /* template */
  var __vue_render__$b = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "v-row",
      { attrs: { justify: "center" } },
      [
        _c(
          "v-dialog",
          {
            attrs: { "max-width": "600px" },
            model: {
              value: _vm.customerDialog,
              callback: function($$v) {
                _vm.customerDialog = $$v;
              },
              expression: "customerDialog"
            }
          },
          [
            _c(
              "v-card",
              [
                _c("v-card-title", [
                  _c("span", { staticClass: "headline indigo--text" }, [
                    _vm._v(_vm._s(_vm.__("Customer Info")))
                  ])
                ]),
                _vm._v(" "),
                _c(
                  "v-card-text",
                  { staticClass: "pa-0" },
                  [
                    _c(
                      "v-container",
                      [
                        _c(
                          "v-row",
                          [
                            _c(
                              "v-col",
                              { attrs: { cols: "12" } },
                              [
                                _c("v-text-field", {
                                  attrs: {
                                    dense: "",
                                    color: "indigo",
                                    label: _vm.frappe._("Customer Name"),
                                    "background-color": "white",
                                    "hide-details": "",
                                    readonly: ""
                                  },
                                  model: {
                                    value: _vm.customer_info.name,
                                    callback: function($$v) {
                                      _vm.$set(_vm.customer_info, "name", $$v);
                                    },
                                    expression: "customer_info.name"
                                  }
                                })
                              ],
                              1
                            ),
                            _vm._v(" "),
                            _c(
                              "v-col",
                              { attrs: { cols: "6" } },
                              [
                                _c("v-text-field", {
                                  attrs: {
                                    dense: "",
                                    color: "indigo",
                                    label: _vm.frappe._("Email"),
                                    "background-color": "white",
                                    "hide-details": ""
                                  },
                                  on: {
                                    change: function($event) {
                                      return _vm.set_customer_info(
                                        "email_id",
                                        $event
                                      )
                                    }
                                  },
                                  model: {
                                    value: _vm.customer_info.email_id,
                                    callback: function($$v) {
                                      _vm.$set(_vm.customer_info, "email_id", $$v);
                                    },
                                    expression: "customer_info.email_id"
                                  }
                                })
                              ],
                              1
                            ),
                            _vm._v(" "),
                            _c(
                              "v-col",
                              { attrs: { cols: "6" } },
                              [
                                _c("v-text-field", {
                                  attrs: {
                                    dense: "",
                                    color: "indigo",
                                    label: _vm.frappe._("Mobile No"),
                                    "background-color": "white",
                                    "hide-details": ""
                                  },
                                  on: {
                                    change: function($event) {
                                      return _vm.set_customer_info(
                                        "mobile_no",
                                        $event
                                      )
                                    }
                                  },
                                  model: {
                                    value: _vm.customer_info.mobile_no,
                                    callback: function($$v) {
                                      _vm.$set(
                                        _vm.customer_info,
                                        "mobile_no",
                                        $$v
                                      );
                                    },
                                    expression: "customer_info.mobile_no"
                                  }
                                })
                              ],
                              1
                            ),
                            _vm._v(" "),
                            _c(
                              "v-col",
                              { attrs: { cols: "6" } },
                              [
                                _c("v-text-field", {
                                  attrs: {
                                    label: _vm.frappe._("Loyalty Program"),
                                    dense: "",
                                    readonly: "",
                                    "hide-details": ""
                                  },
                                  model: {
                                    value: _vm.customer_info.loyalty_program,
                                    callback: function($$v) {
                                      _vm.$set(
                                        _vm.customer_info,
                                        "loyalty_program",
                                        $$v
                                      );
                                    },
                                    expression: "customer_info.loyalty_program"
                                  }
                                })
                              ],
                              1
                            ),
                            _vm._v(" "),
                            _c(
                              "v-col",
                              { attrs: { cols: "6" } },
                              [
                                _c("v-text-field", {
                                  attrs: {
                                    label: _vm.frappe._("Loyalty Points"),
                                    dense: "",
                                    readonly: "",
                                    "hide-details": ""
                                  },
                                  model: {
                                    value: _vm.customer_info.loyalty_points,
                                    callback: function($$v) {
                                      _vm.$set(
                                        _vm.customer_info,
                                        "loyalty_points",
                                        $$v
                                      );
                                    },
                                    expression: "customer_info.loyalty_points"
                                  }
                                })
                              ],
                              1
                            )
                          ],
                          1
                        )
                      ],
                      1
                    )
                  ],
                  1
                ),
                _vm._v(" "),
                _c(
                  "v-card-actions",
                  [
                    _c("v-spacer"),
                    _vm._v(" "),
                    _c(
                      "v-btn",
                      {
                        attrs: { color: "error", dark: "" },
                        on: { click: _vm.close_dialog }
                      },
                      [_vm._v("Close")]
                    )
                  ],
                  1
                ),
              ],
              1
            )
          ],
          1
        )
      ],
      1
    )
  };
  var __vue_staticRenderFns__$b = [];
  __vue_render__$b._withStripped = true;

    /* style */
    var __vue_inject_styles__$b = undefined;
    /* scoped */
    var __vue_scope_id__$b = undefined;
    /* module identifier */
    var __vue_module_identifier__$b = undefined;
    /* functional template */
    var __vue_is_functional_template__$b = false;
    /* component normalizer */
    function __vue_normalize__$b(
      template, style, script,
      scope, functional, moduleIdentifier,
      createInjector, createInjectorSSR
    ) {
      var component = (typeof script === 'function' ? script.options : script) || {};

      // For security concerns, we use only base name in production mode.
      component.__file = "/home/skss/frappe-bench/apps/posawesome/posawesome/public/js/posapp/components/pos/EditCustomer.vue";

      if (!component.render) {
        component.render = template.render;
        component.staticRenderFns = template.staticRenderFns;
        component._compiled = true;

        if (functional) { component.functional = true; }
      }

      component._scopeId = scope;

      return component
    }
    /* style inject */
    
    /* style inject SSR */
    

    
    var EditCustomer = __vue_normalize__$b(
      { render: __vue_render__$b, staticRenderFns: __vue_staticRenderFns__$b },
      __vue_inject_styles__$b,
      __vue_script__$b,
      __vue_scope_id__$b,
      __vue_is_functional_template__$b,
      __vue_module_identifier__$b,
      undefined,
      undefined
    );

  //
  var script$c = {
    data: function () { return ({
      addressDialog: false,
      address: {},
      customer: '',
    }); },

    methods: {
      close_dialog: function close_dialog() {
        this.addressDialog = false;
      },

      submit_dialog: function submit_dialog() {
        var vm = this;
        this.address.customer = this.customer;
        this.address.doctype = 'Customer';
        frappe.call({
          method: 'posawesome.posawesome.api.posapp.make_address',
          args: {
            args: this.address,
          },
          callback: function (r) {
            if (!r.exc) {
              evntBus.$emit('add_the_new_address', r.message);
              evntBus.$emit('show_mesage', {
                text: 'Customer Address created successfully.',
                color: 'success',
              });
              vm.addressDialog = false;
              vm.customer = '';
              vm.address = {};
            }
          },
        });
      },
    },
    created: function () {
      var this$1 = this;

      evntBus.$on('open_new_address', function (data) {
        this$1.addressDialog = true;
        this$1.customer = data;
      });
    },
  };

  /* script */
              var __vue_script__$c = script$c;
              
  /* template */
  var __vue_render__$c = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "v-row",
      { attrs: { justify: "center" } },
      [
        _c(
          "v-dialog",
          {
            attrs: { "max-width": "600px" },
            model: {
              value: _vm.addressDialog,
              callback: function($$v) {
                _vm.addressDialog = $$v;
              },
              expression: "addressDialog"
            }
          },
          [
            _c(
              "v-card",
              [
                _c("v-card-title", [
                  _c("span", { staticClass: "headline indigo--text" }, [
                    _vm._v(_vm._s(_vm.__("Add New Address")))
                  ])
                ]),
                _vm._v(" "),
                _c(
                  "v-card-text",
                  { staticClass: "pa-0" },
                  [
                    _c(
                      "v-container",
                      [
                        _c(
                          "v-row",
                          [
                            _c(
                              "v-col",
                              { attrs: { cols: "12" } },
                              [
                                _c("v-text-field", {
                                  attrs: {
                                    dense: "",
                                    color: "indigo",
                                    label: _vm.frappe._("Address Name"),
                                    "background-color": "white",
                                    "hide-details": ""
                                  },
                                  model: {
                                    value: _vm.address.name,
                                    callback: function($$v) {
                                      _vm.$set(_vm.address, "name", $$v);
                                    },
                                    expression: "address.name"
                                  }
                                })
                              ],
                              1
                            ),
                            _vm._v(" "),
                            _c(
                              "v-col",
                              { attrs: { cols: "12" } },
                              [
                                _c("v-text-field", {
                                  attrs: {
                                    dense: "",
                                    color: "indigo",
                                    label: _vm.frappe._("Address Line 1"),
                                    "background-color": "white",
                                    "hide-details": ""
                                  },
                                  model: {
                                    value: _vm.address.address_line1,
                                    callback: function($$v) {
                                      _vm.$set(_vm.address, "address_line1", $$v);
                                    },
                                    expression: "address.address_line1"
                                  }
                                })
                              ],
                              1
                            ),
                            _vm._v(" "),
                            _c(
                              "v-col",
                              { attrs: { cols: "12" } },
                              [
                                _c("v-text-field", {
                                  attrs: {
                                    dense: "",
                                    color: "indigo",
                                    label: _vm.frappe._("Address Line 2"),
                                    "background-color": "white",
                                    "hide-details": ""
                                  },
                                  model: {
                                    value: _vm.address.address_line2,
                                    callback: function($$v) {
                                      _vm.$set(_vm.address, "address_line2", $$v);
                                    },
                                    expression: "address.address_line2"
                                  }
                                })
                              ],
                              1
                            ),
                            _vm._v(" "),
                            _c(
                              "v-col",
                              { attrs: { cols: "6" } },
                              [
                                _c("v-text-field", {
                                  attrs: {
                                    label: "City",
                                    dense: "",
                                    color: "indigo",
                                    "background-color": "white",
                                    "hide-details": ""
                                  },
                                  model: {
                                    value: _vm.address.city,
                                    callback: function($$v) {
                                      _vm.$set(_vm.address, "city", $$v);
                                    },
                                    expression: "address.city"
                                  }
                                })
                              ],
                              1
                            ),
                            _vm._v(" "),
                            _c(
                              "v-col",
                              { attrs: { cols: "6" } },
                              [
                                _c("v-text-field", {
                                  attrs: {
                                    label: "State",
                                    dense: "",
                                    "background-color": "white",
                                    "hide-details": ""
                                  },
                                  model: {
                                    value: _vm.address.state,
                                    callback: function($$v) {
                                      _vm.$set(_vm.address, "state", $$v);
                                    },
                                    expression: "address.state"
                                  }
                                })
                              ],
                              1
                            )
                          ],
                          1
                        )
                      ],
                      1
                    )
                  ],
                  1
                ),
                _vm._v(" "),
                _c(
                  "v-card-actions",
                  [
                    _c("v-spacer"),
                    _vm._v(" "),
                    _c(
                      "v-btn",
                      {
                        attrs: { color: "error", dark: "" },
                        on: { click: _vm.close_dialog }
                      },
                      [_vm._v(_vm._s(_vm.__("Close")))]
                    ),
                    _vm._v(" "),
                    _c(
                      "v-btn",
                      {
                        attrs: { color: "primary", dark: "" },
                        on: { click: _vm.submit_dialog }
                      },
                      [_vm._v(_vm._s(_vm.__("Submit")))]
                    )
                  ],
                  1
                )
              ],
              1
            )
          ],
          1
        )
      ],
      1
    )
  };
  var __vue_staticRenderFns__$c = [];
  __vue_render__$c._withStripped = true;

    /* style */
    var __vue_inject_styles__$c = undefined;
    /* scoped */
    var __vue_scope_id__$c = undefined;
    /* module identifier */
    var __vue_module_identifier__$c = undefined;
    /* functional template */
    var __vue_is_functional_template__$c = false;
    /* component normalizer */
    function __vue_normalize__$c(
      template, style, script,
      scope, functional, moduleIdentifier,
      createInjector, createInjectorSSR
    ) {
      var component = (typeof script === 'function' ? script.options : script) || {};

      // For security concerns, we use only base name in production mode.
      component.__file = "/home/skss/frappe-bench/apps/posawesome/posawesome/public/js/posapp/components/pos/NewAddress.vue";

      if (!component.render) {
        component.render = template.render;
        component.staticRenderFns = template.staticRenderFns;
        component._compiled = true;

        if (functional) { component.functional = true; }
      }

      component._scopeId = scope;

      return component
    }
    /* style inject */
    
    /* style inject SSR */
    

    
    var NewAddress = __vue_normalize__$c(
      { render: __vue_render__$c, staticRenderFns: __vue_staticRenderFns__$c },
      __vue_inject_styles__$c,
      __vue_script__$c,
      __vue_scope_id__$c,
      __vue_is_functional_template__$c,
      __vue_module_identifier__$c,
      undefined,
      undefined
    );

  //
  var script$d = {
    data: function () { return ({
      varaintsDialog: false,
      parentItem: null,
      items: null,
      filters: {},
      filterdItems: [],
    }); },

    computed: {
      variantsItems: function variantsItems() {
        var this$1 = this;

        if (!this.parentItem) {
          return [];
        } else {
          return this.items.filter(
            function (item) { return item.variant_of == this$1.parentItem.item_code; }
          );
        }
      },
    },

    methods: {
      close_dialog: function close_dialog() {
        this.varaintsDialog = false;
      },
      formtCurrency: function formtCurrency(value) {
        value = parseFloat(value);
        return value.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
      },
      updateFiltredItems: function updateFiltredItems() {
        this.$nextTick(function () {
          var this$1 = this;

          var values = [];
          Object.entries(this.filters).forEach(function (ref) {
            var key = ref[0];
            var value = ref[1];

            if (value) {
              values.push(value);
            }
          });

          if (!values.length) {
            this.filterdItems = this.variantsItems;
          } else {
            var itemsList = [];
            this.filterdItems = [];
            this.variantsItems.forEach(function (item) {
              var apply = true;
              item.item_attributes.forEach(function (attr) {
                if (
                  this$1.filters[attr.attribute] &&
                  this$1.filters[attr.attribute] != attr.attribute_value
                ) {
                  apply = false;
                }
              });
              if (apply && !itemsList.includes(item.item_code)) {
                this$1.filterdItems.push(item);
                itemsList.push(item.item_code);
              }
            });
          }
        });
      },
      add_item: function add_item(item) {
        evntBus.$emit('add_item', item);
        this.close_dialog();
      },
    },

    created: function () {
      var this$1 = this;

      evntBus.$on('open_variants_model', function (item, items) {
        this$1.varaintsDialog = true;
        this$1.parentItem = item || null;
        this$1.items = items;
        this$1.filters = {};
        this$1.$nextTick(function () {
          this.filterdItems = this.variantsItems;
        });
      });
    },
  };

  /* script */
              var __vue_script__$d = script$d;
              
  /* template */
  var __vue_render__$d = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "v-row",
      { attrs: { justify: "center" } },
      [
        _c(
          "v-dialog",
          {
            attrs: { "max-width": "600px" },
            model: {
              value: _vm.varaintsDialog,
              callback: function($$v) {
                _vm.varaintsDialog = $$v;
              },
              expression: "varaintsDialog"
            }
          },
          [
            _c(
              "v-card",
              { attrs: { "min-height": "500px" } },
              [
                _c(
                  "v-card-title",
                  [
                    _c("span", { staticClass: "headline indigo--text" }, [
                      _vm._v("Select Item")
                    ]),
                    _vm._v(" "),
                    _c("v-spacer"),
                    _vm._v(" "),
                    _c(
                      "v-btn",
                      {
                        attrs: { color: "error", dark: "" },
                        on: { click: _vm.close_dialog }
                      },
                      [_vm._v("Close")]
                    )
                  ],
                  1
                ),
                _vm._v(" "),
                _c(
                  "v-card-text",
                  { staticClass: "pa-0" },
                  [
                    _vm.parentItem
                      ? _c(
                          "v-container",
                          [
                            _vm._l(_vm.parentItem.attributes, function(attr) {
                              return _c(
                                "div",
                                { key: attr.attribute },
                                [
                                  _c(
                                    "v-chip-group",
                                    {
                                      attrs: {
                                        "active-class":
                                          "green--text text--accent-4",
                                        column: ""
                                      },
                                      model: {
                                        value: _vm.filters[attr.attribute],
                                        callback: function($$v) {
                                          _vm.$set(
                                            _vm.filters,
                                            attr.attribute,
                                            $$v
                                          );
                                        },
                                        expression: "filters[attr.attribute]"
                                      }
                                    },
                                    _vm._l(attr.values, function(value) {
                                      return _c(
                                        "v-chip",
                                        {
                                          key: value.abbr,
                                          attrs: {
                                            value: value.attribute_value,
                                            outlined: "",
                                            label: ""
                                          },
                                          on: { click: _vm.updateFiltredItems }
                                        },
                                        [
                                          _vm._v(
                                            "\n                " +
                                              _vm._s(value.attribute_value) +
                                              "\n              "
                                          )
                                        ]
                                      )
                                    }),
                                    1
                                  )
                                ],
                                1
                              )
                            }),
                            _vm._v(" "),
                            _c("v-divider"),
                            _vm._v(" "),
                            _c(
                              "div",
                              [
                                _c(
                                  "v-row",
                                  {
                                    staticClass: "overflow-y-auto",
                                    staticStyle: { "max-height": "500px" },
                                    attrs: { dense: "" }
                                  },
                                  _vm._l(_vm.filterdItems, function(item, idx) {
                                    return _c(
                                      "v-col",
                                      {
                                        key: idx,
                                        attrs: {
                                          xl: "2",
                                          lg: "3",
                                          md: "4",
                                          sm: "4",
                                          cols: "6",
                                          "min-height": "50"
                                        }
                                      },
                                      [
                                        _c(
                                          "v-card",
                                          {
                                            attrs: { hover: "hover" },
                                            on: {
                                              click: function($event) {
                                                return _vm.add_item(item)
                                              }
                                            }
                                          },
                                          [
                                            _c(
                                              "v-img",
                                              {
                                                staticClass:
                                                  "white--text align-end",
                                                attrs: {
                                                  src:
                                                    item.image ||
                                                    "/assets/posawesome/js/posapp/components/pos/placeholder-image.png",
                                                  gradient:
                                                    "to bottom, rgba(0,0,0,.2), rgba(0,0,0,.7)",
                                                  height: "100px"
                                                }
                                              },
                                              [
                                                _c("v-card-text", {
                                                  staticClass:
                                                    "text-subtitle-2 px-1 pb-2",
                                                  domProps: {
                                                    textContent: _vm._s(
                                                      item.item_name
                                                    )
                                                  }
                                                })
                                              ],
                                              1
                                            ),
                                            _vm._v(" "),
                                            _c(
                                              "v-card-text",
                                              {
                                                staticClass: "text--primary pa-1"
                                              },
                                              [
                                                _c(
                                                  "div",
                                                  {
                                                    staticClass:
                                                      "text-caption indigo--text accent-3"
                                                  },
                                                  [
                                                    _vm._v(
                                                      "\n                      " +
                                                        _vm._s(item.rate || 0) +
                                                        " " +
                                                        _vm._s(
                                                          item.currency || ""
                                                        ) +
                                                        "\n                    "
                                                    )
                                                  ]
                                                )
                                              ]
                                            )
                                          ],
                                          1
                                        )
                                      ],
                                      1
                                    )
                                  }),
                                  1
                                )
                              ],
                              1
                            )
                          ],
                          2
                        )
                      : _vm._e()
                  ],
                  1
                )
              ],
              1
            )
          ],
          1
        )
      ],
      1
    )
  };
  var __vue_staticRenderFns__$d = [];
  __vue_render__$d._withStripped = true;

    /* style */
    var __vue_inject_styles__$d = undefined;
    /* scoped */
    var __vue_scope_id__$d = undefined;
    /* module identifier */
    var __vue_module_identifier__$d = undefined;
    /* functional template */
    var __vue_is_functional_template__$d = false;
    /* component normalizer */
    function __vue_normalize__$d(
      template, style, script,
      scope, functional, moduleIdentifier,
      createInjector, createInjectorSSR
    ) {
      var component = (typeof script === 'function' ? script.options : script) || {};

      // For security concerns, we use only base name in production mode.
      component.__file = "/home/skss/frappe-bench/apps/posawesome/posawesome/public/js/posapp/components/pos/Variants.vue";

      if (!component.render) {
        component.render = template.render;
        component.staticRenderFns = template.staticRenderFns;
        component._compiled = true;

        if (functional) { component.functional = true; }
      }

      component._scopeId = scope;

      return component
    }
    /* style inject */
    
    /* style inject SSR */
    

    
    var Variants = __vue_normalize__$d(
      { render: __vue_render__$d, staticRenderFns: __vue_staticRenderFns__$d },
      __vue_inject_styles__$d,
      __vue_script__$d,
      __vue_scope_id__$d,
      __vue_is_functional_template__$d,
      __vue_module_identifier__$d,
      undefined,
      undefined
    );

  //
  var script$e = {
    data: function () { return ({
      invoicesDialog: false,
      singleSelect: true,
      selected: [],
      dialog_data: '',
      company: '',
      invoice_name: '',
      headers: [
        {
          text: __('Customer'),
          value: 'customer',
          align: 'start',
          sortable: true,
        },
        {
          text: __('Date'),
          align: 'start',
          sortable: true,
          value: 'posting_date',
        },
        {
          text: __('Invoice'),
          value: 'name',
          align: 'start',
          sortable: true,
        },
        {
          text: __('Amount'),
          value: 'grand_total',
          align: 'start',
          sortable: false,
        } ],
    }); },
    watch: {},
    methods: {
      close_dialog: function close_dialog() {
        this.invoicesDialog = false;
      },
      search_invoices_by_enter: function search_invoices_by_enter(e) {
        if (e.keyCode === 13) {
          this.search_invoices();
        }
      },
      search_invoices: function search_invoices() {
        var vm = this;
        frappe.call({
          method: 'posawesome.posawesome.api.posapp.search_invoices_for_return',
          args: {
            invoice_name: vm.invoice_name,
            company: vm.company,
          },
          async: false,
          callback: function (r) {
            if (r.message) {
              vm.dialog_data = r.message;
            }
          },
        });
      },
      submit_dialog: function submit_dialog() {
        if (this.selected.length > 0) {
          var return_doc = this.selected[0];
          var invoice_doc = {};
          var items = [];
          return_doc.items.forEach(function (item) {
            var new_item = Object.assign({}, item);
            new_item.qty = item.qty * -1;
            new_item.stock_qty = item.stock_qty * -1;
            new_item.amount = item.amount * -1;
            items.push(new_item);
          });
          invoice_doc.items = items;
          invoice_doc.is_return = 1;
          invoice_doc.return_against = return_doc.name;
          invoice_doc.customer = return_doc.customer;
          var data = { invoice_doc: invoice_doc, return_doc: return_doc };
          evntBus.$emit('load_return_invoice', data);
          this.invoicesDialog = false;
        }
      },
      formtCurrency: function formtCurrency(value) {
        value = parseFloat(value);
        return value.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
      },
    },
    created: function () {
      var this$1 = this;

      evntBus.$on('open_returns', function (data) {
        this$1.invoicesDialog = true;
        this$1.company = data;
        this$1.invoice_name = '';
        this$1.dialog_data = '';
        this$1.selected = [];
      });
    },
  };

  /* script */
              var __vue_script__$e = script$e;
              
  /* template */
  var __vue_render__$e = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "v-row",
      { attrs: { justify: "center" } },
      [
        _c(
          "v-dialog",
          {
            attrs: { "max-width": "800px", "min-width": "800px" },
            model: {
              value: _vm.invoicesDialog,
              callback: function($$v) {
                _vm.invoicesDialog = $$v;
              },
              expression: "invoicesDialog"
            }
          },
          [
            _c(
              "v-card",
              [
                _c("v-card-title", [
                  _c("span", { staticClass: "headline indigo--text" }, [
                    _vm._v(_vm._s(_vm.__("Select Return Invoice")))
                  ])
                ]),
                _vm._v(" "),
                _c(
                  "v-container",
                  [
                    _c(
                      "v-row",
                      { staticClass: "mb-4" },
                      [
                        _c("v-text-field", {
                          staticClass: "mx-4",
                          attrs: {
                            color: "indigo",
                            label: _vm.frappe._("Invoice ID"),
                            "background-color": "white",
                            "hide-details": "",
                            dense: "",
                            clearable: ""
                          },
                          model: {
                            value: _vm.invoice_name,
                            callback: function($$v) {
                              _vm.invoice_name = $$v;
                            },
                            expression: "invoice_name"
                          }
                        }),
                        _vm._v(" "),
                        _c(
                          "v-btn",
                          {
                            staticClass: "ml-2",
                            attrs: { text: "", color: "primary", dark: "" },
                            on: { click: _vm.search_invoices }
                          },
                          [_vm._v(_vm._s(_vm.__("Search")))]
                        )
                      ],
                      1
                    ),
                    _vm._v(" "),
                    _c(
                      "v-row",
                      [
                        _vm.dialog_data
                          ? _c(
                              "v-col",
                              { staticClass: "pa-1", attrs: { cols: "12" } },
                              [
                                [
                                  _c("v-data-table", {
                                    staticClass: "elevation-1",
                                    attrs: {
                                      headers: _vm.headers,
                                      items: _vm.dialog_data,
                                      "item-key": "name",
                                      "single-select": _vm.singleSelect,
                                      "show-select": ""
                                    },
                                    scopedSlots: _vm._u(
                                      [
                                        {
                                          key: "item.grand_total",
                                          fn: function(ref) {
                                            var item = ref.item;
                                            return [
                                              _vm._v(
                                                _vm._s(
                                                  _vm.formtCurrency(
                                                    item.grand_total
                                                  )
                                                )
                                              )
                                            ]
                                          }
                                        }
                                      ],
                                      null,
                                      false,
                                      710962859
                                    ),
                                    model: {
                                      value: _vm.selected,
                                      callback: function($$v) {
                                        _vm.selected = $$v;
                                      },
                                      expression: "selected"
                                    }
                                  })
                                ]
                              ],
                              2
                            )
                          : _vm._e()
                      ],
                      1
                    )
                  ],
                  1
                ),
                _vm._v(" "),
                _c(
                  "v-card-actions",
                  { staticClass: "mt-4" },
                  [
                    _c("v-spacer"),
                    _vm._v(" "),
                    _c(
                      "v-btn",
                      {
                        attrs: { color: "error mx-2", dark: "" },
                        on: { click: _vm.close_dialog }
                      },
                      [_vm._v("Close")]
                    ),
                    _vm._v(" "),
                    _vm.selected.length
                      ? _c(
                          "v-btn",
                          {
                            attrs: { color: "primary", dark: "" },
                            on: { click: _vm.submit_dialog }
                          },
                          [_vm._v(_vm._s(_vm.__("Select")))]
                        )
                      : _vm._e()
                  ],
                  1
                )
              ],
              1
            )
          ],
          1
        )
      ],
      1
    )
  };
  var __vue_staticRenderFns__$e = [];
  __vue_render__$e._withStripped = true;

    /* style */
    var __vue_inject_styles__$e = undefined;
    /* scoped */
    var __vue_scope_id__$e = undefined;
    /* module identifier */
    var __vue_module_identifier__$e = undefined;
    /* functional template */
    var __vue_is_functional_template__$e = false;
    /* component normalizer */
    function __vue_normalize__$e(
      template, style, script,
      scope, functional, moduleIdentifier,
      createInjector, createInjectorSSR
    ) {
      var component = (typeof script === 'function' ? script.options : script) || {};

      // For security concerns, we use only base name in production mode.
      component.__file = "/home/skss/frappe-bench/apps/posawesome/posawesome/public/js/posapp/components/pos/Returns.vue";

      if (!component.render) {
        component.render = template.render;
        component.staticRenderFns = template.staticRenderFns;
        component._compiled = true;

        if (functional) { component.functional = true; }
      }

      component._scopeId = scope;

      return component
    }
    /* style inject */
    
    /* style inject SSR */
    

    
    var Returns = __vue_normalize__$e(
      { render: __vue_render__$e, staticRenderFns: __vue_staticRenderFns__$e },
      __vue_inject_styles__$e,
      __vue_script__$e,
      __vue_scope_id__$e,
      __vue_is_functional_template__$e,
      __vue_module_identifier__$e,
      undefined,
      undefined
    );

  //
  var script$f = {
    data: function () { return ({
      dialog: false,
      singleSelect: true,
      selected: [],
      dialog_data: '',
      company: '',
      customer: '',
      mode_of_payment: '',
      full_name: '',
      mobile_no: '',
      headers: [
        {
          text: __('Full Name'),
          value: 'full_name',
          align: 'start',
          sortable: true,
        },
        {
          text: __('Mobile No'),
          value: 'mobile_no',
          align: 'start',
          sortable: true,
        },
        {
          text: __('Amount'),
          value: 'amount',
          align: 'start',
          sortable: true,
        },
        {
          text: __('Date'),
          align: 'start',
          sortable: true,
          value: 'posting_date',
        } ],
    }); },
    watch: {},
    methods: {
      close_dialog: function close_dialog() {
        this.dialog = false;
      },
      search_by_enter: function search_by_enter(e) {
        if (e.keyCode === 13) {
          this.search();
        }
      },
      search: function search() {
        var vm = this;
        frappe.call({
          method: 'posawesome.posawesome.api.m_pesa.get_mpesa_draft_payments',
          args: {
            company: this.company,
            mode_of_payment: this.mode_of_payment,
            mobile_no: this.mobile_no,
            full_name: this.full_name,
          },
          async: false,
          callback: function (r) {
            if (!r.exc) {
              vm.dialog_data = r.message;
            }
          },
        });
      },
      submit_dialog: function submit_dialog() {
        var vm = this;
        if (this.selected.length > 0) {
          var selected_payment = this.selected[0].name;
          frappe.call({
            method: 'posawesome.posawesome.api.m_pesa.submit_mpesa_payment',
            args: {
              mpesa_payment: selected_payment,
              customer: this.customer,
            },
            async: false,
            callback: function (r) {
              if (!r.exc) {
                evntBus.$emit('set_mpesa_payment', r.message);
                vm.dialog = false;
              }
            },
          });
        }
      },
      formtCurrency: function formtCurrency(value) {
        value = parseFloat(value);
        return value.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
      },
    },
    created: function () {
      var this$1 = this;

      evntBus.$on('open_mpesa_payments', function (data) {
        this$1.dialog = true;
        this$1.full_name = '';
        this$1.mobile_no = '';
        this$1.company = data.company;
        this$1.customer = data.customer;
        this$1.mode_of_payment = data.mode_of_payment;
        this$1.dialog_data = '';
        this$1.selected = [];
      });
    },
  };

  /* script */
              var __vue_script__$f = script$f;
              
  /* template */
  var __vue_render__$f = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "v-row",
      { attrs: { justify: "center" } },
      [
        _c(
          "v-dialog",
          {
            attrs: { "max-width": "800px", "min-width": "800px" },
            model: {
              value: _vm.dialog,
              callback: function($$v) {
                _vm.dialog = $$v;
              },
              expression: "dialog"
            }
          },
          [
            _c(
              "v-card",
              [
                _c("v-card-title", [
                  _c("span", { staticClass: "headline indigo--text" }, [
                    _vm._v(_vm._s(_vm.__("Select Payment")))
                  ])
                ]),
                _vm._v(" "),
                _c(
                  "v-container",
                  [
                    _c(
                      "v-row",
                      { staticClass: "mb-4" },
                      [
                        _c("v-text-field", {
                          staticClass: "mx-4",
                          attrs: {
                            color: "indigo",
                            label: _vm.frappe._("Full Name"),
                            "background-color": "white",
                            "hide-details": "",
                            dense: "",
                            clearable: ""
                          },
                          model: {
                            value: _vm.full_name,
                            callback: function($$v) {
                              _vm.full_name = $$v;
                            },
                            expression: "full_name"
                          }
                        }),
                        _vm._v(" "),
                        _c("v-text-field", {
                          staticClass: "mx-4",
                          attrs: {
                            color: "indigo",
                            label: _vm.frappe._("Mobile No"),
                            "background-color": "white",
                            "hide-details": "",
                            dense: "",
                            clearable: ""
                          },
                          model: {
                            value: _vm.mobile_no,
                            callback: function($$v) {
                              _vm.mobile_no = $$v;
                            },
                            expression: "mobile_no"
                          }
                        }),
                        _vm._v(" "),
                        _c(
                          "v-btn",
                          {
                            staticClass: "ml-2",
                            attrs: { text: "", color: "primary", dark: "" },
                            on: { click: _vm.search }
                          },
                          [_vm._v(_vm._s(_vm.__("Search")))]
                        )
                      ],
                      1
                    ),
                    _vm._v(" "),
                    _c(
                      "v-row",
                      [
                        _vm.dialog_data
                          ? _c(
                              "v-col",
                              { staticClass: "pa-1", attrs: { cols: "12" } },
                              [
                                [
                                  _c("v-data-table", {
                                    staticClass: "elevation-1",
                                    attrs: {
                                      headers: _vm.headers,
                                      items: _vm.dialog_data,
                                      "item-key": "name",
                                      "single-select": _vm.singleSelect,
                                      "show-select": ""
                                    },
                                    scopedSlots: _vm._u(
                                      [
                                        {
                                          key: "item.amount",
                                          fn: function(ref) {
                                            var item = ref.item;
                                            return [
                                              _vm._v(
                                                _vm._s(
                                                  _vm.formtCurrency(item.amount)
                                                )
                                              )
                                            ]
                                          }
                                        },
                                        {
                                          key: "item.posting_date",
                                          fn: function(ref) {
                                            var item = ref.item;
                                            return [
                                              _vm._v(
                                                _vm._s(
                                                  item.posting_date.slice(0, 16)
                                                )
                                              )
                                            ]
                                          }
                                        }
                                      ],
                                      null,
                                      false,
                                      3318502569
                                    ),
                                    model: {
                                      value: _vm.selected,
                                      callback: function($$v) {
                                        _vm.selected = $$v;
                                      },
                                      expression: "selected"
                                    }
                                  })
                                ]
                              ],
                              2
                            )
                          : _vm._e()
                      ],
                      1
                    )
                  ],
                  1
                ),
                _vm._v(" "),
                _c(
                  "v-card-actions",
                  { staticClass: "mt-4" },
                  [
                    _c("v-spacer"),
                    _vm._v(" "),
                    _c(
                      "v-btn",
                      {
                        attrs: { color: "error mx-2", dark: "" },
                        on: { click: _vm.close_dialog }
                      },
                      [_vm._v("Close")]
                    ),
                    _vm._v(" "),
                    _vm.selected.length
                      ? _c(
                          "v-btn",
                          {
                            attrs: { color: "primary", dark: "" },
                            on: { click: _vm.submit_dialog }
                          },
                          [_vm._v(_vm._s(_vm.__("Select")))]
                        )
                      : _vm._e()
                  ],
                  1
                )
              ],
              1
            )
          ],
          1
        )
      ],
      1
    )
  };
  var __vue_staticRenderFns__$f = [];
  __vue_render__$f._withStripped = true;

    /* style */
    var __vue_inject_styles__$f = undefined;
    /* scoped */
    var __vue_scope_id__$f = undefined;
    /* module identifier */
    var __vue_module_identifier__$f = undefined;
    /* functional template */
    var __vue_is_functional_template__$f = false;
    /* component normalizer */
    function __vue_normalize__$f(
      template, style, script,
      scope, functional, moduleIdentifier,
      createInjector, createInjectorSSR
    ) {
      var component = (typeof script === 'function' ? script.options : script) || {};

      // For security concerns, we use only base name in production mode.
      component.__file = "/home/skss/frappe-bench/apps/posawesome/posawesome/public/js/posapp/components/pos/Mpesa-Payments.vue";

      if (!component.render) {
        component.render = template.render;
        component.staticRenderFns = template.staticRenderFns;
        component._compiled = true;

        if (functional) { component.functional = true; }
      }

      component._scopeId = scope;

      return component
    }
    /* style inject */
    
    /* style inject SSR */
    

    
    var MpesaPayments = __vue_normalize__$f(
      { render: __vue_render__$f, staticRenderFns: __vue_staticRenderFns__$f },
      __vue_inject_styles__$f,
      __vue_script__$f,
      __vue_scope_id__$f,
      __vue_is_functional_template__$f,
      __vue_module_identifier__$f,
      undefined,
      undefined
    );

  //

  var script$g = {
    data: function () {
      return {
        dialog: false,
        pos_profile: '',
        pos_opening_shift: '',
        payment: false,
        offers: false,
        coupons: false,
      };
    },

    components: {
      ItemsSelector: ItemsSelector,
      Invoice: Invoice,
      OpeningDialog: OpeningDialog,
      Payments: Payments,
      Drafts: Drafts,
      ClosingDialog: ClosingDialog,
      NewCustomer: NewCustomer,
      Returns: Returns,
      PosOffers: PosOffers,
      PosCoupons: PosCoupons,
      EditCustomer: EditCustomer,
      NewAddress: NewAddress,
      Variants: Variants,
      MpesaPayments: MpesaPayments,
    },

    methods: {
      check_opening_entry: function check_opening_entry() {
        var this$1 = this;

        return frappe
          .call('posawesome.posawesome.api.posapp.check_opening_shift', {
            user: frappe.session.user,
          })
          .then(function (r) {
            if (r.message) {
              this$1.pos_profile = r.message.pos_profile;
              this$1.pos_opening_shift = r.message.pos_opening_shift;
              this$1.get_offers(this$1.pos_profile.name);
              evntBus.$emit('register_pos_profile', r.message);
              evntBus.$emit('set_company', r.message.company);
              console.info('LoadPosProfile');
            } else {
              this$1.create_opening_voucher();
            }
          });
      },
      create_opening_voucher: function create_opening_voucher() {
        this.dialog = true;
      },
      get_closing_data: function get_closing_data() {
        return frappe
          .call(
            'posawesome.posawesome.doctype.pos_closing_shift.pos_closing_shift.make_closing_shift_from_opening',
            {
              opening_shift: this.pos_opening_shift,
            }
          )
          .then(function (r) {
            if (r.message) {
              evntBus.$emit('open_ClosingDialog', r.message);
            } else {
              console.log(r);
            }
          });
      },
      submit_closing_pos: function submit_closing_pos(data) {
        var this$1 = this;

        frappe
          .call(
            'posawesome.posawesome.doctype.pos_closing_shift.pos_closing_shift.submit_closing_shift',
            {
              closing_shift: data,
            }
          )
          .then(function (r) {
            if (r.message) {
              evntBus.$emit('show_mesage', {
                text: "POS Shift Closed",
                color: 'success',
              });
              window.location.href = '/app';
              this$1.check_opening_entry();
            } else {
              console.log(r);
            }
          });
      },
      get_offers: function get_offers(pos_profile) {
        return frappe
          .call('posawesome.posawesome.api.posapp.get_offers', {
            profile: pos_profile,
          })
          .then(function (r) {
            if (r.message) {
              console.info('LoadOffers');
              evntBus.$emit('set_offers', r.message);
            }
          });
      },
      get_pos_setting: function get_pos_setting() {
        frappe.db.get_doc('POS Settings', undefined).then(function (doc) {
          evntBus.$emit('set_pos_settings', doc);
        });
      },
    },

    created: function () {
      this.$nextTick(function () {
        var this$1 = this;

        this.check_opening_entry();
        this.get_pos_setting();
        evntBus.$on('close_opening_dialog', function () {
          this$1.dialog = false;
        });
        evntBus.$on('register_pos_data', function (data) {
          this$1.pos_profile = data.pos_profile;
          this$1.get_offers(this$1.pos_profile.name);
          this$1.pos_opening_shift = data.pos_opening_shift;
          evntBus.$emit('register_pos_profile', data);
          console.info('LoadPosProfile');
        });
        evntBus.$on('show_payment', function (data) {
          this$1.payment = data === 'true';
          this$1.offers = false;
          this$1.coupons = false;
        });
        evntBus.$on('show_offers', function (data) {
          this$1.offers = data === 'true';
          this$1.payment = false;
          this$1.coupons = false;
        });
        evntBus.$on('show_coupons', function (data) {
          this$1.coupons = data === 'true';
          this$1.offers = false;
          this$1.payment = false;
        });
        evntBus.$on('open_closing_dialog', function () {
          this$1.get_closing_data();
        });
        evntBus.$on('submit_closing_pos', function (data) {
          this$1.submit_closing_pos(data);
        });
      });
    },
  };

  /* script */
              var __vue_script__$g = script$g;
              
  /* template */
  var __vue_render__$g = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      { attrs: { fluid: "" } },
      [
        _c("ClosingDialog"),
        _vm._v(" "),
        _c("Drafts"),
        _vm._v(" "),
        _c("Returns"),
        _vm._v(" "),
        _c("NewCustomer"),
        _vm._v(" "),
        _c("EditCustomer"),
        _vm._v(" "),
        _c("NewAddress"),
        _vm._v(" "),
        _c("MpesaPayments"),
        _vm._v(" "),
        _c("Variants"),
        _vm._v(" "),
        _vm.dialog
          ? _c("OpeningDialog", { attrs: { dialog: _vm.dialog } })
          : _vm._e(),
        _vm._v(" "),
        _c(
          "v-row",
          {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: !_vm.dialog,
                expression: "!dialog"
              }
            ]
          },
          [
            _c(
              "v-col",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: !_vm.payment && !_vm.offers && !_vm.coupons,
                    expression: "!payment && !offers && !coupons"
                  }
                ],
                staticClass: "pos pr-0",
                attrs: { xl: "5", lg: "5", md: "5", sm: "5", cols: "12" }
              },
              [_c("ItemsSelector")],
              1
            ),
            _vm._v(" "),
            _c(
              "v-col",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.offers,
                    expression: "offers"
                  }
                ],
                staticClass: "pos pr-0",
                attrs: { xl: "5", lg: "5", md: "5", sm: "5", cols: "12" }
              },
              [_c("PosOffers")],
              1
            ),
            _vm._v(" "),
            _c(
              "v-col",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.coupons,
                    expression: "coupons"
                  }
                ],
                staticClass: "pos pr-0",
                attrs: { xl: "5", lg: "5", md: "5", sm: "5", cols: "12" }
              },
              [_c("PosCoupons")],
              1
            ),
            _vm._v(" "),
            _c(
              "v-col",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.payment,
                    expression: "payment"
                  }
                ],
                staticClass: "pos pr-0",
                attrs: { xl: "5", lg: "5", md: "5", sm: "5", cols: "12" }
              },
              [_c("Payments")],
              1
            ),
            _vm._v(" "),
            _c(
              "v-col",
              {
                staticClass: "pos",
                attrs: { xl: "7", lg: "7", md: "7", sm: "7", cols: "12" }
              },
              [_c("Invoice")],
              1
            )
          ],
          1
        )
      ],
      1
    )
  };
  var __vue_staticRenderFns__$g = [];
  __vue_render__$g._withStripped = true;

    /* style */
    var __vue_inject_styles__$g = function (inject) {
      if (!inject) { return }
      inject("data-v-26835bb9_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: {"version":3,"sources":[],"names":[],"mappings":"","file":"Pos.vue"}, media: undefined });

    };
    /* scoped */
    var __vue_scope_id__$g = "data-v-26835bb9";
    /* module identifier */
    var __vue_module_identifier__$g = undefined;
    /* functional template */
    var __vue_is_functional_template__$g = false;
    /* component normalizer */
    function __vue_normalize__$g(
      template, style, script,
      scope, functional, moduleIdentifier,
      createInjector, createInjectorSSR
    ) {
      var component = (typeof script === 'function' ? script.options : script) || {};

      // For security concerns, we use only base name in production mode.
      component.__file = "/home/skss/frappe-bench/apps/posawesome/posawesome/public/js/posapp/components/pos/Pos.vue";

      if (!component.render) {
        component.render = template.render;
        component.staticRenderFns = template.staticRenderFns;
        component._compiled = true;

        if (functional) { component.functional = true; }
      }

      component._scopeId = scope;

      {
        var hook;
        if (style) {
          hook = function(context) {
            style.call(this, createInjector(context));
          };
        }

        if (hook !== undefined) {
          if (component.functional) {
            // register for functional component in vue file
            var originalRender = component.render;
            component.render = function renderWithStyleInjection(h, context) {
              hook.call(context);
              return originalRender(h, context)
            };
          } else {
            // inject component registration as beforeCreate hook
            var existing = component.beforeCreate;
            component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
          }
        }
      }

      return component
    }
    /* style inject */
    function __vue_create_injector__$3() {
      var head = document.head || document.getElementsByTagName('head')[0];
      var styles = __vue_create_injector__$3.styles || (__vue_create_injector__$3.styles = {});
      var isOldIE =
        typeof navigator !== 'undefined' &&
        /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

      return function addStyle(id, css) {
        if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

        var group = isOldIE ? css.media || 'default' : id;
        var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

        if (!style.ids.includes(id)) {
          var code = css.source;
          var index = style.ids.length;

          style.ids.push(id);

          if (isOldIE) {
            style.element = style.element || document.querySelector('style[data-group=' + group + ']');
          }

          if (!style.element) {
            var el = style.element = document.createElement('style');
            el.type = 'text/css';

            if (css.media) { el.setAttribute('media', css.media); }
            if (isOldIE) {
              el.setAttribute('data-group', group);
              el.setAttribute('data-next-index', '0');
            }

            head.appendChild(el);
          }

          if (isOldIE) {
            index = parseInt(style.element.getAttribute('data-next-index'));
            style.element.setAttribute('data-next-index', index + 1);
          }

          if (style.element.styleSheet) {
            style.parts.push(code);
            style.element.styleSheet.cssText = style.parts
              .filter(Boolean)
              .join('\n');
          } else {
            var textNode = document.createTextNode(code);
            var nodes = style.element.childNodes;
            if (nodes[index]) { style.element.removeChild(nodes[index]); }
            if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
            else { style.element.appendChild(textNode); }
          }
        }
      }
    }
    /* style inject SSR */
    

    
    var POS = __vue_normalize__$g(
      { render: __vue_render__$g, staticRenderFns: __vue_staticRenderFns__$g },
      __vue_inject_styles__$g,
      __vue_script__$g,
      __vue_scope_id__$g,
      __vue_is_functional_template__$g,
      __vue_module_identifier__$g,
      __vue_create_injector__$3,
      undefined
    );

  //

  var script$h = {
    data: function () {
      return {
        page: 'POS',
      };
    },
    components: {
      Navbar: Navbar,
      POS: POS,
    },
    methods: {
      setPage: function setPage(page) {
        this.page = page;
      },
      remove_frappe_nav: function remove_frappe_nav() {
        this.$nextTick(function () {
          $('.page-head').remove();
          $('.navbar.navbar-default.navbar-fixed-top').remove();
        });
      },
    },
    mounted: function mounted() {
      this.remove_frappe_nav();
    },
    updated: function updated() {},
    created: function () {
      var this$1 = this;

      setTimeout(function () {
        this$1.remove_frappe_nav();
      }, 1000);
    },
  };

  /* script */
              var __vue_script__$h = script$h;
              
  /* template */
  var __vue_render__$h = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "v-app",
      { staticClass: "container1" },
      [
        _c(
          "v-main",
          [
            _c("Navbar", {
              on: {
                changePage: function($event) {
                  return _vm.setPage($event)
                }
              }
            }),
            _vm._v(" "),
            _c(
              "keep-alive",
              [_c(_vm.page, { tag: "component", staticClass: "mx-4 md-4" })],
              1
            )
          ],
          1
        )
      ],
      1
    )
  };
  var __vue_staticRenderFns__$h = [];
  __vue_render__$h._withStripped = true;

    /* style */
    var __vue_inject_styles__$h = function (inject) {
      if (!inject) { return }
      inject("data-v-5c74be0c_0", { source: "\n.container1[data-v-5c74be0c] {\n  margin-top: 0px;\n}\n", map: {"version":3,"sources":["/home/skss/frappe-bench/apps/posawesome/posawesome/public/js/posapp/Home.vue"],"names":[],"mappings":";AAiDA;EACA,eAAA;AACA","file":"Home.vue","sourcesContent":["<template>\n  <v-app class=\"container1\">\n    <v-main>\n      <Navbar @changePage=\"setPage($event)\"></Navbar>\n      <keep-alive>\n        <component v-bind:is=\"page\" class=\"mx-4 md-4\"></component>\n      </keep-alive>\n    </v-main>\n  </v-app>\n</template>\n\n<script>\nimport Navbar from './components/Navbar.vue';\nimport POS from './components/pos/Pos.vue';\n\nexport default {\n  data: function () {\n    return {\n      page: 'POS',\n    };\n  },\n  components: {\n    Navbar,\n    POS,\n  },\n  methods: {\n    setPage(page) {\n      this.page = page;\n    },\n    remove_frappe_nav() {\n      this.$nextTick(function () {\n        $('.page-head').remove();\n        $('.navbar.navbar-default.navbar-fixed-top').remove();\n      });\n    },\n  },\n  mounted() {\n    this.remove_frappe_nav();\n  },\n  updated() {},\n  created: function () {\n    setTimeout(() => {\n      this.remove_frappe_nav();\n    }, 1000);\n  },\n};\n</script>\n\n<style scoped>\n.container1 {\n  margin-top: 0px;\n}\n</style>"]}, media: undefined });

    };
    /* scoped */
    var __vue_scope_id__$h = "data-v-5c74be0c";
    /* module identifier */
    var __vue_module_identifier__$h = undefined;
    /* functional template */
    var __vue_is_functional_template__$h = false;
    /* component normalizer */
    function __vue_normalize__$h(
      template, style, script,
      scope, functional, moduleIdentifier,
      createInjector, createInjectorSSR
    ) {
      var component = (typeof script === 'function' ? script.options : script) || {};

      // For security concerns, we use only base name in production mode.
      component.__file = "/home/skss/frappe-bench/apps/posawesome/posawesome/public/js/posapp/Home.vue";

      if (!component.render) {
        component.render = template.render;
        component.staticRenderFns = template.staticRenderFns;
        component._compiled = true;

        if (functional) { component.functional = true; }
      }

      component._scopeId = scope;

      {
        var hook;
        if (style) {
          hook = function(context) {
            style.call(this, createInjector(context));
          };
        }

        if (hook !== undefined) {
          if (component.functional) {
            // register for functional component in vue file
            var originalRender = component.render;
            component.render = function renderWithStyleInjection(h, context) {
              hook.call(context);
              return originalRender(h, context)
            };
          } else {
            // inject component registration as beforeCreate hook
            var existing = component.beforeCreate;
            component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
          }
        }
      }

      return component
    }
    /* style inject */
    function __vue_create_injector__$4() {
      var head = document.head || document.getElementsByTagName('head')[0];
      var styles = __vue_create_injector__$4.styles || (__vue_create_injector__$4.styles = {});
      var isOldIE =
        typeof navigator !== 'undefined' &&
        /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

      return function addStyle(id, css) {
        if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

        var group = isOldIE ? css.media || 'default' : id;
        var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

        if (!style.ids.includes(id)) {
          var code = css.source;
          var index = style.ids.length;

          style.ids.push(id);

          if (isOldIE) {
            style.element = style.element || document.querySelector('style[data-group=' + group + ']');
          }

          if (!style.element) {
            var el = style.element = document.createElement('style');
            el.type = 'text/css';

            if (css.media) { el.setAttribute('media', css.media); }
            if (isOldIE) {
              el.setAttribute('data-group', group);
              el.setAttribute('data-next-index', '0');
            }

            head.appendChild(el);
          }

          if (isOldIE) {
            index = parseInt(style.element.getAttribute('data-next-index'));
            style.element.setAttribute('data-next-index', index + 1);
          }

          if (style.element.styleSheet) {
            style.parts.push(code);
            style.element.styleSheet.cssText = style.parts
              .filter(Boolean)
              .join('\n');
          } else {
            var textNode = document.createTextNode(code);
            var nodes = style.element.childNodes;
            if (nodes[index]) { style.element.removeChild(nodes[index]); }
            if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
            else { style.element.appendChild(textNode); }
          }
        }
      }
    }
    /* style inject SSR */
    

    
    var Home = __vue_normalize__$h(
      { render: __vue_render__$h, staticRenderFns: __vue_staticRenderFns__$h },
      __vue_inject_styles__$h,
      __vue_script__$h,
      __vue_scope_id__$h,
      __vue_is_functional_template__$h,
      __vue_module_identifier__$h,
      __vue_create_injector__$4,
      undefined
    );

  frappe.provide('frappe.PosApp');


  frappe.PosApp.posapp = class {
      constructor(ref) {
      var parent = ref.parent;

          this.$parent = $(document);
          this.page = parent.page;
          this.make_body();

      }
      make_body () {
          this.$el = this.$parent.find('.main-section');
          this.vue = new Vue({
              vuetify: new Vuetify(),
              el: this.$el[0],
              data: {
              },
              render: function (h) { return h(Home); },
          });
      }
      setup_header () {

      }
      
  };

}());
//# sourceMappingURL=posapp.min.js.map
